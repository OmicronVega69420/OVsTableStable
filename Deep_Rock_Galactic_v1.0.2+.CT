<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <CheatEntries>
    <CheatEntry>
      <ID>1693</ID>
      <Description>"WARNING: Do NOT host games with random people online while using this table! You will be sent to BANana Island! Do not ruin other people's experiences!"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF8000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1286</ID>
          <Description>"Want to help make this table better? Join our Discord! - https://discord.gg/rSjnn6r"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>836</ID>
              <Description>"Bosco"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1467</ID>
                  <Description>"Unlimited Revives"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-03-01
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedRevives,FSD-Win64-Shipping.exe,89 81 F8 05 00 00 48 81) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6BAFDE)

label(code)
label(return)

newmem:

code:
  add [rcx+000005F8],(int)0
  jmp return

UnlimitedRevives:
  jmp newmem
  nop
return:
registersymbol(UnlimitedRevives)

[DISABLE]

UnlimitedRevives:
  db 89 81 F8 05 00 00

unregistersymbol(UnlimitedRevives)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6BAFDE

"FSD-Win64-Shipping.exe"+6BAFBE: CC                       -  int 3
"FSD-Win64-Shipping.exe"+6BAFBF: CC                       -  int 3
"FSD-Win64-Shipping.exe"+6BAFC0: 48 83 EC 28              -  sub rsp,28
"FSD-Win64-Shipping.exe"+6BAFC4: 80 B9 18 01 00 00 03     -  cmp byte ptr [rcx+00000118],03
"FSD-Win64-Shipping.exe"+6BAFCB: 75 2E                    -  jne FSD-Win64-Shipping.exe+6BAFFB
"FSD-Win64-Shipping.exe"+6BAFCD: 8B 81 F8 05 00 00        -  mov eax,[rcx+000005F8]
"FSD-Win64-Shipping.exe"+6BAFD3: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+6BAFD5: 7E 24                    -  jle FSD-Win64-Shipping.exe+6BAFFB
"FSD-Win64-Shipping.exe"+6BAFD7: FF C8                    -  dec eax
"FSD-Win64-Shipping.exe"+6BAFD9: 48 8D 54 24 30           -  lea rdx,[rsp+30]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6BAFDE: 89 81 F8 05 00 00        -  mov [rcx+000005F8],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6BAFE4: 48 81 C1 90 04 00 00     -  add rcx,00000490
"FSD-Win64-Shipping.exe"+6BAFEB: 89 44 24 30              -  mov [rsp+30],eax
"FSD-Win64-Shipping.exe"+6BAFEF: E8 2C 3F C2 FF           -  call FSD-Win64-Shipping.exe+2DEF20
"FSD-Win64-Shipping.exe"+6BAFF4: B0 01                    -  mov al,01
"FSD-Win64-Shipping.exe"+6BAFF6: 48 83 C4 28              -  add rsp,28
"FSD-Win64-Shipping.exe"+6BAFFA: C3                       -  ret
"FSD-Win64-Shipping.exe"+6BAFFB: 32 C0                    -  xor al,al
"FSD-Win64-Shipping.exe"+6BAFFD: 48 83 C4 28              -  add rsp,28
"FSD-Win64-Shipping.exe"+6BB001: C3                       -  ret
"FSD-Win64-Shipping.exe"+6BB002: CC                       -  int 3
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>986</ID>
                  <Description>"Unlimited Rockets"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2019-09-26
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(BoscoMissiles,FSD-Win64-Shipping.exe,FF 8E 90 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+71AB68)

label(code)
label(return)

newmem:

code:
  add [rsi+00000190],(int)0
  jmp return

BoscoMissiles:
  jmp newmem
  nop
return:
registersymbol(BoscoMissiles)

[DISABLE]

BoscoMissiles:
  db FF 8E 90 01 00 00

unregistersymbol(BoscoMissiles)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+71AB68

"FSD-Win64-Shipping.exe"+71AB38: 48 8B D0                    -  mov rdx,rax
"FSD-Win64-Shipping.exe"+71AB3B: 48 8B 41 30                 -  mov rax,[rcx+30]
"FSD-Win64-Shipping.exe"+71AB3F: 4C 39 04 D0                 -  cmp [rax+rdx*8],r8
"FSD-Win64-Shipping.exe"+71AB43: 75 16                       -  jne FSD-Win64-Shipping.exe+71AB5B
"FSD-Win64-Shipping.exe"+71AB45: 48 8B 8B 08 04 00 00        -  mov rcx,[rbx+00000408]
"FSD-Win64-Shipping.exe"+71AB4C: 48 8D 15 C5 5C F0 02        -  lea rdx,[FSD-Win64-Shipping.exe+3620818]
"FSD-Win64-Shipping.exe"+71AB53: 45 33 C0                    -  xor r8d,r8d
"FSD-Win64-Shipping.exe"+71AB56: E8 75 F3 8E 01              -  call FSD-Win64-Shipping.exe+2009ED0
"FSD-Win64-Shipping.exe"+71AB5B: 80 BE 96 01 00 00 00        -  cmp byte ptr [rsi+00000196],00
"FSD-Win64-Shipping.exe"+71AB62: 0F 85 34 0C 00 00           -  jne FSD-Win64-Shipping.exe+71B79C
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+71AB68: FF 8E 90 01 00 00           -  dec [rsi+00000190]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+71AB6E: 48 8D 8E 08 01 00 00        -  lea rcx,[rsi+00000108]
"FSD-Win64-Shipping.exe"+71AB75: 8B 86 90 01 00 00           -  mov eax,[rsi+00000190]
"FSD-Win64-Shipping.exe"+71AB7B: 48 8D 55 67                 -  lea rdx,[rbp+67]
"FSD-Win64-Shipping.exe"+71AB7F: 89 45 67                    -  mov [rbp+67],eax
"FSD-Win64-Shipping.exe"+71AB82: C6 86 96 01 00 00 01        -  mov byte ptr [rsi+00000196],01
"FSD-Win64-Shipping.exe"+71AB89: E8 32 EA BB FF              -  call FSD-Win64-Shipping.exe+2D95C0
"FSD-Win64-Shipping.exe"+71AB8E: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+71AB91: E8 EA 15 55 00              -  call FSD-Win64-Shipping.exe+C6C180
"FSD-Win64-Shipping.exe"+71AB96: 84 C0                       -  test al,al
"FSD-Win64-Shipping.exe"+71AB98: 0F 84 FE 0B 00 00           -  je FSD-Win64-Shipping.exe+71B79C
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>673</ID>
              <Description>"Scout"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1258</ID>
                  <Description>"Instant Grapple Cooldown"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-10-04
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(GrappleCooldown,FSD-Win64-Shipping.exe,89 81 20 01 00 00 88) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7558C6)

label(code)
label(return)

newmem:
// Do not use update function, only the click to release grapple
code:
  mov [rcx+00000120],(float)0.0
  jmp return

GrappleCooldown:
  jmp newmem
  nop
return:
registersymbol(GrappleCooldown)

[DISABLE]

GrappleCooldown:
  db 89 81 20 01 00 00

unregistersymbol(GrappleCooldown)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7558C6

"FSD-Win64-Shipping.exe"+7558AC: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558AD: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558AE: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558AF: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558B0: 48 8B 89 48 03 00 00     -  mov rcx,[rcx+00000348]
"FSD-Win64-Shipping.exe"+7558B7: B2 01                    -  mov dl,01
"FSD-Win64-Shipping.exe"+7558B9: E9 22 25 EB FF           -  jmp FSD-Win64-Shipping.exe+607DE0
"FSD-Win64-Shipping.exe"+7558BE: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558BF: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558C0: 8B 81 10 01 00 00        -  mov eax,[rcx+00000110]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7558C6: 89 81 20 01 00 00        -  mov [rcx+00000120],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7558CC: 88 91 24 01 00 00        -  mov [rcx+00000124],dl
"FSD-Win64-Shipping.exe"+7558D2: C3                       -  ret 
"FSD-Win64-Shipping.exe"+7558D3: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558D4: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558D5: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558D6: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558D7: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558D8: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558D9: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+7558DA: CC                       -  int 3 
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1987</ID>
                  <Description>"Instant M1000 Classic ADS Bonus Damage"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ScoutSniperInstantBonusDamage,FSD-Win64-Shipping.exe,F3 0F 11 87 1C 08 00 00 84) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BEBDC)

label(code)
label(return)

newmem:
// Unzoomed = 0.0, Zoomed = 1.0
code:
  mov [rdi+0000081C],(float)1.0
  jmp return

ScoutSniperInstantBonusDamage:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(ScoutSniperInstantBonusDamage)

[DISABLE]

ScoutSniperInstantBonusDamage:
  db F3 0F 11 87 1C 08 00 00

unregistersymbol(ScoutSniperInstantBonusDamage)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BEBDC

"FSD-Win64-Shipping.exe"+7BEB9F: F3 0F 10 89 F8 00 00 00  -  movss xmm1,[rcx+000000F8]
"FSD-Win64-Shipping.exe"+7BEBA7: F3 0F 10 97 BC 07 00 00  -  movss xmm2,[rdi+000007BC]
"FSD-Win64-Shipping.exe"+7BEBAF: E8 8C 89 DE FF           -  call FSD-Win64-Shipping.exe+5A7540
"FSD-Win64-Shipping.exe"+7BEBB4: 0F B6 87 F1 07 00 00     -  movzx eax,byte ptr [rdi+000007F1]
"FSD-Win64-Shipping.exe"+7BEBBB: 38 9F 19 08 00 00        -  cmp [rdi+00000819],bl
"FSD-Win64-Shipping.exe"+7BEBC1: 74 76                    -  je FSD-Win64-Shipping.exe+7BEC39
"FSD-Win64-Shipping.exe"+7BEBC3: 41 0F 28 C2              -  movaps xmm0,xmm10
"FSD-Win64-Shipping.exe"+7BEBC7: F3 0F 59 87 84 07 00 00  -  mulss xmm0,[rdi+00000784]
"FSD-Win64-Shipping.exe"+7BEBCF: F3 0F 58 87 1C 08 00 00  -  addss xmm0,[rdi+0000081C]
"FSD-Win64-Shipping.exe"+7BEBD7: F3 41 0F 5D C1           -  minss xmm0,xmm9
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BEBDC: F3 0F 11 87 1C 08 00 00  -  movss [rdi+0000081C],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BEBE4: 84 C0                    -  test al,al
"FSD-Win64-Shipping.exe"+7BEBE6: 75 5B                    -  jne FSD-Win64-Shipping.exe+7BEC43
"FSD-Win64-Shipping.exe"+7BEBE8: 41 0F 2F C1              -  comiss xmm0,xmm9
"FSD-Win64-Shipping.exe"+7BEBEC: 72 55                    -  jb FSD-Win64-Shipping.exe+7BEC43
"FSD-Win64-Shipping.exe"+7BEBEE: 48 8D 8F 30 07 00 00     -  lea rcx,[rdi+00000730]
"FSD-Win64-Shipping.exe"+7BEBF5: C6 87 F1 07 00 00 01     -  mov byte ptr [rdi+000007F1],01
"FSD-Win64-Shipping.exe"+7BEBFC: 33 D2                    -  xor edx,edx
"FSD-Win64-Shipping.exe"+7BEBFE: E8 1D 17 B2 FF           -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+7BEC03: 48 8B 07                 -  mov rax,[rdi]
"FSD-Win64-Shipping.exe"+7BEC06: 48 8B CF                 -  mov rcx,rdi
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>487</ID>
                  <Description>"Instant Grapples (Needs Grapple Speed Upgrade) (Enable Before Mission Start)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-01
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(0grapple,FSD-Win64-Shipping.exe,F3 0F 11 83 B4 04 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6DC96A)

label(code)
label(return)

label(instagrapple)

newmem:

code: //original : movss [rbx+000004B4],xmm0
mulss xmm0,[instagrapple]
  movss [rbx+000004B4],xmm0
  jmp return

instagrapple:
dd (float)0.0

0grapple:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(0grapple)

[DISABLE]

0grapple:
  db F3 0F 11 83 B4 04 00 00

unregistersymbol(0grapple)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6DC96A

"FSD-Win64-Shipping.exe"+6DC943: 75 73                    -  jne FSD-Win64-Shipping.exe+6DC9B8
"FSD-Win64-Shipping.exe"+6DC945: 0F B6 8F 48 01 00 00     -  movzx ecx,byte ptr [rdi+00000148]
"FSD-Win64-Shipping.exe"+6DC94C: 85 C9                    -  test ecx,ecx
"FSD-Win64-Shipping.exe"+6DC94E: 74 50                    -  je FSD-Win64-Shipping.exe+6DC9A0
"FSD-Win64-Shipping.exe"+6DC950: 83 E9 01                 -  sub ecx,01
"FSD-Win64-Shipping.exe"+6DC953: 74 28                    -  je FSD-Win64-Shipping.exe+6DC97D
"FSD-Win64-Shipping.exe"+6DC955: 83 F9 01                 -  cmp ecx,01
"FSD-Win64-Shipping.exe"+6DC958: 75 5E                    -  jne FSD-Win64-Shipping.exe+6DC9B8
"FSD-Win64-Shipping.exe"+6DC95A: F3 0F 10 87 4C 01 00 00  -  movss xmm0,[rdi+0000014C]
"FSD-Win64-Shipping.exe"+6DC962: F3 0F 58 83 B4 04 00 00  -  addss xmm0,[rbx+000004B4]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6DC96A: F3 0F 11 83 B4 04 00 00  -  movss [rbx+000004B4],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6DC972: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DC977: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DC97B: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6DC97C: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DC97D: F3 0F 10 87 4C 01 00 00  -  movss xmm0,[rdi+0000014C]
"FSD-Win64-Shipping.exe"+6DC985: F3 0F 58 83 B0 04 00 00  -  addss xmm0,[rbx+000004B0]
"FSD-Win64-Shipping.exe"+6DC98D: F3 0F 11 83 B0 04 00 00  -  movss [rbx+000004B0],xmm0
"FSD-Win64-Shipping.exe"+6DC995: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DC99A: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DC99E: 5F                       -  pop rdi
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>488</ID>
                  <Description>"Unlimited Grapple Range (Needs Grapple Range Upgrade) (Enable Before Mission Start)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-01
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(grapplerange,FSD-Win64-Shipping.exe,F3 0F 11 83 7C 04 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6DC9B0)

label(code)
label(return)

label(infrange)

newmem:

code: //original : movss [rbx+0000047C],xmm0
mulss xmm0,[infrange]
  movss [rbx+0000047C],xmm0
  jmp return

infrange:
dd (float)123.0

grapplerange:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(grapplerange)

[DISABLE]

grapplerange:
  db F3 0F 11 83 7C 04 00 00

unregistersymbol(grapplerange)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6DC9B0

"FSD-Win64-Shipping.exe"+6DC97C: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DC97D: F3 0F 10 87 4C 01 00 00  -  movss xmm0,[rdi+0000014C]
"FSD-Win64-Shipping.exe"+6DC985: F3 0F 58 83 B0 04 00 00  -  addss xmm0,[rbx+000004B0]
"FSD-Win64-Shipping.exe"+6DC98D: F3 0F 11 83 B0 04 00 00  -  movss [rbx+000004B0],xmm0
"FSD-Win64-Shipping.exe"+6DC995: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DC99A: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DC99E: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6DC99F: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DC9A0: F3 0F 10 87 4C 01 00 00  -  movss xmm0,[rdi+0000014C]
"FSD-Win64-Shipping.exe"+6DC9A8: F3 0F 58 83 7C 04 00 00  -  addss xmm0,[rbx+0000047C]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6DC9B0: F3 0F 11 83 7C 04 00 00  -  movss [rbx+0000047C],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6DC9B8: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DC9BD: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DC9C1: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6DC9C2: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DC9C3: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6DC9C4: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6DC9C5: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6DC9C6: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6DC9C7: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6DC9C8: CC                       -  int 3 
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>661</ID>
              <Description>"Driller"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1830</ID>
                  <Description>"Drill"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2051</ID>
                      <Description>"Unlimited Drill Fuel VS Terrain"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedDrillVSTerrain,FSD-Win64-Shipping.exe,F3 0F 11 87 58 05 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BB8DE)

label(code)
label(return)

newmem:

code:
  add [rdi+00000558],(float)0.0
  jmp return

UnlimitedDrillVSTerrain:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(UnlimitedDrillVSTerrain)

[DISABLE]

UnlimitedDrillVSTerrain:
  db F3 0F 11 87 58 05 00 00

unregistersymbol(UnlimitedDrillVSTerrain)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BB8DE

"FSD-Win64-Shipping.exe"+7BB8A2: 41 0F 14 C4                 -  unpcklps xmm0,xmm12
"FSD-Win64-Shipping.exe"+7BB8A6: F2 0F 11 44 24 50           -  movsd [rsp+50],xmm0
"FSD-Win64-Shipping.exe"+7BB8AC: F3 44 0F 11 6D 98           -  movss [rbp-68],xmm13
"FSD-Win64-Shipping.exe"+7BB8B2: 8B 45 98                    -  mov eax,[rbp-68]
"FSD-Win64-Shipping.exe"+7BB8B5: 89 44 24 58                 -  mov [rsp+58],eax
"FSD-Win64-Shipping.exe"+7BB8B9: E8 82 9D 11 00              -  call FSD-Win64-Shipping.exe+8D5640
"FSD-Win64-Shipping.exe"+7BB8BE: F3 0F 10 87 58 05 00 00     -  movss xmm0,[rdi+00000558]
"FSD-Win64-Shipping.exe"+7BB8C6: F3 0F 5E BF 08 05 00 00     -  divss xmm7,[rdi+00000508]
"FSD-Win64-Shipping.exe"+7BB8CE: F3 0F 5C 87 5C 05 00 00     -  subss xmm0,[rdi+0000055C]
"FSD-Win64-Shipping.exe"+7BB8D6: F3 0F 11 BF 24 05 00 00     -  movss [rdi+00000524],xmm7
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BB8DE: F3 0F 11 87 58 05 00 00     -  movss [rdi+00000558],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BB8E6: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7BB8E9: E8 C2 0F FE FF              -  call FSD-Win64-Shipping.exe+79C8B0
"FSD-Win64-Shipping.exe"+7BB8EE: 44 0F 28 B4 24 C0 00 00 00  -  movaps xmm14,[rsp+000000C0]
"FSD-Win64-Shipping.exe"+7BB8F7: 44 0F 28 AC 24 D0 00 00 00  -  movaps xmm13,[rsp+000000D0]
"FSD-Win64-Shipping.exe"+7BB900: 44 0F 28 A4 24 E0 00 00 00  -  movaps xmm12,[rsp+000000E0]
"FSD-Win64-Shipping.exe"+7BB909: 44 0F 28 94 24 00 01 00 00  -  movaps xmm10,[rsp+00000100]
"FSD-Win64-Shipping.exe"+7BB912: F3 0F 10 BF 28 05 00 00     -  movss xmm7,[rdi+00000528]
"FSD-Win64-Shipping.exe"+7BB91A: EB 5E                       -  jmp FSD-Win64-Shipping.exe+7BB97A
"FSD-Win64-Shipping.exe"+7BB91C: F3 44 0F 59 0D 33 BF EF 01  -  mulss xmm9,[FSD-Win64-Shipping.exe+26B7858]
"FSD-Win64-Shipping.exe"+7BB925: F3 41 0F 5C F9              -  subss xmm7,xmm9
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2052</ID>
                      <Description>"Unlimited Drill Fuel VS Organic"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedDrillVSOrganic,FSD-Win64-Shipping.exe,F3 0F 11 87 58 05 00 00 0F) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BB735)

label(code)
label(return)

newmem:

code:
  add [rdi+00000558],(float)0.0
  jmp return

UnlimitedDrillVSOrganic:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(UnlimitedDrillVSOrganic)

[DISABLE]

UnlimitedDrillVSOrganic:
  db F3 0F 11 87 58 05 00 00

unregistersymbol(UnlimitedDrillVSOrganic)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BB735

"FSD-Win64-Shipping.exe"+7BB6FF: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7BB702: E8 79 9C 11 00              -  call FSD-Win64-Shipping.exe+8D5380
"FSD-Win64-Shipping.exe"+7BB707: 49 8B D6                    -  mov rdx,r14
"FSD-Win64-Shipping.exe"+7BB70A: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7BB70D: E8 8E 9F 11 00              -  call FSD-Win64-Shipping.exe+8D56A0
"FSD-Win64-Shipping.exe"+7BB712: F3 0F 10 87 58 05 00 00     -  movss xmm0,[rdi+00000558]
"FSD-Win64-Shipping.exe"+7BB71A: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7BB71D: F3 0F 5C 87 60 05 00 00     -  subss xmm0,[rdi+00000560]
"FSD-Win64-Shipping.exe"+7BB725: F3 0F 10 0D 6F 83 EB 01     -  movss xmm1,[FSD-Win64-Shipping.exe+2673A9C]
"FSD-Win64-Shipping.exe"+7BB72D: F3 0F 5E 8F 08 05 00 00     -  divss xmm1,[rdi+00000508]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BB735: F3 0F 11 87 58 05 00 00     -  movss [rdi+00000558],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BB73D: 0F 28 C7                    -  movaps xmm0,xmm7
"FSD-Win64-Shipping.exe"+7BB740: F3 0F 5E 87 38 05 00 00     -  divss xmm0,[rdi+00000538]
"FSD-Win64-Shipping.exe"+7BB748: F3 0F 11 8F 24 05 00 00     -  movss [rdi+00000524],xmm1
"FSD-Win64-Shipping.exe"+7BB750: F3 0F 10 8F 94 05 00 00     -  movss xmm1,[rdi+00000594]
"FSD-Win64-Shipping.exe"+7BB758: F3 0F 11 87 90 05 00 00     -  movss [rdi+00000590],xmm0
"FSD-Win64-Shipping.exe"+7BB760: E8 0B 6E FF FF              -  call FSD-Win64-Shipping.exe+7B2570
"FSD-Win64-Shipping.exe"+7BB765: 4C 8B B4 24 58 01 00 00     -  mov r14,[rsp+00000158]
"FSD-Win64-Shipping.exe"+7BB76D: F3 0F 10 8F 28 05 00 00     -  movss xmm1,[rdi+00000528]
"FSD-Win64-Shipping.exe"+7BB775: 48 8D 95 90 00 00 00        -  lea rdx,[rbp+00000090]
"FSD-Win64-Shipping.exe"+7BB77C: F3 0F 2C 87 58 05 00 00     -  cvttss2si eax,[rdi+00000558]
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2054</ID>
                      <Description>"No Drill Heat (Can't be used with Minigun Heat Scripts)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-04-27
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(DrillerHeat,FSD-Win64-Shipping.exe,0F 28 CE F3 0F 11 B3 AC 03 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+79DE7E)

label(code)
label(return)

newmem:
// Not 0.0 -&gt; 1.0 / Goes from 0.0 to about 5.2-ish
code:
  movaps xmm1,xmm6
  mov [rbx+000003AC],(float)0.0
  jmp return

DrillerHeat:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(DrillerHeat)

[DISABLE]

DrillerHeat:
  db 0F 28 CE F3 0F 11 B3 AC 03 00 00

unregistersymbol(DrillerHeat)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+79DE7E

"FSD-Win64-Shipping.exe"+79DE4A: 76 03                    -  jna FSD-Win64-Shipping.exe+79DE4F
"FSD-Win64-Shipping.exe"+79DE4C: 0F 28 F0                 -  movaps xmm6,xmm0
"FSD-Win64-Shipping.exe"+79DE4F: 48 8B 03                 -  mov rax,[rbx]
"FSD-Win64-Shipping.exe"+79DE52: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+79DE55: FF 90 40 01 00 00        -  call qword ptr [rax+00000140]
"FSD-Win64-Shipping.exe"+79DE5B: F3 0F 59 B3 C8 03 00 00  -  mulss xmm6,[rbx+000003C8]
"FSD-Win64-Shipping.exe"+79DE63: 8B 88 28 05 00 00        -  mov ecx,[rax+00000528]
"FSD-Win64-Shipping.exe"+79DE69: F3 0F 58 B3 AC 03 00 00  -  addss xmm6,[rbx+000003AC]
"FSD-Win64-Shipping.exe"+79DE71: 89 8B B0 03 00 00        -  mov [rbx+000003B0],ecx
"FSD-Win64-Shipping.exe"+79DE77: 48 8B 8B B8 03 00 00     -  mov rcx,[rbx+000003B8]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+79DE7E: 0F 28 CE                 -  movaps xmm1,xmm6
"FSD-Win64-Shipping.exe"+79DE81: F3 0F 11 B3 AC 03 00 00  -  movss [rbx+000003AC],xmm6
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+79DE89: E8 92 33 1B 01           -  call FSD-Win64-Shipping.exe+1951220
"FSD-Win64-Shipping.exe"+79DE8E: F3 0F 10 15 6A 2C ED 01  -  movss xmm2,[FSD-Win64-Shipping.exe+2670B00]
"FSD-Win64-Shipping.exe"+79DE96: 0F 57 C9                 -  xorps xmm1,xmm1
"FSD-Win64-Shipping.exe"+79DE99: 0F 2F C1                 -  comiss xmm0,xmm1
"FSD-Win64-Shipping.exe"+79DE9C: 72 07                    -  jb FSD-Win64-Shipping.exe+79DEA5
"FSD-Win64-Shipping.exe"+79DE9E: F3 0F 5D C2              -  minss xmm0,xmm2
"FSD-Win64-Shipping.exe"+79DEA2: 0F 28 C8                 -  movaps xmm1,xmm0
"FSD-Win64-Shipping.exe"+79DEA5: 0F 2E CA                 -  ucomiss xmm1,xmm2
"FSD-Win64-Shipping.exe"+79DEA8: F3 0F 11 8B CC 03 00 00  -  movss [rbx+000003CC],xmm1
"FSD-Win64-Shipping.exe"+79DEB0: 75 76                    -  jne FSD-Win64-Shipping.exe+79DF28
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1832</ID>
                  <Description>"Cryo Cannon"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2056</ID>
                      <Description>"No Cryo Cannon Heat"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NoCryoCannonHeat,FSD-Win64-Shipping.exe,F3 0F 11 89 0C 08 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7B8D60)

label(code)
label(return)

newmem:

code:
  add [rcx+0000080C],(float)0.0
  jmp return

NoCryoCannonHeat:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(NoCryoCannonHeat)

[DISABLE]

NoCryoCannonHeat:
  db F3 0F 11 89 0C 08 00 00

unregistersymbol(NoCryoCannonHeat)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7B8D60

"FSD-Win64-Shipping.exe"+7B8D3E: 0F 28 D1                 -  movaps xmm2,xmm1
"FSD-Win64-Shipping.exe"+7B8D41: 0F 57 C0                 -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+7B8D44: 48 8B D9                 -  mov rbx,rcx
"FSD-Win64-Shipping.exe"+7B8D47: 0F 2F D0                 -  comiss xmm2,xmm0
"FSD-Win64-Shipping.exe"+7B8D4A: 73 05                    -  jae FSD-Win64-Shipping.exe+7B8D51
"FSD-Win64-Shipping.exe"+7B8D4C: 0F 57 C9                 -  xorps xmm1,xmm1
"FSD-Win64-Shipping.exe"+7B8D4F: EB 0C                    -  jmp FSD-Win64-Shipping.exe+7B8D5D
"FSD-Win64-Shipping.exe"+7B8D51: F3 0F 10 89 00 08 00 00  -  movss xmm1,[rcx+00000800]
"FSD-Win64-Shipping.exe"+7B8D59: F3 0F 5D CA              -  minss xmm1,xmm2
"FSD-Win64-Shipping.exe"+7B8D5D: 0F 2E CB                 -  ucomiss xmm1,xmm3
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7B8D60: F3 0F 11 89 0C 08 00 00  -  movss [rcx+0000080C],xmm1
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7B8D68: 74 55                    -  je FSD-Win64-Shipping.exe+7B8DBF
"FSD-Win64-Shipping.exe"+7B8D6A: 0F 2E C8                 -  ucomiss xmm1,xmm0
"FSD-Win64-Shipping.exe"+7B8D6D: 75 1F                    -  jne FSD-Win64-Shipping.exe+7B8D8E
"FSD-Win64-Shipping.exe"+7B8D6F: 80 B9 E8 07 00 00 01     -  cmp byte ptr [rcx+000007E8],01
"FSD-Win64-Shipping.exe"+7B8D76: 74 16                    -  je FSD-Win64-Shipping.exe+7B8D8E
"FSD-Win64-Shipping.exe"+7B8D78: B2 01                    -  mov dl,01
"FSD-Win64-Shipping.exe"+7B8D7A: C6 81 E8 07 00 00 01     -  mov byte ptr [rcx+000007E8],01
"FSD-Win64-Shipping.exe"+7B8D81: E8 1A 7E 14 00           -  call FSD-Win64-Shipping.exe+900BA0
"FSD-Win64-Shipping.exe"+7B8D86: F3 0F 10 8B 0C 08 00 00  -  movss xmm1,[rbx+0000080C]
"FSD-Win64-Shipping.exe"+7B8D8E: 44 0F B6 83 E8 07 00 00  -  movzx r8d,byte ptr [rbx+000007E8]
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2064</ID>
                      <Description>"No Cryo Cannon Spinup Time"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InstantCryoCannonSpinupTime,FSD-Win64-Shipping.exe,F3 0F 11 87 E4 07 00 00 E8) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BF4F7)

label(code)
label(return)

newmem:
// 0.0 = Stopped, 1.0 = Full Blast
code:
  mov [rdi+000007E4],(float)1.0
  jmp return

InstantCryoCannonSpinupTime:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(InstantCryoCannonSpinupTime)

[DISABLE]

InstantCryoCannonSpinupTime:
  db F3 0F 11 87 E4 07 00 00

unregistersymbol(InstantCryoCannonSpinupTime)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BF4F7

"FSD-Win64-Shipping.exe"+7BF4C2: E8 39 80 E0 FF           -  call FSD-Win64-Shipping.exe+5C7500
"FSD-Win64-Shipping.exe"+7BF4C7: 48 89 87 80 07 00 00     -  mov [rdi+00000780],rax
"FSD-Win64-Shipping.exe"+7BF4CE: B2 01                    -  mov dl,01
"FSD-Win64-Shipping.exe"+7BF4D0: 48 8B CF                 -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7BF4D3: E8 58 A0 FF FF           -  call FSD-Win64-Shipping.exe+7B9530
"FSD-Win64-Shipping.exe"+7BF4D8: 48 8B 8F 90 03 00 00     -  mov rcx,[rdi+00000390]
"FSD-Win64-Shipping.exe"+7BF4DF: 0F 28 C7                 -  movaps xmm0,xmm7
"FSD-Win64-Shipping.exe"+7BF4E2: F3 0F 5E 87 D8 07 00 00  -  divss xmm0,[rdi+000007D8]
"FSD-Win64-Shipping.exe"+7BF4EA: F3 0F 58 87 E4 07 00 00  -  addss xmm0,[rdi+000007E4]
"FSD-Win64-Shipping.exe"+7BF4F2: F3 41 0F 5D C0           -  minss xmm0,xmm8
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BF4F7: F3 0F 11 87 E4 07 00 00  -  movss [rdi+000007E4],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BF4FF: E8 3C 42 E0 FF           -  call FSD-Win64-Shipping.exe+5C3740
"FSD-Win64-Shipping.exe"+7BF504: 44 0F 2E 87 E4 07 00 00  -  ucomiss xmm8,[rdi+000007E4]
"FSD-Win64-Shipping.exe"+7BF50C: 0F 85 E3 01 00 00        -  jne FSD-Win64-Shipping.exe+7BF6F5
"FSD-Win64-Shipping.exe"+7BF512: 44 38 B7 E0 07 00 00     -  cmp [rdi+000007E0],r14l
"FSD-Win64-Shipping.exe"+7BF519: 0F 85 D6 01 00 00        -  jne FSD-Win64-Shipping.exe+7BF6F5
"FSD-Win64-Shipping.exe"+7BF51F: C6 87 E0 07 00 00 01     -  mov byte ptr [rdi+000007E0],01
"FSD-Win64-Shipping.exe"+7BF526: 44 38 B7 38 08 00 00     -  cmp [rdi+00000838],r14l
"FSD-Win64-Shipping.exe"+7BF52D: 0F 84 A6 01 00 00        -  je FSD-Win64-Shipping.exe+7BF6D9
"FSD-Win64-Shipping.exe"+7BF533: 48 8D 05 F6 17 14 00     -  lea rax,[FSD-Win64-Shipping.exe+900D30]
"FSD-Win64-Shipping.exe"+7BF53A: 44 89 75 C8              -  mov [rbp-38],r14d
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24230</ID>
                      <Description>"No Snowball Cooldown"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-23
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NoSnowballReduction,FSD-Win64-Shipping.exe,F3 0F 11 87 14 08 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BF9E0)

label(code)
label(return)

newmem:

code:
  mov [rdi+00000814],(float)0.0
  jmp return

NoSnowballReduction:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(NoSnowballReduction)

[DISABLE]

NoSnowballReduction:
  db F3 0F 11 87 14 08 00 00

unregistersymbol(NoSnowballReduction)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BF9E0

"FSD-Win64-Shipping.exe"+7BF9AD: 89 44 24 58              -  mov [rsp+58],eax
"FSD-Win64-Shipping.exe"+7BF9B1: 44 88 74 24 20           -  mov [rsp+20],r14l
"FSD-Win64-Shipping.exe"+7BF9B6: E8 B5 A8 15 01           -  call FSD-Win64-Shipping.exe+191A270
"FSD-Win64-Shipping.exe"+7BF9BB: 44 38 B7 E8 07 00 00     -  cmp [rdi+000007E8],r14l
"FSD-Win64-Shipping.exe"+7BF9C2: 0F 84 96 00 00 00        -  je FSD-Win64-Shipping.exe+7BFA5E
"FSD-Win64-Shipping.exe"+7BF9C8: 4C 39 B7 70 07 00 00     -  cmp [rdi+00000770],r14
"FSD-Win64-Shipping.exe"+7BF9CF: 75 67                    -  jne FSD-Win64-Shipping.exe+7BFA38
"FSD-Win64-Shipping.exe"+7BF9D1: F3 0F 10 87 14 08 00 00  -  movss xmm0,[rdi+00000814]
"FSD-Win64-Shipping.exe"+7BF9D9: F3 0F 5C C7              -  subss xmm0,xmm7
"FSD-Win64-Shipping.exe"+7BF9DD: 0F 2F C6                 -  comiss xmm0,xmm6
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BF9E0: F3 0F 11 87 14 08 00 00  -  movss [rdi+00000814],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BF9E8: 77 4E                    -  ja FSD-Win64-Shipping.exe+7BFA38
"FSD-Win64-Shipping.exe"+7BF9EA: 0F 28 CF                 -  movaps xmm1,xmm7
"FSD-Win64-Shipping.exe"+7BF9ED: 48 8B CF                 -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7BF9F0: F3 0F 59 8F 08 08 00 00  -  mulss xmm1,[rdi+00000808]
"FSD-Win64-Shipping.exe"+7BF9F8: F3 0F 58 8F 0C 08 00 00  -  addss xmm1,[rdi+0000080C]
"FSD-Win64-Shipping.exe"+7BFA00: E8 2B 93 FF FF           -  call FSD-Win64-Shipping.exe+7B8D30
"FSD-Win64-Shipping.exe"+7BFA05: F3 0F 10 87 00 08 00 00  -  movss xmm0,[rdi+00000800]
"FSD-Win64-Shipping.exe"+7BFA0D: F3 0F 59 87 EC 07 00 00  -  mulss xmm0,[rdi+000007EC]
"FSD-Win64-Shipping.exe"+7BFA15: 0F 2F 87 0C 08 00 00     -  comiss xmm0,[rdi+0000080C]
"FSD-Win64-Shipping.exe"+7BFA1C: 77 1A                    -  ja FSD-Win64-Shipping.exe+7BFA38
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24228</ID>
                      <Description>"Unlimited Cryo Cannon (Snowball Attack "R")"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-21
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(CryoSpecialAtk,FSD-Win64-Shipping.exe,89 87 B0 06 00 00 89) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7AEC3D)

label(code)
label(return)

newmem:

code:
  //mov [rdi+000006B0],eax
  add [rsi+000006B0],(int)0
  jmp return

CryoSpecialAtk:
  jmp newmem
  nop
return:
registersymbol(CryoSpecialAtk)

[DISABLE]

CryoSpecialAtk:
  db 89 87 B0 06 00 00

unregistersymbol(CryoSpecialAtk)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7AEC3D

"FSD-Win64-Shipping.exe"+7AEC11: F3 0F 10 05 E3 08 F4 01  -  movss xmm0,[FSD-Win64-Shipping.exe+26EF4FC]
"FSD-Win64-Shipping.exe"+7AEC19: 66 0F 6E 8F 68 07 00 00  -  movd xmm1,[rdi+00000768]
"FSD-Win64-Shipping.exe"+7AEC21: 0F 5B C9                 -  cvtdq2ps xmm1,xmm1
"FSD-Win64-Shipping.exe"+7AEC24: F3 0F 58 C9              -  addss xmm1,xmm1
"FSD-Win64-Shipping.exe"+7AEC28: F3 0F 5C C1              -  subss xmm0,xmm1
"FSD-Win64-Shipping.exe"+7AEC2C: F3 0F 2D C0              -  cvtss2si eax,xmm0
"FSD-Win64-Shipping.exe"+7AEC30: D1 F8                    -  sar eax,1
"FSD-Win64-Shipping.exe"+7AEC32: 03 87 B0 06 00 00        -  add eax,[rdi+000006B0]
"FSD-Win64-Shipping.exe"+7AEC38: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+7AEC3A: 0F 4E C5                 -  cmovle eax,ebp
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7AEC3D: 89 87 B0 06 00 00        -  mov [rdi+000006B0],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7AEC43: 89 44 24 2C              -  mov [rsp+2C],eax
"FSD-Win64-Shipping.exe"+7AEC47: 48 8B 8F C0 04 00 00     -  mov rcx,[rdi+000004C0]
"FSD-Win64-Shipping.exe"+7AEC4E: 48 8D 54 24 2C           -  lea rdx,[rsp+2C]
"FSD-Win64-Shipping.exe"+7AEC53: 48 81 C1 10 01 00 00     -  add rcx,00000110
"FSD-Win64-Shipping.exe"+7AEC5A: E8 C1 16 B3 FF           -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+7AEC5F: 8B 87 10 08 00 00        -  mov eax,[rdi+00000810]
"FSD-Win64-Shipping.exe"+7AEC65: 89 87 14 08 00 00        -  mov [rdi+00000814],eax
"FSD-Win64-Shipping.exe"+7AEC6B: 48 8B 8C 24 80 00 00 00  -  mov rcx,[rsp+00000080]
"FSD-Win64-Shipping.exe"+7AEC73: 48 33 CC                 -  xor rcx,rsp
"FSD-Win64-Shipping.exe"+7AEC76: E8 55 6F E2 01           -  call FSD-Win64-Shipping.exe+25D5BD0
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1831</ID>
                  <Description>"Plasma Charger"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2071</ID>
                      <Description>"No Plasma Charger Heat"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NoPlasmaChargerHeat,FSD-Win64-Shipping.exe,F3 0F 11 83 A0 07 00 00 0F) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BF25A)

label(code)
label(return)

newmem:
// Starts at 0.000 - Ends At 1.000
code:
  mov [rbx+000007A0],(float)0.0
  jmp return

NoPlasmaChargerHeat:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(NoPlasmaChargerHeat)

[DISABLE]

NoPlasmaChargerHeat:
  db F3 0F 11 83 A0 07 00 00

unregistersymbol(NoPlasmaChargerHeat)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BF25A

"FSD-Win64-Shipping.exe"+7BF228: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7BF22B: E8 20 7F 13 00                 -  call FSD-Win64-Shipping.exe+8F7150
"FSD-Win64-Shipping.exe"+7BF230: 0F 2F BB 98 07 00 00           -  comiss xmm7,[rbx+00000798]
"FSD-Win64-Shipping.exe"+7BF237: 77 0A                          -  ja FSD-Win64-Shipping.exe+7BF243
"FSD-Win64-Shipping.exe"+7BF239: F3 0F 10 83 B0 07 00 00        -  movss xmm0,[rbx+000007B0]
"FSD-Win64-Shipping.exe"+7BF241: EB 08                          -  jmp FSD-Win64-Shipping.exe+7BF24B
"FSD-Win64-Shipping.exe"+7BF243: F3 0F 10 83 AC 07 00 00        -  movss xmm0,[rbx+000007AC]
"FSD-Win64-Shipping.exe"+7BF24B: F3 0F 59 C6                    -  mulss xmm0,xmm6
"FSD-Win64-Shipping.exe"+7BF24F: F3 0F 58 83 A0 07 00 00        -  addss xmm0,[rbx+000007A0]
"FSD-Win64-Shipping.exe"+7BF257: 0F 2F C7                       -  comiss xmm0,xmm7
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BF25A: F3 0F 11 83 A0 07 00 00        -  movss [rbx+000007A0],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BF262: 0F 82 A0 00 00 00              -  jb FSD-Win64-Shipping.exe+7BF308
"FSD-Win64-Shipping.exe"+7BF268: 48 8B 03                       -  mov rax,[rbx]
"FSD-Win64-Shipping.exe"+7BF26B: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7BF26E: FF 90 F8 06 00 00              -  call qword ptr [rax+000006F8]
"FSD-Win64-Shipping.exe"+7BF274: B2 01                          -  mov dl,01
"FSD-Win64-Shipping.exe"+7BF276: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7BF279: E8 42 AF FF FF                 -  call FSD-Win64-Shipping.exe+7BA1C0
"FSD-Win64-Shipping.exe"+7BF27E: C7 83 A0 07 00 00 00 00 80 3F  -  mov [rbx+000007A0],3F800000
"FSD-Win64-Shipping.exe"+7BF288: EB 7E                          -  jmp FSD-Win64-Shipping.exe+7BF308
"FSD-Win64-Shipping.exe"+7BF28A: 48 85 C9                       -  test rcx,rcx
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2074</ID>
                      <Description>"No Plasma Charger Heat After Firing"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NoPlasmaChargerHeatAfterFiring,FSD-Win64-Shipping.exe,C7 83 A0 07 00 00 00 00 80 3F 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7B2C10)

label(code)
label(return)

newmem:
// Look at original code below. The after firing value is hardcoded.
code:
  mov [rbx+000007A0],(float)0.0
  jmp return

NoPlasmaChargerHeatAfterFiring:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(NoPlasmaChargerHeatAfterFiring)

[DISABLE]

NoPlasmaChargerHeatAfterFiring:
  db C7 83 A0 07 00 00 00 00 80 3F

unregistersymbol(NoPlasmaChargerHeatAfterFiring)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7B2C10

"FSD-Win64-Shipping.exe"+7B2BE5: 77 0A                          -  ja FSD-Win64-Shipping.exe+7B2BF1
"FSD-Win64-Shipping.exe"+7B2BE7: F3 0F 58 83 B8 07 00 00        -  addss xmm0,[rbx+000007B8]
"FSD-Win64-Shipping.exe"+7B2BEF: EB 08                          -  jmp FSD-Win64-Shipping.exe+7B2BF9
"FSD-Win64-Shipping.exe"+7B2BF1: F3 0F 58 83 B4 07 00 00        -  addss xmm0,[rbx+000007B4]
"FSD-Win64-Shipping.exe"+7B2BF9: 0F 2F C1                       -  comiss xmm0,xmm1
"FSD-Win64-Shipping.exe"+7B2BFC: F3 0F 11 83 A0 07 00 00        -  movss [rbx+000007A0],xmm0
"FSD-Win64-Shipping.exe"+7B2C04: 72 14                          -  jb FSD-Win64-Shipping.exe+7B2C1A
"FSD-Win64-Shipping.exe"+7B2C06: B2 01                          -  mov dl,01
"FSD-Win64-Shipping.exe"+7B2C08: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7B2C0B: E8 B0 75 00 00                 -  call FSD-Win64-Shipping.exe+7BA1C0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7B2C10: C7 83 A0 07 00 00 00 00 80 3F  -  mov [rbx+000007A0],3F800000
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7B2C1A: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7B2C1D: 48 83 C4 20                    -  add rsp,20
"FSD-Win64-Shipping.exe"+7B2C21: 5B                             -  pop rbx
"FSD-Win64-Shipping.exe"+7B2C22: E9 69 9C FE FF                 -  jmp FSD-Win64-Shipping.exe+79C890
"FSD-Win64-Shipping.exe"+7B2C27: CC                             -  int 3
"FSD-Win64-Shipping.exe"+7B2C28: CC                             -  int 3
"FSD-Win64-Shipping.exe"+7B2C29: CC                             -  int 3
"FSD-Win64-Shipping.exe"+7B2C2A: CC                             -  int 3
"FSD-Win64-Shipping.exe"+7B2C2B: CC                             -  int 3
"FSD-Win64-Shipping.exe"+7B2C2C: CC                             -  int 3
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2089</ID>
                      <Description>"No Plasma Charger Spinup Time (Easily Noticed By Other Players, Use Wisely)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InstantPlasmaChargerChargeUpTime,FSD-Win64-Shipping.exe,F3 0F 11 83 98 07 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BF20E)

label(code)
label(return)

newmem:

code:
  mov [rbx+00000798],(float)1.0
  jmp return

InstantPlasmaChargerChargeUpTime:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(InstantPlasmaChargerChargeUpTime)

[DISABLE]

InstantPlasmaChargerChargeUpTime:
  db F3 0F 11 83 98 07 00 00

unregistersymbol(InstantPlasmaChargerChargeUpTime)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BF20E

"FSD-Win64-Shipping.exe"+7BF1D3: 48 89 44 24 20                 -  mov [rsp+20],rax
"FSD-Win64-Shipping.exe"+7BF1D8: E8 53 2C 23 01                 -  call FSD-Win64-Shipping.exe+19F1E30
"FSD-Win64-Shipping.exe"+7BF1DD: 48 8B BC 24 D8 00 00 00        -  mov rdi,[rsp+000000D8]
"FSD-Win64-Shipping.exe"+7BF1E5: 48 89 83 70 07 00 00           -  mov [rbx+00000770],rax
"FSD-Win64-Shipping.exe"+7BF1EC: 0F 28 C6                       -  movaps xmm0,xmm6
"FSD-Win64-Shipping.exe"+7BF1EF: 48 8D 8B 30 07 00 00           -  lea rcx,[rbx+00000730]
"FSD-Win64-Shipping.exe"+7BF1F6: F3 0F 59 83 90 07 00 00        -  mulss xmm0,[rbx+00000790]
"FSD-Win64-Shipping.exe"+7BF1FE: 48 8D 55 67                    -  lea rdx,[rbp+67]
"FSD-Win64-Shipping.exe"+7BF202: F3 0F 58 83 98 07 00 00        -  addss xmm0,[rbx+00000798]
"FSD-Win64-Shipping.exe"+7BF20A: F3 0F 5D C7                    -  minss xmm0,xmm7
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BF20E: F3 0F 11 83 98 07 00 00        -  movss [rbx+00000798],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BF216: F3 0F 11 45 67                 -  movss [rbp+67],xmm0
"FSD-Win64-Shipping.exe"+7BF21B: E8 00 11 B2 FF                 -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+7BF220: F3 0F 10 8B 98 07 00 00        -  movss xmm1,[rbx+00000798]
"FSD-Win64-Shipping.exe"+7BF228: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7BF22B: E8 20 7F 13 00                 -  call FSD-Win64-Shipping.exe+8F7150
"FSD-Win64-Shipping.exe"+7BF230: 0F 2F BB 98 07 00 00           -  comiss xmm7,[rbx+00000798]
"FSD-Win64-Shipping.exe"+7BF237: 77 0A                          -  ja FSD-Win64-Shipping.exe+7BF243
"FSD-Win64-Shipping.exe"+7BF239: F3 0F 10 83 B0 07 00 00        -  movss xmm0,[rbx+000007B0]
"FSD-Win64-Shipping.exe"+7BF241: EB 08                          -  jmp FSD-Win64-Shipping.exe+7BF24B
"FSD-Win64-Shipping.exe"+7BF243: F3 0F 10 83 AC 07 00 00        -  movss xmm0,[rbx+000007AC]
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1610</ID>
                  <Description>"Unlimited Satchel Charge (HUD will show loss, but it's lying)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-01-31
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedSatchel,FSD-Win64-Shipping.exe,C4 89 81 9C 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7ABF8B)

label(code)
label(return)

newmem:

code:
  add [rcx+0000019C],(int)0
  jmp return

UnlimitedSatchel+01:
  jmp newmem
  nop
return:
registersymbol(UnlimitedSatchel)

[DISABLE]

UnlimitedSatchel+01:
  db 89 81 9C 01 00 00

unregistersymbol(UnlimitedSatchel)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7ABF8B

"FSD-Win64-Shipping.exe"+7ABF64: 48 8B 81 E8 00 00 00        -  mov rax,[rcx+000000E8]
"FSD-Win64-Shipping.exe"+7ABF6B: 80 B8 18 01 00 00 03        -  cmp byte ptr [rax+00000118],03
"FSD-Win64-Shipping.exe"+7ABF72: 75 2D                       -  jne FSD-Win64-Shipping.exe+7ABFA1
"FSD-Win64-Shipping.exe"+7ABF74: 8B 81 9C 01 00 00           -  mov eax,[rcx+0000019C]
"FSD-Win64-Shipping.exe"+7ABF7A: 85 C0                       -  test eax,eax
"FSD-Win64-Shipping.exe"+7ABF7C: 7E 23                       -  jle FSD-Win64-Shipping.exe+7ABFA1
"FSD-Win64-Shipping.exe"+7ABF7E: FF C8                       -  dec eax
"FSD-Win64-Shipping.exe"+7ABF80: 48 8D 54 24 5C              -  lea rdx,[rsp+5C]
"FSD-Win64-Shipping.exe"+7ABF85: 85 C0                       -  test eax,eax
"FSD-Win64-Shipping.exe"+7ABF87: 41 0F 4E C4                 -  cmovle eax,r12d
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7ABF8B: 89 81 9C 01 00 00           -  mov [rcx+0000019C],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7ABF91: 48 81 C1 10 01 00 00        -  add rcx,00000110
"FSD-Win64-Shipping.exe"+7ABF98: 89 44 24 5C                 -  mov [rsp+5C],eax
"FSD-Win64-Shipping.exe"+7ABF9C: E8 4F 2B B3 FF              -  call FSD-Win64-Shipping.exe+2DEAF0
"FSD-Win64-Shipping.exe"+7ABFA1: 48 8B 83 88 03 00 00        -  mov rax,[rbx+00000388]
"FSD-Win64-Shipping.exe"+7ABFA8: 44 88 A3 28 05 00 00        -  mov [rbx+00000528],r12l
"FSD-Win64-Shipping.exe"+7ABFAF: 66 C7 83 2A 05 00 00 01 01  -  mov word ptr [rbx+0000052A],0101
"FSD-Win64-Shipping.exe"+7ABFB8: 80 B8 18 01 00 00 03        -  cmp byte ptr [rax+00000118],03
"FSD-Win64-Shipping.exe"+7ABFBF: 75 52                       -  jne FSD-Win64-Shipping.exe+7AC013
"FSD-Win64-Shipping.exe"+7ABFC1: 48 8B 8B C0 04 00 00        -  mov rcx,[rbx+000004C0]
"FSD-Win64-Shipping.exe"+7ABFC8: 48 8B 01                    -  mov rax,[rcx]
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>669</ID>
              <Description>"Gunner"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1827</ID>
                  <Description>"Shield Generator"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1813</ID>
                      <Description>"Unlimited Shield Generators (Host Required)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-02-04
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedShieldGenerators,FSD-Win64-Shipping.exe,00 48 8B 81 E8 00 00 00 80 B8 18 01 00 00 03 75 2C 8B 81 9C 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+79C994)

label(code)
label(return)

newmem:

code:
  mov eax,(int)0
  jmp return

UnlimitedShieldGenerators+11:
  jmp newmem
  nop
return:
registersymbol(UnlimitedShieldGenerators)

[DISABLE]

UnlimitedShieldGenerators+11:
  db 8B 81 9C 01 00 00

unregistersymbol(UnlimitedShieldGenerators)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+79C994

"FSD-Win64-Shipping.exe"+79C962: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+79C964: 0F 4E C3                 -  cmovle eax,ebx
"FSD-Win64-Shipping.exe"+79C967: 89 81 9C 01 00 00        -  mov [rcx+0000019C],eax
"FSD-Win64-Shipping.exe"+79C96D: 48 81 C1 10 01 00 00     -  add rcx,00000110
"FSD-Win64-Shipping.exe"+79C974: 89 44 24 40              -  mov [rsp+40],eax
"FSD-Win64-Shipping.exe"+79C978: E8 53 21 B4 FF           -  call FSD-Win64-Shipping.exe+2DEAD0
"FSD-Win64-Shipping.exe"+79C97D: 48 8B 8D D8 04 00 00     -  mov rcx,[rbp+000004D8]
"FSD-Win64-Shipping.exe"+79C984: 48 8B 81 E8 00 00 00     -  mov rax,[rcx+000000E8]
"FSD-Win64-Shipping.exe"+79C98B: 80 B8 18 01 00 00 03     -  cmp byte ptr [rax+00000118],03
"FSD-Win64-Shipping.exe"+79C992: 75 2C                    -  jne FSD-Win64-Shipping.exe+79C9C0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+79C994: 8B 81 9C 01 00 00        -  mov eax,[rcx+0000019C]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+79C99A: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+79C99C: 7E 22                    -  jle FSD-Win64-Shipping.exe+79C9C0
"FSD-Win64-Shipping.exe"+79C99E: FF C8                    -  dec eax
"FSD-Win64-Shipping.exe"+79C9A0: 48 8D 54 24 40           -  lea rdx,[rsp+40]
"FSD-Win64-Shipping.exe"+79C9A5: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+79C9A7: 0F 4E C3                 -  cmovle eax,ebx
"FSD-Win64-Shipping.exe"+79C9AA: 89 81 9C 01 00 00        -  mov [rcx+0000019C],eax
"FSD-Win64-Shipping.exe"+79C9B0: 48 81 C1 10 01 00 00     -  add rcx,00000110
"FSD-Win64-Shipping.exe"+79C9B7: 89 44 24 40              -  mov [rsp+40],eax
"FSD-Win64-Shipping.exe"+79C9BB: E8 10 21 B4 FF           -  call FSD-Win64-Shipping.exe+2DEAD0
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2044</ID>
                      <Description>"Instant Shield Generator Recharge (Host Required)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InstantGunnerShieldRecharge,FSD-Win64-Shipping.exe,F3 0F 11 B3 00 05 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BAA7D)

label(code)
label(return)

newmem:
// Starts at 0.0 Ends at 1.0
code:
  mov [rbx+00000500],(float)1.1
  jmp return

InstantGunnerShieldRecharge:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(InstantGunnerShieldRecharge)

[DISABLE]

InstantGunnerShieldRecharge:
  db F3 0F 11 B3 00 05 00 00

unregistersymbol(InstantGunnerShieldRecharge)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BAA7D

"FSD-Win64-Shipping.exe"+7BAA43: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+7BAA45: 0F 84 DB 00 00 00        -  je FSD-Win64-Shipping.exe+7BAB26
"FSD-Win64-Shipping.exe"+7BAA4B: F3 0F 5E B3 F8 04 00 00  -  divss xmm6,[rbx+000004F8]
"FSD-Win64-Shipping.exe"+7BAA53: 4C 8B 8B 90 03 00 00     -  mov r9,[rbx+00000390]
"FSD-Win64-Shipping.exe"+7BAA5A: 48 8D 8B 10 05 00 00     -  lea rcx,[rbx+00000510]
"FSD-Win64-Shipping.exe"+7BAA61: 4C 8B C3                 -  mov r8,rbx
"FSD-Win64-Shipping.exe"+7BAA64: 0F 29 7C 24 20           -  movaps [rsp+20],xmm7
"FSD-Win64-Shipping.exe"+7BAA69: F3 0F 58 B3 00 05 00 00  -  addss xmm6,[rbx+00000500]
"FSD-Win64-Shipping.exe"+7BAA71: F3 0F 10 3D BF AD EA 01  -  movss xmm7,[FSD-Win64-Shipping.exe+2665838]
"FSD-Win64-Shipping.exe"+7BAA79: F3 0F 5D F7              -  minss xmm6,xmm7
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BAA7D: F3 0F 11 B3 00 05 00 00  -  movss [rbx+00000500],xmm6
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BAA85: F3 0F 5D 35 97 72 FD 01  -  minss xmm6,[FSD-Win64-Shipping.exe+2791D24]
"FSD-Win64-Shipping.exe"+7BAA8D: 0F 28 CE                 -  movaps xmm1,xmm6
"FSD-Win64-Shipping.exe"+7BAA90: E8 5B 80 E4 FF           -  call FSD-Win64-Shipping.exe+602AF0
"FSD-Win64-Shipping.exe"+7BAA95: 80 BB 18 01 00 00 03     -  cmp byte ptr [rbx+00000118],03
"FSD-Win64-Shipping.exe"+7BAA9C: 75 69                    -  jne FSD-Win64-Shipping.exe+7BAB07
"FSD-Win64-Shipping.exe"+7BAA9E: 0F 2F BB 00 05 00 00     -  comiss xmm7,[rbx+00000500]
"FSD-Win64-Shipping.exe"+7BAAA5: 77 60                    -  ja FSD-Win64-Shipping.exe+7BAB07
"FSD-Win64-Shipping.exe"+7BAAA7: 48 8B 8B F0 04 00 00     -  mov rcx,[rbx+000004F0]
"FSD-Win64-Shipping.exe"+7BAAAE: 48 8B 81 E8 00 00 00     -  mov rax,[rcx+000000E8]
"FSD-Win64-Shipping.exe"+7BAAB5: 80 B8 18 01 00 00 03     -  cmp byte ptr [rax+00000118],03
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>502</ID>
                      <Description>"Modify Gunner Barrier Duration (Host Required)"</Description>
                      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-01
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(shieldDur,FSD-Win64-Shipping.exe,F3 0F 11 87 4C 03 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6DA401)

label(code)
label(return)

label(barriertime)
registersymbol(barriertime)

newmem:

code:
movss xmm0,[barriertime]
  movss [rdi+0000034C],xmm0
  jmp return

barriertime:
dd (float)60.0

shieldDur:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(shieldDur)

[DISABLE]

shieldDur:
  db F3 0F 11 87 4C 03 00 00

unregistersymbol(barriertime)
unregistersymbol(shieldDur)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6DA401

"FSD-Win64-Shipping.exe"+6DA3C5: 0F 2F 8E 4C 01 00 00     -  comiss xmm1,[rsi+0000014C]
"FSD-Win64-Shipping.exe"+6DA3CC: 0F 92 C0                 -  setb al
"FSD-Win64-Shipping.exe"+6DA3CF: 88 87 48 03 00 00        -  mov [rdi+00000348],al
"FSD-Win64-Shipping.exe"+6DA3D5: EB 4C                    -  jmp FSD-Win64-Shipping.exe+6DA423
"FSD-Win64-Shipping.exe"+6DA3D7: F3 0F 10 86 4C 01 00 00  -  movss xmm0,[rsi+0000014C]
"FSD-Win64-Shipping.exe"+6DA3DF: F3 0F 58 87 44 03 00 00  -  addss xmm0,[rdi+00000344]
"FSD-Win64-Shipping.exe"+6DA3E7: F3 0F 11 87 44 03 00 00  -  movss [rdi+00000344],xmm0
"FSD-Win64-Shipping.exe"+6DA3EF: EB 32                    -  jmp FSD-Win64-Shipping.exe+6DA423
"FSD-Win64-Shipping.exe"+6DA3F1: F3 0F 10 86 4C 01 00 00  -  movss xmm0,[rsi+0000014C]
"FSD-Win64-Shipping.exe"+6DA3F9: F3 0F 58 87 4C 03 00 00  -  addss xmm0,[rdi+0000034C]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6DA401: F3 0F 11 87 4C 03 00 00  -  movss [rdi+0000034C],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6DA409: EB 18                    -  jmp FSD-Win64-Shipping.exe+6DA423
"FSD-Win64-Shipping.exe"+6DA40B: F3 0F 10 86 4C 01 00 00  -  movss xmm0,[rsi+0000014C]
"FSD-Win64-Shipping.exe"+6DA413: F3 0F 58 87 40 03 00 00  -  addss xmm0,[rdi+00000340]
"FSD-Win64-Shipping.exe"+6DA41B: F3 0F 11 87 40 03 00 00  -  movss [rdi+00000340],xmm0
"FSD-Win64-Shipping.exe"+6DA423: 48 85 DB                 -  test rbx,rbx
"FSD-Win64-Shipping.exe"+6DA426: 74 7C                    -  je FSD-Win64-Shipping.exe+6DA4A4
"FSD-Win64-Shipping.exe"+6DA428: 0F B6 8E 48 01 00 00     -  movzx ecx,byte ptr [rsi+00000148]
"FSD-Win64-Shipping.exe"+6DA42F: 83 E9 03                 -  sub ecx,03
"FSD-Win64-Shipping.exe"+6DA432: 74 54                    -  je FSD-Win64-Shipping.exe+6DA488
"FSD-Win64-Shipping.exe"+6DA434: 83 F9 01                 -  cmp ecx,01
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24222</ID>
                          <Description>"Barrier Time"</Description>
                          <VariableType>Float</VariableType>
                          <Address>barriertime</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>503</ID>
                      <Description>"Modify Gunner Barrier Size (Host Required)"</Description>
                      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-01
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(barriersize,FSD-Win64-Shipping.exe,F3 0F 11 87 40 03 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6DA41B)

label(code)
label(return)

label(bubblesize)
registersymbol(bubblesize)

newmem:

code:
mulss xmm0,[bubblesize]
  movss [rdi+00000340],xmm0
  jmp return

bubblesize:
dd (float)2.0

barriersize:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(barriersize)

[DISABLE]

barriersize:
  db F3 0F 11 87 40 03 00 00

unregistersymbol(bubblesize)
unregistersymbol(barriersize)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6DA41B

"FSD-Win64-Shipping.exe"+6DA3D7: F3 0F 10 86 4C 01 00 00  -  movss xmm0,[rsi+0000014C]
"FSD-Win64-Shipping.exe"+6DA3DF: F3 0F 58 87 44 03 00 00  -  addss xmm0,[rdi+00000344]
"FSD-Win64-Shipping.exe"+6DA3E7: F3 0F 11 87 44 03 00 00  -  movss [rdi+00000344],xmm0
"FSD-Win64-Shipping.exe"+6DA3EF: EB 32                    -  jmp FSD-Win64-Shipping.exe+6DA423
"FSD-Win64-Shipping.exe"+6DA3F1: F3 0F 10 86 4C 01 00 00  -  movss xmm0,[rsi+0000014C]
"FSD-Win64-Shipping.exe"+6DA3F9: F3 0F 58 87 4C 03 00 00  -  addss xmm0,[rdi+0000034C]
"FSD-Win64-Shipping.exe"+6DA401: F3 0F 11 87 4C 03 00 00  -  movss [rdi+0000034C],xmm0
"FSD-Win64-Shipping.exe"+6DA409: EB 18                    -  jmp FSD-Win64-Shipping.exe+6DA423
"FSD-Win64-Shipping.exe"+6DA40B: F3 0F 10 86 4C 01 00 00  -  movss xmm0,[rsi+0000014C]
"FSD-Win64-Shipping.exe"+6DA413: F3 0F 58 87 40 03 00 00  -  addss xmm0,[rdi+00000340]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6DA41B: F3 0F 11 87 40 03 00 00  -  movss [rdi+00000340],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6DA423: 48 85 DB                 -  test rbx,rbx
"FSD-Win64-Shipping.exe"+6DA426: 74 7C                    -  je FSD-Win64-Shipping.exe+6DA4A4
"FSD-Win64-Shipping.exe"+6DA428: 0F B6 8E 48 01 00 00     -  movzx ecx,byte ptr [rsi+00000148]
"FSD-Win64-Shipping.exe"+6DA42F: 83 E9 03                 -  sub ecx,03
"FSD-Win64-Shipping.exe"+6DA432: 74 54                    -  je FSD-Win64-Shipping.exe+6DA488
"FSD-Win64-Shipping.exe"+6DA434: 83 F9 01                 -  cmp ecx,01
"FSD-Win64-Shipping.exe"+6DA437: 75 6B                    -  jne FSD-Win64-Shipping.exe+6DA4A4
"FSD-Win64-Shipping.exe"+6DA439: 48 8B 8B E8 04 00 00     -  mov rcx,[rbx+000004E8]
"FSD-Win64-Shipping.exe"+6DA440: 48 8B 01                 -  mov rax,[rcx]
"FSD-Win64-Shipping.exe"+6DA443: FF 90 D0 03 00 00        -  call qword ptr [rax+000003D0]
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24221</ID>
                          <Description>"Bubble Size"</Description>
                          <VariableType>Float</VariableType>
                          <Address>bubblesize</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1829</ID>
                  <Description>"Minigun"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2046</ID>
                      <Description>"No Minigun Spinup Time"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InstantMinigunSpinupTime,FSD-Win64-Shipping.exe,F3 0F 11 87 58 07 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BE679)

label(code)
label(return)

newmem:
// Minigun spinup time between 0.0 and 1.0
code:
  mov [rdi+00000758],(float)1.0
  jmp return

InstantMinigunSpinupTime:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(InstantMinigunSpinupTime)

[DISABLE]

InstantMinigunSpinupTime:
  db F3 0F 11 87 58 07 00 00

unregistersymbol(InstantMinigunSpinupTime)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BE679

"FSD-Win64-Shipping.exe"+7BE64B: 48 8B 01                    -  mov rax,[rcx]
"FSD-Win64-Shipping.exe"+7BE64E: FF 90 88 06 00 00           -  call qword ptr [rax+00000688]
"FSD-Win64-Shipping.exe"+7BE654: 84 C0                       -  test al,al
"FSD-Win64-Shipping.exe"+7BE656: 75 38                       -  jne FSD-Win64-Shipping.exe+7BE690
"FSD-Win64-Shipping.exe"+7BE658: 48 8B 8F 90 03 00 00        -  mov rcx,[rdi+00000390]
"FSD-Win64-Shipping.exe"+7BE65F: 0F 28 C7                    -  movaps xmm0,xmm7
"FSD-Win64-Shipping.exe"+7BE662: F3 0F 5E 87 50 07 00 00     -  divss xmm0,[rdi+00000750]
"FSD-Win64-Shipping.exe"+7BE66A: B3 01                       -  mov bl,01
"FSD-Win64-Shipping.exe"+7BE66C: F3 0F 58 87 58 07 00 00     -  addss xmm0,[rdi+00000758]
"FSD-Win64-Shipping.exe"+7BE674: F3 41 0F 5D C0              -  minss xmm0,xmm8
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BE679: F3 0F 11 87 58 07 00 00     -  movss [rdi+00000758],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BE681: E8 BA 50 E0 FF              -  call FSD-Win64-Shipping.exe+5C3740
"FSD-Win64-Shipping.exe"+7BE686: F3 0F 10 8F 58 07 00 00     -  movss xmm1,[rdi+00000758]
"FSD-Win64-Shipping.exe"+7BE68E: EB 23                       -  jmp FSD-Win64-Shipping.exe+7BE6B3
"FSD-Win64-Shipping.exe"+7BE690: F3 0F 10 8F 58 07 00 00     -  movss xmm1,[rdi+00000758]
"FSD-Win64-Shipping.exe"+7BE698: 0F 28 C7                    -  movaps xmm0,xmm7
"FSD-Win64-Shipping.exe"+7BE69B: F3 0F 5E 87 54 07 00 00     -  divss xmm0,[rdi+00000754]
"FSD-Win64-Shipping.exe"+7BE6A3: F3 0F 5C C8                 -  subss xmm1,xmm0
"FSD-Win64-Shipping.exe"+7BE6A7: F3 0F 5F CE                 -  maxss xmm1,xmm6
"FSD-Win64-Shipping.exe"+7BE6AB: F3 0F 11 8F 58 07 00 00     -  movss [rdi+00000758],xmm1
"FSD-Win64-Shipping.exe"+7BE6B3: 33 F6                       -  xor esi,esi
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1221</ID>
                      <Description>"No Minigun Spread (Can't be used with "Common Class-&gt;No Weapon Spread")"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-09-27
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MinigunAccuracy,FSD-Win64-Shipping.exe,F3 0F 11 83 44 02 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+795ADA)

label(code)
label(return)

newmem:
// Between 0.0 and 3.4890159
code:
  mov [rbx+00000244],(float)3.489
  jmp return

MinigunAccuracy:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(MinigunAccuracy)

[DISABLE]

MinigunAccuracy:
  db F3 0F 11 83 44 02 00 00

unregistersymbol(MinigunAccuracy)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+795ADA

"FSD-Win64-Shipping.exe"+795AA4: 4C 8B CF                 -  mov r9,rdi
"FSD-Win64-Shipping.exe"+795AA7: 48 89 44 24 20           -  mov [rsp+20],rax
"FSD-Win64-Shipping.exe"+795AAC: 49 8B CA                 -  mov rcx,r10
"FSD-Win64-Shipping.exe"+795AAF: E8 2C A9 09 01           -  call FSD-Win64-Shipping.exe+18303E0
"FSD-Win64-Shipping.exe"+795AB4: 48 8B 00                 -  mov rax,[rax]
"FSD-Win64-Shipping.exe"+795AB7: 48 89 83 E8 02 00 00     -  mov [rbx+000002E8],rax
"FSD-Win64-Shipping.exe"+795ABE: F3 0F 10 83 68 01 00 00  -  movss xmm0,[rbx+00000168]
"FSD-Win64-Shipping.exe"+795AC6: F3 0F 58 83 44 02 00 00  -  addss xmm0,[rbx+00000244]
"FSD-Win64-Shipping.exe"+795ACE: 48 8B 4D F0              -  mov rcx,[rbp-10]
"FSD-Win64-Shipping.exe"+795AD2: F3 0F 5D 83 B0 01 00 00  -  minss xmm0,[rbx+000001B0]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+795ADA: F3 0F 11 83 44 02 00 00  -  movss [rbx+00000244],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+795AE2: 48 85 C9                 -  test rcx,rcx
"FSD-Win64-Shipping.exe"+795AE5: 74 05                    -  je FSD-Win64-Shipping.exe+795AEC
"FSD-Win64-Shipping.exe"+795AE7: E8 24 BE 26 00           -  call FSD-Win64-Shipping.exe+A01910
"FSD-Win64-Shipping.exe"+795AEC: 48 8B 4D D0              -  mov rcx,[rbp-30]
"FSD-Win64-Shipping.exe"+795AF0: 48 85 C9                 -  test rcx,rcx
"FSD-Win64-Shipping.exe"+795AF3: 74 05                    -  je FSD-Win64-Shipping.exe+795AFA
"FSD-Win64-Shipping.exe"+795AF5: E8 16 BE 26 00           -  call FSD-Win64-Shipping.exe+A01910
"FSD-Win64-Shipping.exe"+795AFA: 48 8B 4D 00              -  mov rcx,[rbp+00]
"FSD-Win64-Shipping.exe"+795AFE: 48 33 CC                 -  xor rcx,rsp
"FSD-Win64-Shipping.exe"+795B01: E8 9A DE EC 01           -  call FSD-Win64-Shipping.exe+26639A0
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24308</ID>
                      <Description>"Max Minigun Heat (Can't be used with "No Minigun Heat")"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
	Process			: FSD-Win64-Shipping.exe  -  (x64)
	Game Version	: 4.22.3.0
	CE Version		: 7.1
	Script Version	: 0.0.1
	Date			: 05/14/20
	Author			: Astor
}

[ENABLE]


aobscanmodule(heat,FSD-Win64-Shipping.exe,F3 0F ** ** ** ** ** ** E8 ** ** ** ** F3 ** ** ** ** ** ** ** 0F 57 C9 0F 2F C1) // should be unique
alloc(newmem,$1000,heat)

label(code)
label(return)
label(no_overheat)

newmem:

code:
  movss xmm6,[no_overheat]
  movss [rbx+000003AC],xmm6
  jmp return
  no_overheat:
  dq (float)9.0

heat:
  jmp newmem
  nop 3
return:
registersymbol(heat)

[DISABLE]

heat:
  db F3 0F 11 B3 AC 03 00 00

unregistersymbol(heat)
dealloc(newmem)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24307</ID>
                      <Description>"No Minigun Heat (Can't be used with "Max Minigun Heat")"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
	Process			: FSD-Win64-Shipping.exe  -  (x64)
	Game Version	: 4.22.3.0
	CE Version		: 7.1
	Script Version	: 0.0.1
	Date			: 05/14/20
	Author			: Astor
}

[ENABLE]


aobscanmodule(heat,FSD-Win64-Shipping.exe,F3 0F ** ** ** ** ** ** E8 ** ** ** ** F3 ** ** ** ** ** ** ** 0F 57 C9 0F 2F C1) // should be unique
alloc(newmem,$1000,heat)

label(code)
label(return)
label(no_overheat)

newmem:

code:
  movss xmm6,[no_overheat]
  movss [rbx+000003AC],xmm6
  jmp return
  no_overheat:
  dq (float)0.0

heat:
  jmp newmem
  nop 3
return:
registersymbol(heat)

[DISABLE]

heat:
  db F3 0F 11 B3 AC 03 00 00

unregistersymbol(heat)
dealloc(newmem)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>2109</ID>
                  <Description>"Zipline"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24226</ID>
                      <Description>"Unlimited Range (Requires Distance Upgrade Slot 2) (Enable Before Mission Start)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-21
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedZiplineRange,FSD-Win64-Shipping.exe,F3 0F 11 83 30 07 00 00 48 8B 5C 24 30 48 83 C4 20 5F C3 F3 0F 10) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6DA5F8)

label(code)
label(return)

label(ziprange)

newmem:

code:
  mulss xmm0,[ziprange]
  movss [rbx+00000730],xmm0
  jmp return

ziprange:
dd (float)100.0

UnlimitedZiplineRange:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(UnlimitedZiplineRange)

[DISABLE]

UnlimitedZiplineRange:
  db F3 0F 11 83 30 07 00 00

unregistersymbol(UnlimitedZiplineRange)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6DA5F8

"FSD-Win64-Shipping.exe"+6DA5C5: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+6DA5C8: 41 FF 90 E8 05 00 00     -  call qword ptr [r8+000005E8]
"FSD-Win64-Shipping.exe"+6DA5CF: 48 8B 8F 58 01 00 00     -  mov rcx,[rdi+00000158]
"FSD-Win64-Shipping.exe"+6DA5D6: 48 89 88 60 01 00 00     -  mov [rax+00000160],rcx
"FSD-Win64-Shipping.exe"+6DA5DD: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DA5E2: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DA5E6: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6DA5E7: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DA5E8: F3 0F 10 87 54 01 00 00  -  movss xmm0,[rdi+00000154]
"FSD-Win64-Shipping.exe"+6DA5F0: F3 0F 58 83 30 07 00 00  -  addss xmm0,[rbx+00000730]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6DA5F8: F3 0F 11 83 30 07 00 00  -  movss [rbx+00000730],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6DA600: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DA605: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DA609: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6DA60A: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DA60B: F3 0F 10 87 54 01 00 00  -  movss xmm0,[rdi+00000154]
"FSD-Win64-Shipping.exe"+6DA613: F3 0F 58 83 3C 07 00 00  -  addss xmm0,[rbx+0000073C]
"FSD-Win64-Shipping.exe"+6DA61B: F3 0F 11 83 3C 07 00 00  -  movss [rbx+0000073C],xmm0
"FSD-Win64-Shipping.exe"+6DA623: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DA628: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DA62C: 5F                       -  pop rdi
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24227</ID>
                      <Description>"Unlimited Angle (Requires Angle Upgrade Slot 1) (Enable Before Mission Start)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-21
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ZiplineAnyAngle,FSD-Win64-Shipping.exe,F3 0F 11 83 3C 07 00 00 48 8B) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6DA61B)

label(code)
label(return)

label(zipangle)

newmem:

code:
  mulss xmm0,[zipangle]
  movss [rbx+0000073C],xmm0
  jmp return

zipangle:
dd (float)100.0

ZiplineAnyAngle:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(ZiplineAnyAngle)

[DISABLE]

ZiplineAnyAngle:
  db F3 0F 11 83 3C 07 00 00

unregistersymbol(ZiplineAnyAngle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6DA61B

"FSD-Win64-Shipping.exe"+6DA5E8: F3 0F 10 87 54 01 00 00  -  movss xmm0,[rdi+00000154]
"FSD-Win64-Shipping.exe"+6DA5F0: F3 0F 58 83 30 07 00 00  -  addss xmm0,[rbx+00000730]
"FSD-Win64-Shipping.exe"+6DA5F8: E9 03 5A 8D FF           -  jmp 7FF7C1B90000
"FSD-Win64-Shipping.exe"+6DA5FD: 0F 1F 00                 -  nop dword ptr [rax]
"FSD-Win64-Shipping.exe"+6DA600: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DA605: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DA609: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6DA60A: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DA60B: F3 0F 10 87 54 01 00 00  -  movss xmm0,[rdi+00000154]
"FSD-Win64-Shipping.exe"+6DA613: F3 0F 58 83 3C 07 00 00  -  addss xmm0,[rbx+0000073C]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6DA61B: F3 0F 11 83 3C 07 00 00  -  movss [rbx+0000073C],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6DA623: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6DA628: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6DA62C: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6DA62D: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6DA62E: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6DA62F: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6DA630: 48 89 6C 24 18           -  mov [rsp+18],rbp
"FSD-Win64-Shipping.exe"+6DA635: 48 89 74 24 20           -  mov [rsp+20],rsi
"FSD-Win64-Shipping.exe"+6DA63A: 41 54                    -  push r12
"FSD-Win64-Shipping.exe"+6DA63C: 41 56                    -  push r14
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"Engineer"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1120</ID>
                  <Description>"(All Turrets) Unlimited Turret Ammo (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-09-27
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(TurretAmmo,FSD-Win64-Shipping.exe,89 87 58 04 00 00 3B) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7AFCFB)

label(code)
label(return)

newmem:

code:
  add [rdi+00000458],(int)0
  jmp return

TurretAmmo:
  jmp newmem
  nop
return:
registersymbol(TurretAmmo)

[DISABLE]

TurretAmmo:
  db 89 87 58 04 00 00

unregistersymbol(TurretAmmo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7AFCFB

"FSD-Win64-Shipping.exe"+7AFCDD: 48 8B F9                 -  mov rdi,rcx
"FSD-Win64-Shipping.exe"+7AFCE0: 75 71                    -  jne FSD-Win64-Shipping.exe+7AFD53
"FSD-Win64-Shipping.exe"+7AFCE2: 8B 89 58 04 00 00        -  mov ecx,[rcx+00000458]
"FSD-Win64-Shipping.exe"+7AFCE8: 85 D2                    -  test edx,edx
"FSD-Win64-Shipping.exe"+7AFCEA: 79 04                    -  jns FSD-Win64-Shipping.exe+7AFCF0
"FSD-Win64-Shipping.exe"+7AFCEC: 33 C0                    -  xor eax,eax
"FSD-Win64-Shipping.exe"+7AFCEE: EB 0B                    -  jmp FSD-Win64-Shipping.exe+7AFCFB
"FSD-Win64-Shipping.exe"+7AFCF0: 8B 87 5C 04 00 00        -  mov eax,[rdi+0000045C]
"FSD-Win64-Shipping.exe"+7AFCF6: 3B D0                    -  cmp edx,eax
"FSD-Win64-Shipping.exe"+7AFCF8: 0F 4C C2                 -  cmovl eax,edx
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7AFCFB: 89 87 58 04 00 00        -  mov [rdi+00000458],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7AFD01: 3B C8                    -  cmp ecx,eax
"FSD-Win64-Shipping.exe"+7AFD03: 74 4E                    -  je FSD-Win64-Shipping.exe+7AFD53
"FSD-Win64-Shipping.exe"+7AFD05: 48 89 5C 24 38           -  mov [rsp+38],rbx
"FSD-Win64-Shipping.exe"+7AFD0A: 48 8D 54 24 30           -  lea rdx,[rsp+30]
"FSD-Win64-Shipping.exe"+7AFD0F: 8B D8                    -  mov ebx,eax
"FSD-Win64-Shipping.exe"+7AFD11: 89 44 24 30              -  mov [rsp+30],eax
"FSD-Win64-Shipping.exe"+7AFD15: 2B D9                    -  sub ebx,ecx
"FSD-Win64-Shipping.exe"+7AFD17: 48 8D 8F 50 03 00 00     -  lea rcx,[rdi+00000350]
"FSD-Win64-Shipping.exe"+7AFD1E: 89 5C 24 34              -  mov [rsp+34],ebx
"FSD-Win64-Shipping.exe"+7AFD22: E8 D9 95 B2 FF           -  call FSD-Win64-Shipping.exe+2D9300
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>2108</ID>
                  <Description>"Unlimited Turret Placement (Host Required) (Warning: Cannot be pickup up after placement)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedSentryPlacement,FSD-Win64-Shipping.exe,89 87 80 04 00 00 3B) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7F2D8B)

label(code)
label(return)

newmem:

code:
  mov [rdi+00000480],(int)0
  jmp return

UnlimitedSentryPlacement:
  jmp newmem
  nop
return:
registersymbol(UnlimitedSentryPlacement)

[DISABLE]

UnlimitedSentryPlacement:
  db 89 87 80 04 00 00

unregistersymbol(UnlimitedSentryPlacement)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7F2D8B

"FSD-Win64-Shipping.exe"+7F2D65: 48 03 0E                 -  add rcx,[rsi]
"FSD-Win64-Shipping.exe"+7F2D68: 89 01                    -  mov [rcx],eax
"FSD-Win64-Shipping.exe"+7F2D6A: 8B 45 C4                 -  mov eax,[rbp-3C]
"FSD-Win64-Shipping.exe"+7F2D6D: 89 41 04                 -  mov [rcx+04],eax
"FSD-Win64-Shipping.exe"+7F2D70: 48 8B 45 C8              -  mov rax,[rbp-38]
"FSD-Win64-Shipping.exe"+7F2D74: 48 89 41 08              -  mov [rcx+08],rax
"FSD-Win64-Shipping.exe"+7F2D78: 48 8D 4D 20              -  lea rcx,[rbp+20]
"FSD-Win64-Shipping.exe"+7F2D7C: E8 AF 10 4C 00           -  call FSD-Win64-Shipping.exe+CB3E30
"FSD-Win64-Shipping.exe"+7F2D81: 48 63 B7 80 04 00 00     -  movsxd  rsi,dword ptr [rdi+00000480]
"FSD-Win64-Shipping.exe"+7F2D88: 8D 46 01                 -  lea eax,[rsi+01]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7F2D8B: 89 87 80 04 00 00        -  mov [rdi+00000480],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7F2D91: 3B 87 84 04 00 00        -  cmp eax,[rdi+00000484]
"FSD-Win64-Shipping.exe"+7F2D97: 7E 0E                    -  jle FSD-Win64-Shipping.exe+7F2DA7
"FSD-Win64-Shipping.exe"+7F2D99: 8B D6                    -  mov edx,esi
"FSD-Win64-Shipping.exe"+7F2D9B: 48 8D 8F 78 04 00 00     -  lea rcx,[rdi+00000478]
"FSD-Win64-Shipping.exe"+7F2DA2: E8 29 22 A8 FF           -  call FSD-Win64-Shipping.exe+274FD0
"FSD-Win64-Shipping.exe"+7F2DA7: 48 8B 87 78 04 00 00     -  mov rax,[rdi+00000478]
"FSD-Win64-Shipping.exe"+7F2DAE: 48 8B CF                 -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7F2DB1: 48 8D 14 F0              -  lea rdx,[rax+rsi*8]
"FSD-Win64-Shipping.exe"+7F2DB5: 8B 45 20                 -  mov eax,[rbp+20]
"FSD-Win64-Shipping.exe"+7F2DB8: 89 02                    -  mov [rdx],eax
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>2133</ID>
                  <Description>"Unlimited Turret Resupply (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-05-20
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedTurretSupply,FSD-Win64-Shipping.exe,89 81 9C 01 00 00 48 81 C1 10 01 00 00 89 44 24 30 E8 6E) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7CAE9C)

label(code)
label(return)

newmem:

code:
  add [rcx+0000019C],(int)0
  jmp return

UnlimitedTurretSupply:
  jmp newmem
  nop
return:
registersymbol(UnlimitedTurretSupply)

[DISABLE]

UnlimitedTurretSupply:
  db 89 81 9C 01 00 00

unregistersymbol(UnlimitedTurretSupply)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7CAE9C

"FSD-Win64-Shipping.exe"+7CAE7B: 80 B8 18 01 00 00 03     -  cmp byte ptr [rax+00000118],03
"FSD-Win64-Shipping.exe"+7CAE82: 75 2E                    -  jne FSD-Win64-Shipping.exe+7CAEB2
"FSD-Win64-Shipping.exe"+7CAE84: 8B 81 9C 01 00 00        -  mov eax,[rcx+0000019C]
"FSD-Win64-Shipping.exe"+7CAE8A: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+7CAE8C: 7E 24                    -  jle FSD-Win64-Shipping.exe+7CAEB2
"FSD-Win64-Shipping.exe"+7CAE8E: 2B C2                    -  sub eax,edx
"FSD-Win64-Shipping.exe"+7CAE90: 33 D2                    -  xor edx,edx
"FSD-Win64-Shipping.exe"+7CAE92: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+7CAE94: 0F 4E C2                 -  cmovle eax,edx
"FSD-Win64-Shipping.exe"+7CAE97: 48 8D 54 24 30           -  lea rdx,[rsp+30]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7CAE9C: 89 81 9C 01 00 00        -  mov [rcx+0000019C],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7CAEA2: 48 81 C1 10 01 00 00     -  add rcx,00000110
"FSD-Win64-Shipping.exe"+7CAEA9: 89 44 24 30              -  mov [rsp+30],eax
"FSD-Win64-Shipping.exe"+7CAEAD: E8 6E 54 B1 FF           -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+7CAEB2: 48 83 C4 28              -  add rsp,28
"FSD-Win64-Shipping.exe"+7CAEB6: C3                       -  ret
"FSD-Win64-Shipping.exe"+7CAEB7: CC                       -  int 3
"FSD-Win64-Shipping.exe"+7CAEB8: CC                       -  int 3
"FSD-Win64-Shipping.exe"+7CAEB9: CC                       -  int 3
"FSD-Win64-Shipping.exe"+7CAEBA: CC                       -  int 3
"FSD-Win64-Shipping.exe"+7CAEBB: CC                       -  int 3
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1838</ID>
              <Description>"Perks &amp; Special Abilities"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1847</ID>
                  <Description>"Unlimited Perks Charges (Host Only)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-02-17
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedPerks,FSD-Win64-Shipping.exe,00 2B F0 33 C0 85 F6) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+74B2D1)

label(code)
label(return)
// FSD-Win64-Shipping.UPerkAsset::CanUseCharge
newmem:

code:
  add esi,(int)0
  xor eax,eax
  test esi,esi
  jmp return

UnlimitedPerks+01:
  jmp newmem
  nop
return:
registersymbol(UnlimitedPerks)

[DISABLE]

UnlimitedPerks+01:
  db 2B F0 33 C0 85 F6

unregistersymbol(UnlimitedPerks)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+74B2D1

"FSD-Win64-Shipping.exe"+74B2AF: 8B F0                    -  mov esi,eax
"FSD-Win64-Shipping.exe"+74B2B1: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+74B2B3: 7E 29                    -  jle FSD-Win64-Shipping.exe+74B2DE
"FSD-Win64-Shipping.exe"+74B2B5: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+74B2B8: E8 23 F2 00 00           -  call FSD-Win64-Shipping.exe+75A4E0
"FSD-Win64-Shipping.exe"+74B2BD: 48 85 C0                 -  test rax,rax
"FSD-Win64-Shipping.exe"+74B2C0: 0F 84 87 00 00 00        -  je FSD-Win64-Shipping.exe+74B34D
"FSD-Win64-Shipping.exe"+74B2C6: 48 8B D7                 -  mov rdx,rdi
"FSD-Win64-Shipping.exe"+74B2C9: 48 8B C8                 -  mov rcx,rax
"FSD-Win64-Shipping.exe"+74B2CC: E8 AF 42 01 00           -  call FSD-Win64-Shipping.exe+75F580
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+74B2D1: 2B F0                    -  sub esi,eax
"FSD-Win64-Shipping.exe"+74B2D3: 33 C0                    -  xor eax,eax
"FSD-Win64-Shipping.exe"+74B2D5: 85 F6                    -  test esi,esi
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+74B2D7: 0F 4E F0                 -  cmovle esi,eax
"FSD-Win64-Shipping.exe"+74B2DA: 85 F6                    -  test esi,esi
"FSD-Win64-Shipping.exe"+74B2DC: 7E 6F                    -  jle FSD-Win64-Shipping.exe+74B34D
"FSD-Win64-Shipping.exe"+74B2DE: 48 8B 07                 -  mov rax,[rdi]
"FSD-Win64-Shipping.exe"+74B2E1: 48 8B D3                 -  mov rdx,rbx
"FSD-Win64-Shipping.exe"+74B2E4: 48 8B CF                 -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+74B2E7: FF 90 50 02 00 00        -  call qword ptr [rax+00000250]
"FSD-Win64-Shipping.exe"+74B2ED: 0F 28 F0                 -  movaps xmm6,xmm0
"FSD-Win64-Shipping.exe"+74B2F0: 0F 57 FF                 -  xorps xmm7,xmm7
"FSD-Win64-Shipping.exe"+74B2F3: 0F 2F F7                 -  comiss xmm6,xmm7
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1848</ID>
                  <Description>"Instant Perk Recharge"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-02-17
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(PerkTimeSinceLastUse,FSD-Win64-Shipping.exe,00 F3 0F 5E C6 0F 2F C7) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+74B32F)

label(code)
label(return)

label(ZeroTime)
registersymbol(ZeroTime)
// FSD-Win64-Shipping.UPerkAsset::CanUseCharge
newmem:

code:
  mulss xmm0,[ZeroTime]
  //divss xmm0,xmm6
  comiss xmm0,xmm7
  jmp return

ZeroTime:
  dd (float)100.0

PerkTimeSinceLastUse+01:
  jmp newmem
  nop
  nop
return:
registersymbol(PerkTimeSinceLastUse)

[DISABLE]

PerkTimeSinceLastUse+01:
  db F3 0F 5E C6 0F 2F C7

unregistersymbol(ZeroTime)
unregistersymbol(PerkTimeSinceLastUse)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+74B32F

"FSD-Win64-Shipping.exe"+74B30C: 7F 3B                    -  jg FSD-Win64-Shipping.exe+74B349
"FSD-Win64-Shipping.exe"+74B30E: 48 8B C8                 -  mov rcx,rax
"FSD-Win64-Shipping.exe"+74B311: 48 8B 42 30              -  mov rax,[rdx+30]
"FSD-Win64-Shipping.exe"+74B315: 4C 39 04 C8              -  cmp [rax+rcx*8],r8
"FSD-Win64-Shipping.exe"+74B319: 75 2E                    -  jne FSD-Win64-Shipping.exe+74B349
"FSD-Win64-Shipping.exe"+74B31B: 48 8B 8B 60 07 00 00     -  mov rcx,[rbx+00000760]
"FSD-Win64-Shipping.exe"+74B322: 48 85 C9                 -  test rcx,rcx
"FSD-Win64-Shipping.exe"+74B325: 74 22                    -  je FSD-Win64-Shipping.exe+74B349
"FSD-Win64-Shipping.exe"+74B327: 48 8B D7                 -  mov rdx,rdi
"FSD-Win64-Shipping.exe"+74B32A: E8 C1 37 01 00           -  call FSD-Win64-Shipping.exe+75EAF0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+74B32F: F3 0F 5E C6              -  divss xmm0,xmm6
"FSD-Win64-Shipping.exe"+74B333: 0F 2F C7                 -  comiss xmm0,xmm7
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+74B336: 72 15                    -  jb FSD-Win64-Shipping.exe+74B34D
"FSD-Win64-Shipping.exe"+74B338: F3 0F 5D 05 F8 41 EF 01  -  minss xmm0,[FSD-Win64-Shipping.exe+263F538]
"FSD-Win64-Shipping.exe"+74B340: 0F 2F 05 F1 41 EF 01     -  comiss xmm0,[FSD-Win64-Shipping.exe+263F538]
"FSD-Win64-Shipping.exe"+74B347: 72 04                    -  jb FSD-Win64-Shipping.exe+74B34D
"FSD-Win64-Shipping.exe"+74B349: B0 01                    -  mov al,01
"FSD-Win64-Shipping.exe"+74B34B: EB 02                    -  jmp FSD-Win64-Shipping.exe+74B34F
"FSD-Win64-Shipping.exe"+74B34D: 32 C0                    -  xor al,al
"FSD-Win64-Shipping.exe"+74B34F: 48 8B 5C 24 50           -  mov rbx,[rsp+50]
"FSD-Win64-Shipping.exe"+74B354: 48 8B 74 24 58           -  mov rsi,[rsp+58]
"FSD-Win64-Shipping.exe"+74B359: 0F 28 74 24 30           -  movaps xmm6,[rsp+30]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>482</ID>
                  <Description>"Modify Player Gravity (Doesn't Work, Do Not Enable)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-31
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(playergravity,FSD-Win64-Shipping.exe,F3 0F 59 83 98 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+18AD3FE)

label(code)
label(return)

globalalloc(gravbase,8,"FSD-Win64-Shipping.exe"+18AC09E)

newmem:

code: //original : mulss xmm0,[rbx+00000198]
push rax
mov rax,gravbase
mov [rax],rbx
pop rax
  mulss xmm0,[rbx+00000198]
  jmp return

playergravity:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(playergravity)

[DISABLE]

playergravity:
  db F3 0F 59 83 98 01 00 00

unregistersymbol(playergravity)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+18AD3FE

"FSD-Win64-Shipping.exe"+18AD3E6: B8 02 00 00 00           -  mov eax,00000002
"FSD-Win64-Shipping.exe"+18AD3EB: C3                       -  ret 
"FSD-Win64-Shipping.exe"+18AD3EC: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD3ED: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD3EE: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD3EF: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD3F0: 40 53                    -  push rbx
"FSD-Win64-Shipping.exe"+18AD3F2: 48 83 EC 20              -  sub rsp,20
"FSD-Win64-Shipping.exe"+18AD3F6: 48 8B D9                 -  mov rbx,rcx
"FSD-Win64-Shipping.exe"+18AD3F9: E8 02 EC 02 00           -  call FSD-Win64-Shipping.exe+18DC000
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+18AD3FE: F3 0F 59 83 98 01 00 00  -  mulss xmm0,[rbx+00000198]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+18AD406: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+18AD40A: 5B                       -  pop rbx
"FSD-Win64-Shipping.exe"+18AD40B: C3                       -  ret 
"FSD-Win64-Shipping.exe"+18AD40C: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD40D: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD40E: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD40F: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+18AD410: 8B 81 7C 02 00 00        -  mov eax,[rcx+0000027C]
"FSD-Win64-Shipping.exe"+18AD416: C3                       -  ret 
"FSD-Win64-Shipping.exe"+18AD417: CC                       -  int 3 
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>480</ID>
                      <Description>"Player Gravity"</Description>
                      <VariableType>Float</VariableType>
                      <Address>gravbase</Address>
                      <Offsets>
                        <Offset>198</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24204</ID>
                  <Description>"Unlimited Jumping"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-04
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MaxJumpCount,FSD-Win64-Shipping.exe,8B 83 54 04 00 00 39) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+187F35F)

label(code)
label(return)

newmem:

code:
  mov eax,[rbx+00000454]
  mov [rbx+00000454],(int)999999
  jmp return

MaxJumpCount:
  jmp newmem
  nop
return:
registersymbol(MaxJumpCount)

[DISABLE]

MaxJumpCount:
  db 8B 83 54 04 00 00

unregistersymbol(MaxJumpCount)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+187F35F

"FSD-Win64-Shipping.exe"+187F33F: 84 C0                          -  test al,al
"FSD-Win64-Shipping.exe"+187F341: 74 1C                          -  je FSD-Win64-Shipping.exe+187F35F
"FSD-Win64-Shipping.exe"+187F343: 8B 83 58 04 00 00              -  mov eax,[rbx+00000458]
"FSD-Win64-Shipping.exe"+187F349: FF C0                          -  inc eax
"FSD-Win64-Shipping.exe"+187F34B: 3B 83 54 04 00 00              -  cmp eax,[rbx+00000454]
"FSD-Win64-Shipping.exe"+187F351: 0F 9C C0                       -  setl al
"FSD-Win64-Shipping.exe"+187F354: 48 8B 5C 24 30                 -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+187F359: 48 83 C4 20                    -  add rsp,20
"FSD-Win64-Shipping.exe"+187F35D: 5F                             -  pop rdi
"FSD-Win64-Shipping.exe"+187F35E: C3                             -  ret 
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+187F35F: 8B 83 54 04 00 00              -  mov eax,[rbx+00000454]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+187F365: 39 83 58 04 00 00              -  cmp [rbx+00000458],eax
"FSD-Win64-Shipping.exe"+187F36B: 0F 9C C0                       -  setl al
"FSD-Win64-Shipping.exe"+187F36E: 48 8B 5C 24 30                 -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+187F373: 48 83 C4 20                    -  add rsp,20
"FSD-Win64-Shipping.exe"+187F377: 5F                             -  pop rdi
"FSD-Win64-Shipping.exe"+187F378: C3                             -  ret 
"FSD-Win64-Shipping.exe"+187F379: 48 8B 5C 24 30                 -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+187F37E: 40 0F B6 C7                    -  movzx eax,dil
"FSD-Win64-Shipping.exe"+187F382: 48 83 C4 20                    -  add rsp,20
"FSD-Win64-Shipping.exe"+187F386: 5F                             -  pop rdi
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>24225</ID>
                  <Description>"Make Gun Automatic Fire (Does Not Work With Scout -&gt; M1000) (v29.9 Only)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-21
  Author : Verbergler

  This script does blah blah blah
}

define(address,"FSD-Win64-Shipping.exe"+7C6AB9)
define(bytes,40 38 BE 10 07 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7C6AB9)

label(code)
label(return)

newmem:

code:
  mov [rsi+00000710],(int)1
  cmp [rsi+00000710],dil
  jmp return

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]

address:
  db bytes
  // cmp [rsi+00000710],dil

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7C6AB9

"FSD-Win64-Shipping.exe"+7C6A84: 4C 8B C3                    -  mov r8,rbx
"FSD-Win64-Shipping.exe"+7C6A87: E8 D4 AF 22 01              -  call FSD-Win64-Shipping.exe+19F1A60
"FSD-Win64-Shipping.exe"+7C6A8C: 48 8B 06                    -  mov rax,[rsi]
"FSD-Win64-Shipping.exe"+7C6A8F: 48 8B CE                    -  mov rcx,rsi
"FSD-Win64-Shipping.exe"+7C6A92: FF 90 F8 07 00 00           -  call qword ptr [rax+000007F8]
"FSD-Win64-Shipping.exe"+7C6A98: 40 32 FF                    -  xor dil,dil
"FSD-Win64-Shipping.exe"+7C6A9B: C6 86 2A 07 00 00 02        -  mov byte ptr [rsi+0000072A],02
"FSD-Win64-Shipping.exe"+7C6AA2: 48 8D 9E 24 07 00 00        -  lea rbx,[rsi+00000724]
"FSD-Win64-Shipping.exe"+7C6AA9: F3 0F 58 86 D8 06 00 00     -  addss xmm0,[rsi+000006D8]
"FSD-Win64-Shipping.exe"+7C6AB1: F3 0F 11 86 D8 06 00 00     -  movss [rsi+000006D8],xmm0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7C6AB9: 40 38 BE 10 07 00 00        -  cmp [rsi+00000710],dil
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7C6AC0: 75 19                       -  jne FSD-Win64-Shipping.exe+7C6ADB
"FSD-Win64-Shipping.exe"+7C6AC2: 8B 86 A0 06 00 00           -  mov eax,[rsi+000006A0]
"FSD-Win64-Shipping.exe"+7C6AC8: 39 03                       -  cmp [rbx],eax
"FSD-Win64-Shipping.exe"+7C6ACA: 7C 0F                       -  jl FSD-Win64-Shipping.exe+7C6ADB
"FSD-Win64-Shipping.exe"+7C6ACC: 44 88 B6 29 07 00 00        -  mov [rsi+00000729],r14l
"FSD-Win64-Shipping.exe"+7C6AD3: 40 B7 01                    -  mov dil,01
"FSD-Win64-Shipping.exe"+7C6AD6: 44 89 33                    -  mov [rbx],r14d
"FSD-Win64-Shipping.exe"+7C6AD9: EB 2A                       -  jmp FSD-Win64-Shipping.exe+7C6B05
"FSD-Win64-Shipping.exe"+7C6ADB: 8B 03                       -  mov eax,[rbx]
"FSD-Win64-Shipping.exe"+7C6ADD: 3B 86 A0 06 00 00           -  cmp eax,[rsi+000006A0]
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>516</ID>
              <Description>"Common Class"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1849</ID>
                  <Description>"InstaKill™ (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-02-25
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InstaKill,FSD-Win64-Shipping.exe,0F 29 BC 24 90 00 00 00 49 8B) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+712D86)

label(code)
label(return)

label(Multiplier)
registersymbol(Multiplier)
// FSD-Win64-Shipping.UDamageComponent::DamageTargetInternal
newmem:

code:
  mulss xmm3,[Multiplier]
  mulss xmm7,[Multiplier]
  movaps [rsp+00000090],xmm7
  jmp return

Multiplier:
  dd (float)1000.0

InstaKill:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(InstaKill)

[DISABLE]

InstaKill:
  db 0F 29 BC 24 90 00 00 00

unregistersymbol(Multiplier)
unregistersymbol(InstaKill)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+712D86

"FSD-Win64-Shipping.exe"+712D6C: CC                          -  int 3 
"FSD-Win64-Shipping.exe"+712D6D: CC                          -  int 3 
"FSD-Win64-Shipping.exe"+712D6E: CC                          -  int 3 
"FSD-Win64-Shipping.exe"+712D6F: CC                          -  int 3 
"FSD-Win64-Shipping.exe"+712D70: 40 57                       -  push rdi
"FSD-Win64-Shipping.exe"+712D72: 41 54                       -  push r12
"FSD-Win64-Shipping.exe"+712D74: 41 56                       -  push r14
"FSD-Win64-Shipping.exe"+712D76: 41 57                       -  push r15
"FSD-Win64-Shipping.exe"+712D78: 48 81 EC B8 00 00 00        -  sub rsp,000000B8
"FSD-Win64-Shipping.exe"+712D7F: 4D 8D A0 F8 00 00 00        -  lea r12,[r8+000000F8]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+712D86: 0F 29 BC 24 90 00 00 00     -  movaps [rsp+00000090],xmm7
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+712D8E: 49 8B 04 24                 -  mov rax,[r12]
"FSD-Win64-Shipping.exe"+712D92: 48 8B F9                    -  mov rdi,rcx
"FSD-Win64-Shipping.exe"+712D95: 49 8B CC                    -  mov rcx,r12
"FSD-Win64-Shipping.exe"+712D98: 0F 28 FB                    -  movaps xmm7,xmm3
"FSD-Win64-Shipping.exe"+712D9B: 4D 8B F0                    -  mov r14,r8
"FSD-Win64-Shipping.exe"+712D9E: 4C 8B FA                    -  mov r15,rdx
"FSD-Win64-Shipping.exe"+712DA1: FF 50 20                    -  call qword ptr [rax+20]
"FSD-Win64-Shipping.exe"+712DA4: 84 C0                       -  test al,al
"FSD-Win64-Shipping.exe"+712DA6: 74 08                       -  je FSD-Win64-Shipping.exe+712DB0
"FSD-Win64-Shipping.exe"+712DA8: 0F 57 C0                    -  xorps xmm0,xmm0
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1834</ID>
                  <Description>"God Mode (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-02-10
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(GodMode,FSD-Win64-Shipping.exe,48 81 EC 90 00 00 00 0F 29 70 D8 4C) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+5FCF04)

label(code)
label(return)
label(noDamage)
// Function Name
// 7FF78B23C140 - FSD-Win64-Shipping.UPlayerHealthComponent::TakeDamage()
newmem:
  movss xmm1,[noDamage]
  movss xmm6,[noDamage]

code:
  sub rsp,00000090
  jmp return

noDamage:
  dd (float)0.0

GodMode:
  jmp newmem
  nop
  nop
return:
registersymbol(GodMode)

[DISABLE]

GodMode:
  db 48 81 EC 90 00 00 00

unregistersymbol(GodMode)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+5FCF04

"FSD-Win64-Shipping.exe"+5FCEED: C3                          -  ret 
"FSD-Win64-Shipping.exe"+5FCEEE: CC                          -  int 3 
"FSD-Win64-Shipping.exe"+5FCEEF: CC                          -  int 3 
"FSD-Win64-Shipping.exe"+5FCEF0: 48 8B C4                    -  mov rax,rsp
"FSD-Win64-Shipping.exe"+5FCEF3: 48 89 58 08                 -  mov [rax+08],rbx
"FSD-Win64-Shipping.exe"+5FCEF7: 48 89 68 10                 -  mov [rax+10],rbp
"FSD-Win64-Shipping.exe"+5FCEFB: 48 89 70 18                 -  mov [rax+18],rsi
"FSD-Win64-Shipping.exe"+5FCEFF: 57                          -  push rdi
"FSD-Win64-Shipping.exe"+5FCF00: 41 56                       -  push r14
"FSD-Win64-Shipping.exe"+5FCF02: 41 57                       -  push r15
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+5FCF04: 48 81 EC 90 00 00 00        -  sub rsp,00000090
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+5FCF0B: 0F 29 70 D8                 -  movaps [rax-28],xmm6
"FSD-Win64-Shipping.exe"+5FCF0F: 4C 8B F9                    -  mov r15,rcx
"FSD-Win64-Shipping.exe"+5FCF12: 0F 29 78 C8                 -  movaps [rax-38],xmm7
"FSD-Win64-Shipping.exe"+5FCF16: 49 8B F1                    -  mov rsi,r9
"FSD-Win64-Shipping.exe"+5FCF19: 44 0F 29 40 B8              -  movaps [rax-48],xmm8
"FSD-Win64-Shipping.exe"+5FCF1E: 49 8B E8                    -  mov rbp,r8
"FSD-Win64-Shipping.exe"+5FCF21: 44 0F 29 48 A8              -  movaps [rax-58],xmm9
"FSD-Win64-Shipping.exe"+5FCF26: 0F 28 F1                    -  movaps xmm6,xmm1
"FSD-Win64-Shipping.exe"+5FCF29: 48 8B 81 F8 00 00 00        -  mov rax,[rcx+000000F8]
"FSD-Win64-Shipping.exe"+5FCF30: 48 81 C1 F8 00 00 00        -  add rcx,000000F8
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>416</ID>
                  <Description>"God Shields (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-30
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(shieldinvuln,FSD-Win64-Shipping.exe,F3 0F 11 81 A8 02 00 00 74) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+5EFB66)

label(code)
label(return)

newmem:

code: //original : movss [rcx+000002A8],xmm0
xorps xmm0,xmm0
  movss [rcx+000002A8],xmm0
  jmp return

shieldinvuln:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(shieldinvuln)

[DISABLE]

shieldinvuln:
  db F3 0F 11 81 A8 02 00 00

unregistersymbol(shieldinvuln)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+5EFB66

"FSD-Win64-Shipping.exe"+5EFB3F: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+5EFB40: F3 0F 10 91 A8 02 00 00  -  movss xmm2,[rcx+000002A8]
"FSD-Win64-Shipping.exe"+5EFB48: 0F 57 C0                 -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+5EFB4B: 0F 28 DA                 -  movaps xmm3,xmm2
"FSD-Win64-Shipping.exe"+5EFB4E: F3 0F 58 D9              -  addss xmm3,xmm1
"FSD-Win64-Shipping.exe"+5EFB52: 0F 2F D8                 -  comiss xmm3,xmm0
"FSD-Win64-Shipping.exe"+5EFB55: 72 0C                    -  jb FSD-Win64-Shipping.exe+5EFB63
"FSD-Win64-Shipping.exe"+5EFB57: F3 0F 10 81 A4 02 00 00  -  movss xmm0,[rcx+000002A4]
"FSD-Win64-Shipping.exe"+5EFB5F: F3 0F 5D C3              -  minss xmm0,xmm3
"FSD-Win64-Shipping.exe"+5EFB63: 0F 2E C2                 -  ucomiss xmm0,xmm2
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+5EFB66: F3 0F 11 81 A8 02 00 00  -  movss [rcx+000002A8],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+5EFB6E: 74 08                    -  je FSD-Win64-Shipping.exe+5EFB78
"FSD-Win64-Shipping.exe"+5EFB70: 0F 28 CA                 -  movaps xmm1,xmm2
"FSD-Win64-Shipping.exe"+5EFB73: E9 88 07 01 00           -  jmp FSD-Win64-Shipping.exe+600300
"FSD-Win64-Shipping.exe"+5EFB78: C3                       -  ret 
"FSD-Win64-Shipping.exe"+5EFB79: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+5EFB7A: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+5EFB7B: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+5EFB7C: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+5EFB7D: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+5EFB7E: CC                       -  int 3 
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>24205</ID>
                  <Description>"Set Running Speed"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-04
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(RunSpeed,FSD-Win64-Shipping.exe,F3 0F 10 B8 20 0D 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+5EF8CA)

label(code)
label(return)

label(RunningSpeed)
registersymbol(RunningSpeed)

newmem:

code:
  movss xmm7,[rax+00000D20]
  push rcx
  mov rcx,[RunningSpeed]
  mov [rax+00000D20],rcx
  pop rcx
  jmp return

RunningSpeed:
  dq (float)435.0

RunSpeed:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(RunSpeed)

[DISABLE]

RunSpeed:
  db F3 0F 10 B8 20 0D 00 00

unregistersymbol(RunningSpeed)
unregistersymbol(RunSpeed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+5EF8CA

"FSD-Win64-Shipping.exe"+5EF8A0: 48 89 5C 24 08              -  mov [rsp+08],rbx
"FSD-Win64-Shipping.exe"+5EF8A5: 57                          -  push rdi
"FSD-Win64-Shipping.exe"+5EF8A6: 48 83 EC 40                 -  sub rsp,40
"FSD-Win64-Shipping.exe"+5EF8AA: 0F 29 7C 24 20              -  movaps [rsp+20],xmm7
"FSD-Win64-Shipping.exe"+5EF8AF: 48 8B F9                    -  mov rdi,rcx
"FSD-Win64-Shipping.exe"+5EF8B2: E8 C9 D8 2B 01              -  call FSD-Win64-Shipping.exe+18AD180
"FSD-Win64-Shipping.exe"+5EF8B7: 48 8B 87 70 07 00 00        -  mov rax,[rdi+00000770]
"FSD-Win64-Shipping.exe"+5EF8BE: 0F 28 F8                    -  movaps xmm7,xmm0
"FSD-Win64-Shipping.exe"+5EF8C1: 80 B8 50 0E 00 00 00        -  cmp byte ptr [rax+00000E50],00
"FSD-Win64-Shipping.exe"+5EF8C8: 74 0A                       -  je FSD-Win64-Shipping.exe+5EF8D4
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+5EF8CA: F3 0F 10 B8 20 0D 00 00     -  movss xmm7,[rax+00000D20]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+5EF8D2: EB 56                       -  jmp FSD-Win64-Shipping.exe+5EF92A
"FSD-Win64-Shipping.exe"+5EF8D4: 48 8B 80 B8 0C 00 00        -  mov rax,[rax+00000CB8]
"FSD-Win64-Shipping.exe"+5EF8DB: 48 8B 88 78 02 00 00        -  mov rcx,[rax+00000278]
"FSD-Win64-Shipping.exe"+5EF8E2: 48 85 C9                    -  test rcx,rcx
"FSD-Win64-Shipping.exe"+5EF8E5: 74 43                       -  je FSD-Win64-Shipping.exe+5EF92A
"FSD-Win64-Shipping.exe"+5EF8E7: 48 8B 01                    -  mov rax,[rcx]
"FSD-Win64-Shipping.exe"+5EF8EA: FF 90 60 06 00 00           -  call qword ptr [rax+00000660]
"FSD-Win64-Shipping.exe"+5EF8F0: 84 C0                       -  test al,al
"FSD-Win64-Shipping.exe"+5EF8F2: 74 36                       -  je FSD-Win64-Shipping.exe+5EF92A
"FSD-Win64-Shipping.exe"+5EF8F4: 48 8B 87 70 07 00 00        -  mov rax,[rdi+00000770]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24206</ID>
                      <Description>"Run Speed"</Description>
                      <VariableType>Float</VariableType>
                      <Address>RunningSpeed</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1222</ID>
                  <Description>"No Weapon Spread (Can't be used with "Gunner-&gt;No Minigun Spread")"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-09-27
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MinigunAccuracy,FSD-Win64-Shipping.exe,F3 0F 11 83 44 02 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+795ADA)

label(code)
label(return)

newmem:
// Same as minigun but backwards
code:
  mov [rbx+00000244],(float)0.0
  jmp return

MinigunAccuracy:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(MinigunAccuracy)

[DISABLE]

MinigunAccuracy:
  db F3 0F 11 83 44 02 00 00

unregistersymbol(MinigunAccuracy)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+795ADA

"FSD-Win64-Shipping.exe"+795AA4: 4C 8B CF                 -  mov r9,rdi
"FSD-Win64-Shipping.exe"+795AA7: 48 89 44 24 20           -  mov [rsp+20],rax
"FSD-Win64-Shipping.exe"+795AAC: 49 8B CA                 -  mov rcx,r10
"FSD-Win64-Shipping.exe"+795AAF: E8 2C A9 09 01           -  call FSD-Win64-Shipping.exe+18303E0
"FSD-Win64-Shipping.exe"+795AB4: 48 8B 00                 -  mov rax,[rax]
"FSD-Win64-Shipping.exe"+795AB7: 48 89 83 E8 02 00 00     -  mov [rbx+000002E8],rax
"FSD-Win64-Shipping.exe"+795ABE: F3 0F 10 83 68 01 00 00  -  movss xmm0,[rbx+00000168]
"FSD-Win64-Shipping.exe"+795AC6: F3 0F 58 83 44 02 00 00  -  addss xmm0,[rbx+00000244]
"FSD-Win64-Shipping.exe"+795ACE: 48 8B 4D F0              -  mov rcx,[rbp-10]
"FSD-Win64-Shipping.exe"+795AD2: F3 0F 5D 83 B0 01 00 00  -  minss xmm0,[rbx+000001B0]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+795ADA: F3 0F 11 83 44 02 00 00  -  movss [rbx+00000244],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+795AE2: 48 85 C9                 -  test rcx,rcx
"FSD-Win64-Shipping.exe"+795AE5: 74 05                    -  je FSD-Win64-Shipping.exe+795AEC
"FSD-Win64-Shipping.exe"+795AE7: E8 24 BE 26 00           -  call FSD-Win64-Shipping.exe+A01910
"FSD-Win64-Shipping.exe"+795AEC: 48 8B 4D D0              -  mov rcx,[rbp-30]
"FSD-Win64-Shipping.exe"+795AF0: 48 85 C9                 -  test rcx,rcx
"FSD-Win64-Shipping.exe"+795AF3: 74 05                    -  je FSD-Win64-Shipping.exe+795AFA
"FSD-Win64-Shipping.exe"+795AF5: E8 16 BE 26 00           -  call FSD-Win64-Shipping.exe+A01910
"FSD-Win64-Shipping.exe"+795AFA: 48 8B 4D 00              -  mov rcx,[rbp+00]
"FSD-Win64-Shipping.exe"+795AFE: 48 33 CC                 -  xor rcx,rsp
"FSD-Win64-Shipping.exe"+795B01: E8 9A DE EC 01           -  call FSD-Win64-Shipping.exe+26639A0
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>2092</ID>
                  <Description>"Custom Firing Speed (0.0 = Fastest) (Doesn't Work On Minigun)"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InstantFiringSpeed,FSD-Win64-Shipping.exe,F3 0F 11 87 D8 06 00 00 0F) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7BCFA6)

label(code)
label(return)

label(FiringSpeed)
registersymbol(FiringSpeed)

newmem:

code:
  push eax
  mov eax,[FiringSpeed]
  mov [rdi+000006D8],eax
  pop eax
  jmp return

FiringSpeed:
  dq (float)0.0

InstantFiringSpeed:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(InstantFiringSpeed)

[DISABLE]

InstantFiringSpeed:
  db F3 0F 11 87 D8 06 00 00

unregistersymbol(FiringSpeed)
unregistersymbol(InstantFiringSpeed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7BA326

"FSD-Win64-Shipping.exe"+7BA2F6: 48 8B 01                    -  mov rax,[rcx]
"FSD-Win64-Shipping.exe"+7BA2F9: FF 90 88 06 00 00           -  call qword ptr [rax+00000688]
"FSD-Win64-Shipping.exe"+7BA2FF: 84 C0                       -  test al,al
"FSD-Win64-Shipping.exe"+7BA301: 0F 84 7F 03 00 00           -  je FSD-Win64-Shipping.exe+7BA686
"FSD-Win64-Shipping.exe"+7BA307: 0F B6 87 22 07 00 00        -  movzx eax,byte ptr [rdi+00000722]
"FSD-Win64-Shipping.exe"+7BA30E: 3C 02                       -  cmp al,02
"FSD-Win64-Shipping.exe"+7BA310: 0F 85 92 00 00 00           -  jne FSD-Win64-Shipping.exe+7BA3A8
"FSD-Win64-Shipping.exe"+7BA316: F3 0F 10 87 D0 06 00 00     -  movss xmm0,[rdi+000006D0]
"FSD-Win64-Shipping.exe"+7BA31E: F3 41 0F 5C C0              -  subss xmm0,xmm8
"FSD-Win64-Shipping.exe"+7BA323: 0F 2F C7                    -  comiss xmm0,xmm7
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7BA326: F3 0F 11 87 D0 06 00 00     -  movss [rdi+000006D0],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7BA32E: 0F 87 32 02 00 00           -  ja FSD-Win64-Shipping.exe+7BA566
"FSD-Win64-Shipping.exe"+7BA334: 39 B7 A8 06 00 00           -  cmp [rdi+000006A8],esi
"FSD-Win64-Shipping.exe"+7BA33A: 75 46                       -  jne FSD-Win64-Shipping.exe+7BA382
"FSD-Win64-Shipping.exe"+7BA33C: 40 38 B7 DC 06 00 00        -  cmp [rdi+000006DC],sil
"FSD-Win64-Shipping.exe"+7BA343: 74 3D                       -  je FSD-Win64-Shipping.exe+7BA382
"FSD-Win64-Shipping.exe"+7BA345: 39 B7 A4 06 00 00           -  cmp [rdi+000006A4],esi
"FSD-Win64-Shipping.exe"+7BA34B: 7E 35                       -  jle FSD-Win64-Shipping.exe+7BA382
"FSD-Win64-Shipping.exe"+7BA34D: 40 38 B7 09 07 00 00        -  cmp [rdi+00000709],sil
"FSD-Win64-Shipping.exe"+7BA354: 0F 84 04 02 00 00           -  je FSD-Win64-Shipping.exe+7BA55E
"FSD-Win64-Shipping.exe"+7BA35A: 48 8B 8F B8 04 00 00        -  mov rcx,[rdi+000004B8]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1479</ID>
                      <Description>"Firing Speed"</Description>
                      <VariableType>Float</VariableType>
                      <Address>FiringSpeed</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>2134</ID>
                  <Description>"No Recoil (By SunBeam)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-04-03
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Recoil,FSD-Win64-Shipping.exe,48 89 5C 24 08 57 48 83 EC 30 F3 0F 10 05) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+598950)

label(code)
label(return)

newmem:

code:
  //mov [rsp+08],rbx
  ret
  jmp return

Recoil:
  jmp newmem
return:
registersymbol(Recoil)

[DISABLE]

Recoil:
  db 48 89 5C 24 08

unregistersymbol(Recoil)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+598950

"FSD-Win64-Shipping.exe"+598946: CC                       -  int 3
"FSD-Win64-Shipping.exe"+598947: CC                       -  int 3
"FSD-Win64-Shipping.exe"+598948: CC                       -  int 3
"FSD-Win64-Shipping.exe"+598949: CC                       -  int 3
"FSD-Win64-Shipping.exe"+59894A: CC                       -  int 3
"FSD-Win64-Shipping.exe"+59894B: CC                       -  int 3
"FSD-Win64-Shipping.exe"+59894C: CC                       -  int 3
"FSD-Win64-Shipping.exe"+59894D: CC                       -  int 3
"FSD-Win64-Shipping.exe"+59894E: CC                       -  int 3
"FSD-Win64-Shipping.exe"+59894F: CC                       -  int 3
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+598950: 48 89 5C 24 08           -  mov [rsp+08],rbx
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+598955: 57                       -  push rdi
"FSD-Win64-Shipping.exe"+598956: 48 83 EC 30              -  sub rsp,30
"FSD-Win64-Shipping.exe"+59895A: F3 0F 10 05 E6 9E 12 02  -  movss xmm0,[FSD-Win64-Shipping.exe+26C2848]
"FSD-Win64-Shipping.exe"+598962: 48 8B DA                 -  mov rbx,rdx
"FSD-Win64-Shipping.exe"+598965: 0F 2F 42 1C              -  comiss xmm0,[rdx+1C]
"FSD-Win64-Shipping.exe"+598969: 48 8B F9                 -  mov rdi,rcx
"FSD-Win64-Shipping.exe"+59896C: 73 70                    -  jae FSD-Win64-Shipping.exe+5989DE
"FSD-Win64-Shipping.exe"+59896E: 0F 2F 42 24              -  comiss xmm0,[rdx+24]
"FSD-Win64-Shipping.exe"+598972: 73 6A                    -  jae FSD-Win64-Shipping.exe+5989DE
"FSD-Win64-Shipping.exe"+598974: 48 8D 54 24 20           -  lea rdx,[rsp+20]
}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1488</ID>
                  <Description>"Instant Ammo Resupply / Repair / Construction (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-11-27
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ResupplyProgress,FSD-Win64-Shipping.exe,F3 0F 11 83 DC 01 00 00 48 8D 54 24 50) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+5F91C0)

label(code)
label(return)

newmem:

code:
  mov [rbx+000001DC],(float)1.0
  jmp return

ResupplyProgress:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(ResupplyProgress)

[DISABLE]

ResupplyProgress:
  db F3 0F 11 83 DC 01 00 00

unregistersymbol(ResupplyProgress)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+5F91C0

"FSD-Win64-Shipping.exe"+5F919A: F3 0F 58 CE                    -  addss xmm1,xmm6
"FSD-Win64-Shipping.exe"+5F919E: F3 0F 59 CF                    -  mulss xmm1,xmm7
"FSD-Win64-Shipping.exe"+5F91A2: F3 0F 5E C8                    -  divss xmm1,xmm0
"FSD-Win64-Shipping.exe"+5F91A6: 0F 57 C0                       -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+5F91A9: F3 0F 58 CA                    -  addss xmm1,xmm2
"FSD-Win64-Shipping.exe"+5F91AD: 0F 2F C8                       -  comiss xmm1,xmm0
"FSD-Win64-Shipping.exe"+5F91B0: 72 07                          -  jb FSD-Win64-Shipping.exe+5F91B9
"FSD-Win64-Shipping.exe"+5F91B2: 0F 28 C1                       -  movaps xmm0,xmm1
"FSD-Win64-Shipping.exe"+5F91B5: F3 0F 5D C6                    -  minss xmm0,xmm6
"FSD-Win64-Shipping.exe"+5F91B9: 48 8D 8B 68 01 00 00           -  lea rcx,[rbx+00000168]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+5F91C0: F3 0F 11 83 DC 01 00 00        -  movss [rbx+000001DC],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+5F91C8: 48 8D 54 24 50                 -  lea rdx,[rsp+50]
"FSD-Win64-Shipping.exe"+5F91CD: F3 0F 11 83 E0 01 00 00        -  movss [rbx+000001E0],xmm0
"FSD-Win64-Shipping.exe"+5F91D5: F3 0F 11 44 24 50              -  movss [rsp+50],xmm0
"FSD-Win64-Shipping.exe"+5F91DB: E8 90 12 CE FF                 -  call FSD-Win64-Shipping.exe+2DA470
"FSD-Win64-Shipping.exe"+5F91E0: 0F 2F B3 DC 01 00 00           -  comiss xmm6,[rbx+000001DC]
"FSD-Win64-Shipping.exe"+5F91E7: 77 5D                          -  ja FSD-Win64-Shipping.exe+5F9246
"FSD-Win64-Shipping.exe"+5F91E9: 48 8B 8F 10 0C 00 00           -  mov rcx,[rdi+00000C10]
"FSD-Win64-Shipping.exe"+5F91F0: E8 DB E3 F9 FF                 -  call FSD-Win64-Shipping.exe+5975D0
"FSD-Win64-Shipping.exe"+5F91F5: EB 20                          -  jmp FSD-Win64-Shipping.exe+5F9217
"FSD-Win64-Shipping.exe"+5F91F7: 48 8B 8F 10 0C 00 00           -  mov rcx,[rdi+00000C10]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>2135</ID>
                  <Description>"Never Freeze From Cold (Host Only)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-13
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NoFreezeCharacter,FSD-Win64-Shipping.exe,C3 CC 40 53 48 83 EC 20 48 8B 81 40 0E 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+5D09D6)

label(code)
label(return)

newmem:

code:
  jmp FSD-Win64-Shipping.exe+5D0A3E
  //mov rax,[rcx+00000E40]
  jmp return

NoFreezeCharacter+08:
  jmp newmem
  nop
  nop
return:
registersymbol(NoFreezeCharacter)

[DISABLE]

NoFreezeCharacter+08:
  db 48 8B 81 40 0E 00 00

unregistersymbol(NoFreezeCharacter)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+5D09D6

"FSD-Win64-Shipping.exe"+5D09BA: 74 08                 -  je FSD-Win64-Shipping.exe+5D09C4
"FSD-Win64-Shipping.exe"+5D09BC: 48 8B CB              -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+5D09BF: E8 FC 4A FD FF        -  call FSD-Win64-Shipping.exe+5A54C0
"FSD-Win64-Shipping.exe"+5D09C4: 48 8B 5C 24 30        -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+5D09C9: 48 83 C4 20           -  add rsp,20
"FSD-Win64-Shipping.exe"+5D09CD: 5F                    -  pop rdi
"FSD-Win64-Shipping.exe"+5D09CE: C3                    -  ret 
"FSD-Win64-Shipping.exe"+5D09CF: CC                    -  int 3 
"FSD-Win64-Shipping.exe"+5D09D0: 40 53                 -  push rbx
"FSD-Win64-Shipping.exe"+5D09D2: 48 83 EC 20           -  sub rsp,20
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+5D09D6: 48 8B 81 40 0E 00 00  -  mov rax,[rcx+00000E40]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+5D09DD: 48 8B D9              -  mov rbx,rcx
"FSD-Win64-Shipping.exe"+5D09E0: 48 85 C0              -  test rax,rax
"FSD-Win64-Shipping.exe"+5D09E3: 74 09                 -  je FSD-Win64-Shipping.exe+5D09EE
"FSD-Win64-Shipping.exe"+5D09E5: 80 B8 F8 00 00 00 01  -  cmp byte ptr [rax+000000F8],01
"FSD-Win64-Shipping.exe"+5D09EC: 74 50                 -  je FSD-Win64-Shipping.exe+5D0A3E
"FSD-Win64-Shipping.exe"+5D09EE: 48 8B 89 A8 0C 00 00  -  mov rcx,[rcx+00000CA8]
"FSD-Win64-Shipping.exe"+5D09F5: 48 81 C1 F8 00 00 00  -  add rcx,000000F8
"FSD-Win64-Shipping.exe"+5D09FC: 48 8B 01              -  mov rax,[rcx]
"FSD-Win64-Shipping.exe"+5D09FF: FF 50 18              -  call qword ptr [rax+18]
"FSD-Win64-Shipping.exe"+5D0A02: 84 C0                 -  test al,al
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>2084</ID>
                  <Description>"Instant Unfreeze (Allowes Freezing, But Easier To Get Out)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NoPlayerFreeze,FSD-Win64-Shipping.exe,F3 0F 10 81 98 01 00 00 F3 0F 5E) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+9C0CE8)

label(code)
label(return)

newmem:

code:
  movss xmm0,[rcx+00000198]
  mov [rcx+00000198],(float)30.0
  jmp return

NoPlayerFreeze:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(NoPlayerFreeze)

[DISABLE]

NoPlayerFreeze:
  db F3 0F 10 81 98 01 00 00

unregistersymbol(NoPlayerFreeze)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+9C0CE8

"FSD-Win64-Shipping.exe"+9C0CCD: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+9C0CCE: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+9C0CCF: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+9C0CD0: 48 8B 42 20              -  mov rax,[rdx+20]
"FSD-Win64-Shipping.exe"+9C0CD4: 45 33 C9                 -  xor r9d,r9d
"FSD-Win64-Shipping.exe"+9C0CD7: 48 85 C0                 -  test rax,rax
"FSD-Win64-Shipping.exe"+9C0CDA: 0F 57 C9                 -  xorps xmm1,xmm1
"FSD-Win64-Shipping.exe"+9C0CDD: 41 0F 95 C1              -  setne r9l
"FSD-Win64-Shipping.exe"+9C0CE1: 4C 03 C8                 -  add r9,rax
"FSD-Win64-Shipping.exe"+9C0CE4: 4C 89 4A 20              -  mov [rdx+20],r9
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+9C0CE8: F3 0F 10 81 98 01 00 00  -  movss xmm0,[rcx+00000198]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+9C0CF0: F3 0F 5E 81 70 01 00 00  -  divss xmm0,[rcx+00000170]
"FSD-Win64-Shipping.exe"+9C0CF8: 0F 2F C1                 -  comiss xmm0,xmm1
"FSD-Win64-Shipping.exe"+9C0CFB: 73 06                    -  jae FSD-Win64-Shipping.exe+9C0D03
"FSD-Win64-Shipping.exe"+9C0CFD: F3 41 0F 11 08           -  movss [r8],xmm1
"FSD-Win64-Shipping.exe"+9C0D02: C3                       -  ret 
"FSD-Win64-Shipping.exe"+9C0D03: F3 0F 5D 05 2D 4B CA 01  -  minss xmm0,[FSD-Win64-Shipping.exe+2665838]
"FSD-Win64-Shipping.exe"+9C0D0B: F3 41 0F 11 00           -  movss [r8],xmm0
"FSD-Win64-Shipping.exe"+9C0D10: C3                       -  ret 
"FSD-Win64-Shipping.exe"+9C0D11: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+9C0D12: CC                       -  int 3 
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1798</ID>
                  <Description>"Unlimited Ammo"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24306</ID>
                      <Description>"Unlimited Magazine Ammo"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-12
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MagazineAmmo,FSD-Win64-Shipping.exe,89 86 B0 06 00 00 89 44 24 70 E8 7E) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7CB9C3)

label(code)
label(return)

newmem:

code:
  //mov [rsi+000006B0],eax
  add [rsi+000006B0],(int)0
  jmp return

MagazineAmmo:
  jmp newmem
  nop
return:
registersymbol(MagazineAmmo)

[DISABLE]

MagazineAmmo:
  db 89 86 B0 06 00 00

unregistersymbol(MagazineAmmo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7CB9C3

"FSD-Win64-Shipping.exe"+7CB993: 48 8B 15 56 3B DA 02     -  mov rdx,[FSD-Win64-Shipping.exe+356F4F0]
"FSD-Win64-Shipping.exe"+7CB99A: 41 B0 01                 -  mov r8l,01
"FSD-Win64-Shipping.exe"+7CB99D: 48 8B C8                 -  mov rcx,rax
"FSD-Win64-Shipping.exe"+7CB9A0: E8 5B 02 10 01           -  call FSD-Win64-Shipping.exe+18CBC00
"FSD-Win64-Shipping.exe"+7CB9A5: 8B 86 B0 06 00 00        -  mov eax,[rsi+000006B0]
"FSD-Win64-Shipping.exe"+7CB9AB: 48 8D 8E 88 04 00 00     -  lea rcx,[rsi+00000488]
"FSD-Win64-Shipping.exe"+7CB9B2: 2B 86 98 06 00 00        -  sub eax,[rsi+00000698]
"FSD-Win64-Shipping.exe"+7CB9B8: 48 8D 54 24 70           -  lea rdx,[rsp+70]
"FSD-Win64-Shipping.exe"+7CB9BD: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+7CB9BF: 41 0F 4E C6              -  cmovle eax,r14d
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7CB9C3: 89 86 B0 06 00 00        -  mov [rsi+000006B0],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7CB9C9: 89 44 24 70              -  mov [rsp+70],eax
"FSD-Win64-Shipping.exe"+7CB9CD: E8 7E 52 B1 FF           -  call FSD-Win64-Shipping.exe+2E0C50
"FSD-Win64-Shipping.exe"+7CB9D2: 8B 86 AC 06 00 00        -  mov eax,[rsi+000006AC]
"FSD-Win64-Shipping.exe"+7CB9D8: 48 8D 54 24 70           -  lea rdx,[rsp+70]
"FSD-Win64-Shipping.exe"+7CB9DD: 48 8B 8E C0 04 00 00     -  mov rcx,[rsi+000004C0]
"FSD-Win64-Shipping.exe"+7CB9E4: 03 86 B0 06 00 00        -  add eax,[rsi+000006B0]
"FSD-Win64-Shipping.exe"+7CB9EA: 48 81 C1 30 01 00 00     -  add rcx,00000130
"FSD-Win64-Shipping.exe"+7CB9F1: 89 44 24 70              -  mov [rsp+70],eax
"FSD-Win64-Shipping.exe"+7CB9F5: E8 56 52 B1 FF           -  call FSD-Win64-Shipping.exe+2E0C50
"FSD-Win64-Shipping.exe"+7CB9FA: 48 8B 8E C0 04 00 00     -  mov rcx,[rsi+000004C0]
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24284</ID>
                      <Description>"Unlimited Reserve Ammo"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-11
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,FSD-Win64-Shipping.exe,89 8B AC 06 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7A2A94)

label(code)
label(return)

newmem:

code:
  //mov [rbx+000006AC],ecx
  add [rbx+000006AC],(int)0
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 89 8B AC 06 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7A2A94

"FSD-Win64-Shipping.exe"+7A2A6A: 80 BB 2A 07 00 00 03  -  cmp byte ptr [rbx+0000072A],03
"FSD-Win64-Shipping.exe"+7A2A71: 0F 85 AA 00 00 00     -  jne FSD-Win64-Shipping.exe+7A2B21
"FSD-Win64-Shipping.exe"+7A2A77: 8B 8B AC 06 00 00     -  mov ecx,[rbx+000006AC]
"FSD-Win64-Shipping.exe"+7A2A7D: 8B 83 B0 06 00 00     -  mov eax,[rbx+000006B0]
"FSD-Win64-Shipping.exe"+7A2A83: 8B 93 94 06 00 00     -  mov edx,[rbx+00000694]
"FSD-Win64-Shipping.exe"+7A2A89: 2B D0                 -  sub edx,eax
"FSD-Win64-Shipping.exe"+7A2A8B: 3B CA                 -  cmp ecx,edx
"FSD-Win64-Shipping.exe"+7A2A8D: 0F 4E D1              -  cmovle edx,ecx
"FSD-Win64-Shipping.exe"+7A2A90: 2B CA                 -  sub ecx,edx
"FSD-Win64-Shipping.exe"+7A2A92: 03 C2                 -  add eax,edx
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7A2A94: 89 8B AC 06 00 00     -  mov [rbx+000006AC],ecx
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7A2A9A: 48 8D 54 24 30        -  lea rdx,[rsp+30]
"FSD-Win64-Shipping.exe"+7A2A9F: 48 8D 8B 88 04 00 00  -  lea rcx,[rbx+00000488]
"FSD-Win64-Shipping.exe"+7A2AA6: 89 83 B0 06 00 00     -  mov [rbx+000006B0],eax
"FSD-Win64-Shipping.exe"+7A2AAC: 89 44 24 30           -  mov [rsp+30],eax
"FSD-Win64-Shipping.exe"+7A2AB0: E8 2B E1 B3 FF        -  call FSD-Win64-Shipping.exe+2E0BE0
"FSD-Win64-Shipping.exe"+7A2AB5: 48 8B 8B C0 04 00 00  -  mov rcx,[rbx+000004C0]
"FSD-Win64-Shipping.exe"+7A2ABC: 48 8D 54 24 30        -  lea rdx,[rsp+30]
"FSD-Win64-Shipping.exe"+7A2AC1: 8B 83 AC 06 00 00     -  mov eax,[rbx+000006AC]
"FSD-Win64-Shipping.exe"+7A2AC7: 48 81 C1 20 01 00 00  -  add rcx,00000120
"FSD-Win64-Shipping.exe"+7A2ACE: 89 44 24 30           -  mov [rsp+30],eax
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24301</ID>
                      <Description>"Unlimited Minigun Ammo"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-12
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MinigunAmmo,FSD-Win64-Shipping.exe,89 86 B0 06 00 00 89 44 24 70 E8 C3) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7CC27E)

label(code)
label(return)

newmem:

code:
  //mov [rsi+000006B0],eax
  add [rsi+000006B0],(int)0
  jmp return

MinigunAmmo:
  jmp newmem
  nop
return:
registersymbol(MinigunAmmo)

[DISABLE]

MinigunAmmo:
  db 89 86 B0 06 00 00

unregistersymbol(MinigunAmmo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7CC27E

"FSD-Win64-Shipping.exe"+7CC24E: 48 8B 15 23 35 DA 02     -  mov rdx,[FSD-Win64-Shipping.exe+356F778]
"FSD-Win64-Shipping.exe"+7CC255: 41 B0 01                 -  mov r8l,01
"FSD-Win64-Shipping.exe"+7CC258: 48 8B C8                 -  mov rcx,rax
"FSD-Win64-Shipping.exe"+7CC25B: E8 A0 F9 0F 01           -  call FSD-Win64-Shipping.exe+18CBC00
"FSD-Win64-Shipping.exe"+7CC260: 8B 86 B0 06 00 00        -  mov eax,[rsi+000006B0]
"FSD-Win64-Shipping.exe"+7CC266: 48 8D 8E 88 04 00 00     -  lea rcx,[rsi+00000488]
"FSD-Win64-Shipping.exe"+7CC26D: 2B 86 98 06 00 00        -  sub eax,[rsi+00000698]
"FSD-Win64-Shipping.exe"+7CC273: 48 8D 54 24 70           -  lea rdx,[rsp+70]
"FSD-Win64-Shipping.exe"+7CC278: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+7CC27A: 41 0F 4E C6              -  cmovle eax,r14d
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7CC27E: 89 86 B0 06 00 00        -  mov [rsi+000006B0],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7CC284: 89 44 24 70              -  mov [rsp+70],eax
"FSD-Win64-Shipping.exe"+7CC288: E8 C3 49 B1 FF           -  call FSD-Win64-Shipping.exe+2E0C50
"FSD-Win64-Shipping.exe"+7CC28D: 8B 86 B0 06 00 00        -  mov eax,[rsi+000006B0]
"FSD-Win64-Shipping.exe"+7CC293: 48 8D 54 24 70           -  lea rdx,[rsp+70]
"FSD-Win64-Shipping.exe"+7CC298: 48 8B 8E C0 04 00 00     -  mov rcx,[rsi+000004C0]
"FSD-Win64-Shipping.exe"+7CC29F: 03 86 AC 06 00 00        -  add eax,[rsi+000006AC]
"FSD-Win64-Shipping.exe"+7CC2A5: 48 81 C1 30 01 00 00     -  add rcx,00000130
"FSD-Win64-Shipping.exe"+7CC2AC: 89 44 24 70              -  mov [rsp+70],eax
"FSD-Win64-Shipping.exe"+7CC2B0: E8 9B 49 B1 FF           -  call FSD-Win64-Shipping.exe+2E0C50
"FSD-Win64-Shipping.exe"+7CC2B5: 48 8B 8E C0 04 00 00     -  mov rcx,[rsi+000004C0]
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1105</ID>
                  <Description>"Unlimited Flares"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-02-10
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(FlareCount,FSD-Win64-Shipping.exe,89 8B 58 02 00 00 48 85) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+5C2611)

label(code)
label(return)

newmem:

code:
  add [rbx+00000258],(int)0
  jmp return

FlareCount:
  jmp newmem
  nop
return:
registersymbol(FlareCount)

[DISABLE]

FlareCount:
  db 89 8B 58 02 00 00

unregistersymbol(FlareCount)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+5C2611

"FSD-Win64-Shipping.exe"+5C25E9: 4C 39 04 C8           -  cmp [rax+rcx*8],r8
"FSD-Win64-Shipping.exe"+5C25ED: 74 02                 -  je FSD-Win64-Shipping.exe+5C25F1
"FSD-Win64-Shipping.exe"+5C25EF: 33 ED                 -  xor ebp,ebp
"FSD-Win64-Shipping.exe"+5C25F1: 80 BD 81 0E 00 00 00  -  cmp byte ptr [rbp+00000E81],00
"FSD-Win64-Shipping.exe"+5C25F8: 75 62                 -  jne FSD-Win64-Shipping.exe+5C265C
"FSD-Win64-Shipping.exe"+5C25FA: 48 8B CB              -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+5C25FD: E8 AE 29 39 00        -  call FSD-Win64-Shipping.exe+954FB0
"FSD-Win64-Shipping.exe"+5C2602: 8B 8B 58 02 00 00     -  mov ecx,[rbx+00000258]
"FSD-Win64-Shipping.exe"+5C2608: 48 8B 83 F0 00 00 00  -  mov rax,[rbx+000000F0]
"FSD-Win64-Shipping.exe"+5C260F: FF C9                 -  dec ecx
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+5C2611: 89 8B 58 02 00 00     -  mov [rbx+00000258],ecx
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+5C2617: 48 85 C0              -  test rax,rax
"FSD-Win64-Shipping.exe"+5C261A: 75 0E                 -  jne FSD-Win64-Shipping.exe+5C262A
"FSD-Win64-Shipping.exe"+5C261C: 48 8B CB              -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+5C261F: E8 9C A4 2B 01        -  call FSD-Win64-Shipping.exe+187CAC0
"FSD-Win64-Shipping.exe"+5C2624: 8B 8B 58 02 00 00     -  mov ecx,[rbx+00000258]
"FSD-Win64-Shipping.exe"+5C262A: 8B 80 28 05 00 00     -  mov eax,[rax+00000528]
"FSD-Win64-Shipping.exe"+5C2630: 48 8D 54 24 40        -  lea rdx,[rsp+40]
"FSD-Win64-Shipping.exe"+5C2635: 89 4C 24 40           -  mov [rsp+40],ecx
"FSD-Win64-Shipping.exe"+5C2639: 48 8D 8B 48 01 00 00  -  lea rcx,[rbx+00000148]
"FSD-Win64-Shipping.exe"+5C2640: 89 83 30 02 00 00     -  mov [rbx+00000230],eax
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>24207</ID>
                  <Description>"Instant Flare Cooldown"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-04
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(FlareSpeed,FSD-Win64-Shipping.exe,FF 8B 83 38 02 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+5C8E80)

label(code)
label(return)

newmem:

code:
  mov eax,[rbx+00000238]
  mov [rbx+00000238],(float)0.0
  jmp return

FlareSpeed+01:
  jmp newmem
  nop
return:
registersymbol(FlareSpeed)

[DISABLE]

FlareSpeed+01:
  db 8B 83 38 02 00 00

unregistersymbol(FlareSpeed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+5C8E80

"FSD-Win64-Shipping.exe"+5C8E4C: 48 8B CB              -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+5C8E4F: E8 AC 57 2E 01        -  call FSD-Win64-Shipping.exe+18AE600
"FSD-Win64-Shipping.exe"+5C8E54: 8B 8B 58 02 00 00     -  mov ecx,[rbx+00000258]
"FSD-Win64-Shipping.exe"+5C8E5A: 8B 80 28 05 00 00     -  mov eax,[rax+00000528]
"FSD-Win64-Shipping.exe"+5C8E60: 48 8D 54 24 40        -  lea rdx,[rsp+40]
"FSD-Win64-Shipping.exe"+5C8E65: 89 4C 24 40           -  mov [rsp+40],ecx
"FSD-Win64-Shipping.exe"+5C8E69: 48 8D 8B 48 01 00 00  -  lea rcx,[rbx+00000148]
"FSD-Win64-Shipping.exe"+5C8E70: 89 83 30 02 00 00     -  mov [rbx+00000230],eax
"FSD-Win64-Shipping.exe"+5C8E76: 48 89 5C 24 48        -  mov [rsp+48],rbx
"FSD-Win64-Shipping.exe"+5C8E7B: E8 40 72 D1 FF        -  call FSD-Win64-Shipping.exe+2E00C0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+5C8E80: 8B 83 38 02 00 00     -  mov eax,[rbx+00000238]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+5C8E86: 89 83 5C 02 00 00     -  mov [rbx+0000025C],eax
"FSD-Win64-Shipping.exe"+5C8E8C: 48 8D 8E 10 09 00 00  -  lea rcx,[rsi+00000910]
"FSD-Win64-Shipping.exe"+5C8E93: 33 D2                 -  xor edx,edx
"FSD-Win64-Shipping.exe"+5C8E95: E8 26 72 D1 FF        -  call FSD-Win64-Shipping.exe+2E00C0
"FSD-Win64-Shipping.exe"+5C8E9A: E9 2C 01 00 00        -  jmp FSD-Win64-Shipping.exe+5C8FCB
"FSD-Win64-Shipping.exe"+5C8E9F: 48 8B 9F E8 00 00 00  -  mov rbx,[rdi+000000E8]
"FSD-Win64-Shipping.exe"+5C8EA6: 33 ED                 -  xor ebp,ebp
"FSD-Win64-Shipping.exe"+5C8EA8: 48 85 DB              -  test rbx,rbx
"FSD-Win64-Shipping.exe"+5C8EAB: 74 23                 -  je FSD-Win64-Shipping.exe+5C8ED0
"FSD-Win64-Shipping.exe"+5C8EAD: E8 EE 4F 3F 00        -  call FSD-Win64-Shipping.exe+9BDEA0
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>24210</ID>
                  <Description>"Pickaxe Upgrades"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24208</ID>
                      <Description>"Instant Rock Mining (Will Not Disable Until End Of Mission)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-04
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(RockMiningRate,FSD-Win64-Shipping.exe,8B B7 08 05 00 00 F3) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+79610B)

label(code)
label(return)

newmem:

code:
  mov esi,[rdi+00000508]
  mov [rdi+00000508],(int)5
  jmp return

RockMiningRate:
  jmp newmem
  nop
return:
registersymbol(RockMiningRate)

[DISABLE]

RockMiningRate:
  db 8B B7 08 05 00 00

unregistersymbol(RockMiningRate)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+79610B

"FSD-Win64-Shipping.exe"+7960D9: 44 0F 44 E8              -  cmove r13d,eax
"FSD-Win64-Shipping.exe"+7960DD: 48 3B 0A                 -  cmp rcx,[rdx]
"FSD-Win64-Shipping.exe"+7960E0: 75 4B                    -  jne FSD-Win64-Shipping.exe+79612D
"FSD-Win64-Shipping.exe"+7960E2: 48 8B 87 90 03 00 00     -  mov rax,[rdi+00000390]
"FSD-Win64-Shipping.exe"+7960E9: 48 8B 98 F0 0C 00 00     -  mov rbx,[rax+00000CF0]
"FSD-Win64-Shipping.exe"+7960F0: E8 0B 54 EC FF           -  call FSD-Win64-Shipping.exe+65B500
"FSD-Win64-Shipping.exe"+7960F5: 48 8D 97 B8 04 00 00     -  lea rdx,[rdi+000004B8]
"FSD-Win64-Shipping.exe"+7960FC: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7960FF: 4C 8B 80 E0 00 00 00     -  mov r8,[rax+000000E0]
"FSD-Win64-Shipping.exe"+796106: E8 E5 75 FD FF           -  call FSD-Win64-Shipping.exe+76D6F0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+79610B: 8B B7 08 05 00 00        -  mov esi,[rdi+00000508]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+796111: F3 0F 59 C6              -  mulss xmm0,xmm6
"FSD-Win64-Shipping.exe"+796115: 41 03 F5                 -  add esi,r13d
"FSD-Win64-Shipping.exe"+796118: F3 0F 58 05 14 88 ED 01  -  addss xmm0,[FSD-Win64-Shipping.exe+266E934]
"FSD-Win64-Shipping.exe"+796120: F3 0F 2D C0              -  cvtss2si eax,xmm0
"FSD-Win64-Shipping.exe"+796124: D1 F8                    -  sar eax,1
"FSD-Win64-Shipping.exe"+796126: 03 F0                    -  add esi,eax
"FSD-Win64-Shipping.exe"+796128: E9 C8 00 00 00           -  jmp FSD-Win64-Shipping.exe+7961F5
"FSD-Win64-Shipping.exe"+79612D: 48 3B 4A 08              -  cmp rcx,[rdx+08]
"FSD-Win64-Shipping.exe"+796131: 75 48                    -  jne FSD-Win64-Shipping.exe+79617B
"FSD-Win64-Shipping.exe"+796133: 48 8B 87 90 03 00 00     -  mov rax,[rdi+00000390]
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24209</ID>
                      <Description>"Instant Dirt Mining  (Will Not Disable Until End Of Mission)"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-04
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(DirtMiningSpeed,FSD-Win64-Shipping.exe,8B B7 0C 05 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+79615C)

label(code)
label(return)

newmem:

code:
  mov esi,[rdi+0000050C]
  mov [rdi+0000050C],(int)5
  jmp return

DirtMiningSpeed:
  jmp newmem
  nop
return:
registersymbol(DirtMiningSpeed)

[DISABLE]

DirtMiningSpeed:
  db 8B B7 0C 05 00 00

unregistersymbol(DirtMiningSpeed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+79615C

"FSD-Win64-Shipping.exe"+796128: E9 C8 00 00 00           -  jmp FSD-Win64-Shipping.exe+7961F5
"FSD-Win64-Shipping.exe"+79612D: 48 3B 4A 08              -  cmp rcx,[rdx+08]
"FSD-Win64-Shipping.exe"+796131: 75 48                    -  jne FSD-Win64-Shipping.exe+79617B
"FSD-Win64-Shipping.exe"+796133: 48 8B 87 90 03 00 00     -  mov rax,[rdi+00000390]
"FSD-Win64-Shipping.exe"+79613A: 48 8B 98 F0 0C 00 00     -  mov rbx,[rax+00000CF0]
"FSD-Win64-Shipping.exe"+796141: E8 BA 53 EC FF           -  call FSD-Win64-Shipping.exe+65B500
"FSD-Win64-Shipping.exe"+796146: 48 8D 97 BC 04 00 00     -  lea rdx,[rdi+000004BC]
"FSD-Win64-Shipping.exe"+79614D: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+796150: 4C 8B 80 E8 00 00 00     -  mov r8,[rax+000000E8]
"FSD-Win64-Shipping.exe"+796157: E8 94 75 FD FF           -  call FSD-Win64-Shipping.exe+76D6F0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+79615C: 8B B7 0C 05 00 00        -  mov esi,[rdi+0000050C]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+796162: F3 0F 59 C6              -  mulss xmm0,xmm6
"FSD-Win64-Shipping.exe"+796166: 41 03 F5                 -  add esi,r13d
"FSD-Win64-Shipping.exe"+796169: F3 0F 58 05 C3 87 ED 01  -  addss xmm0,[FSD-Win64-Shipping.exe+266E934]
"FSD-Win64-Shipping.exe"+796171: F3 0F 2D C0              -  cvtss2si eax,xmm0
"FSD-Win64-Shipping.exe"+796175: D1 F8                    -  sar eax,1
"FSD-Win64-Shipping.exe"+796177: 03 F0                    -  add esi,eax
"FSD-Win64-Shipping.exe"+796179: EB 7A                    -  jmp FSD-Win64-Shipping.exe+7961F5
"FSD-Win64-Shipping.exe"+79617B: 44 38 B7 25 07 00 00     -  cmp [rdi+00000725],r14l
"FSD-Win64-Shipping.exe"+796182: 74 0D                    -  je FSD-Win64-Shipping.exe+796191
"FSD-Win64-Shipping.exe"+796184: F6 41 30 04              -  test byte ptr [rcx+30],04
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1985</ID>
                      <Description>"Instant Power Attack"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InstantPowerAttack,FSD-Win64-Shipping.exe,F3 0F 11 97 AC 04 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7C1095)

label(code)
label(return)

newmem:

code:
  mov [rdi+000004AC],(float)0.0
  jmp return

InstantPowerAttack:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(InstantPowerAttack)

[DISABLE]

InstantPowerAttack:
  db F3 0F 11 97 AC 04 00 00

unregistersymbol(InstantPowerAttack)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7C1095

"FSD-Win64-Shipping.exe"+7C1064: E8 A7 96 E9 FF           -  call FSD-Win64-Shipping.exe+65A710
"FSD-Win64-Shipping.exe"+7C1069: 48 8D 97 B4 04 00 00     -  lea rdx,[rdi+000004B4]
"FSD-Win64-Shipping.exe"+7C1070: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+7C1073: 4C 8B 80 F8 00 00 00     -  mov r8,[rax+000000F8]
"FSD-Win64-Shipping.exe"+7C107A: E8 21 A3 FA FF           -  call FSD-Win64-Shipping.exe+76B3A0
"FSD-Win64-Shipping.exe"+7C107F: F3 0F 10 8F AC 04 00 00  -  movss xmm1,[rdi+000004AC]
"FSD-Win64-Shipping.exe"+7C1087: 0F 2F CE                 -  comiss xmm1,xmm6
"FSD-Win64-Shipping.exe"+7C108A: F3 0F 59 C7              -  mulss xmm0,xmm7
"FSD-Win64-Shipping.exe"+7C108E: 0F 28 D1                 -  movaps xmm2,xmm1
"FSD-Win64-Shipping.exe"+7C1091: F3 0F 5C D0              -  subss xmm2,xmm0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7C1095: F3 0F 11 97 AC 04 00 00  -  movss [rdi+000004AC],xmm2
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7C109D: 76 11                    -  jna FSD-Win64-Shipping.exe+7C10B0
"FSD-Win64-Shipping.exe"+7C109F: 0F 2F D6                 -  comiss xmm2,xmm6
"FSD-Win64-Shipping.exe"+7C10A2: 77 0C                    -  ja FSD-Win64-Shipping.exe+7C10B0
"FSD-Win64-Shipping.exe"+7C10A4: 48 8B 8F 90 03 00 00     -  mov rcx,[rdi+00000390]
"FSD-Win64-Shipping.exe"+7C10AB: E8 F0 A5 DF FF           -  call FSD-Win64-Shipping.exe+5BB6A0
"FSD-Win64-Shipping.exe"+7C10B0: 40 84 F6                 -  test sil,sil
"FSD-Win64-Shipping.exe"+7C10B3: 74 43                    -  je FSD-Win64-Shipping.exe+7C10F8
"FSD-Win64-Shipping.exe"+7C10B5: F3 0F 10 87 AC 04 00 00  -  movss xmm0,[rdi+000004AC]
"FSD-Win64-Shipping.exe"+7C10BD: F3 0F 5E 87 A8 04 00 00  -  divss xmm0,[rdi+000004A8]
"FSD-Win64-Shipping.exe"+7C10C5: F3 0F 10 15 6B 47 EA 01  -  movss xmm2,[FSD-Win64-Shipping.exe+2665838]
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1645</ID>
                      <Description>"Pickaxe Destruction Amount (Recommended: 1.0 - 5.0) (Host Required) (by Teto)"</Description>
                      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-12-31
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(PickaxeDestructionSize,FSD-Win64-Shipping.exe,F3 0F 10 4A 78 8B) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6215D3)

label(code)
label(return)

label(DestructionAmount)
registersymbol(DestructionAmount)

newmem:

code:
  movss xmm1,[rdx+78]
  mulss xmm1,[DestructionAmount]
  jmp return

DestructionAmount:
  dq (float)5.0

PickaxeDestructionSize:
  jmp newmem
return:
registersymbol(PickaxeDestructionSize)

[DISABLE]

PickaxeDestructionSize:
  db F3 0F 10 4A 78

unregistersymbol(DestructionAmount)
unregistersymbol(PickaxeDestructionSize)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6215D3

"FSD-Win64-Shipping.exe"+62159E: E8 0D BA FF FF           -  call FSD-Win64-Shipping.exe+61CFB0
"FSD-Win64-Shipping.exe"+6215A3: 48 8B 84 24 98 00 00 00  -  mov rax,[rsp+00000098]
"FSD-Win64-Shipping.exe"+6215AB: 48 63 8C 24 90 00 00 00  -  movsxd  rcx,dword ptr [rsp+00000090]
"FSD-Win64-Shipping.exe"+6215B3: F3 0F 10 0D B5 AC 0F 02  -  movss xmm1,[FSD-Win64-Shipping.exe+271C270]
"FSD-Win64-Shipping.exe"+6215BB: F3 0F 11 00              -  movss [rax],xmm0
"FSD-Win64-Shipping.exe"+6215BF: 48 8B 86 B8 03 00 00     -  mov rax,[rsi+000003B8]
"FSD-Win64-Shipping.exe"+6215C6: 48 8B 40 30              -  mov rax,[rax+30]
"FSD-Win64-Shipping.exe"+6215CA: 48 8B 14 C8              -  mov rdx,[rax+rcx*8]
"FSD-Win64-Shipping.exe"+6215CE: 48 85 D2                 -  test rdx,rdx
"FSD-Win64-Shipping.exe"+6215D1: 74 05                    -  je FSD-Win64-Shipping.exe+6215D8
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6215D3: F3 0F 10 4A 78           -  movss xmm1,[rdx+78]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6215D8: 8B 43 08                 -  mov eax,[rbx+08]
"FSD-Win64-Shipping.exe"+6215DB: F2 0F 10 03              -  movsd xmm0,[rbx]
"FSD-Win64-Shipping.exe"+6215DF: 89 44 24 3C              -  mov [rsp+3C],eax
"FSD-Win64-Shipping.exe"+6215E3: 8B 47 08                 -  mov eax,[rdi+08]
"FSD-Win64-Shipping.exe"+6215E6: 89 44 24 48              -  mov [rsp+48],eax
"FSD-Win64-Shipping.exe"+6215EA: 8B 86 50 52 00 00        -  mov eax,[rsi+00005250]
"FSD-Win64-Shipping.exe"+6215F0: 89 44 24 30              -  mov [rsp+30],eax
"FSD-Win64-Shipping.exe"+6215F4: FF C0                    -  inc eax
"FSD-Win64-Shipping.exe"+6215F6: 89 86 50 52 00 00        -  mov [rsi+00005250],eax
"FSD-Win64-Shipping.exe"+6215FC: F2 0F 11 44 24 34        -  movsd [rsp+34],xmm0
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1641</ID>
                          <Description>"Destruction Amount"</Description>
                          <VariableType>Float</VariableType>
                          <Address>DestructionAmount</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1982</ID>
                  <Description>"Unlimited Grenades (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-29
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnlimitedGrenades,FSD-Win64-Shipping.exe,89 87 5C 04 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7F40B4)

label(code)
label(return)

newmem:

code:
  add [rdi+0000045C],(int)0
  jmp return

UnlimitedGrenades:
  jmp newmem
  nop
return:
registersymbol(UnlimitedGrenades)

[DISABLE]

UnlimitedGrenades:
  db 89 87 5C 04 00 00

unregistersymbol(UnlimitedGrenades)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7F40B4

"FSD-Win64-Shipping.exe"+7F4078: 8B 87 5C 04 00 00           -  mov eax,[rdi+0000045C]
"FSD-Win64-Shipping.exe"+7F407E: 85 C0                       -  test eax,eax
"FSD-Win64-Shipping.exe"+7F4080: 0F 8E DD 03 00 00           -  jng FSD-Win64-Shipping.exe+7F4463
"FSD-Win64-Shipping.exe"+7F4086: 48 89 9C 24 38 01 00 00     -  mov [rsp+00000138],rbx
"FSD-Win64-Shipping.exe"+7F408E: FF C8                       -  dec eax
"FSD-Win64-Shipping.exe"+7F4090: 48 89 B4 24 40 01 00 00     -  mov [rsp+00000140],rsi
"FSD-Win64-Shipping.exe"+7F4098: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7F409B: 0F 29 B4 24 10 01 00 00     -  movaps [rsp+00000110],xmm6
"FSD-Win64-Shipping.exe"+7F40A3: 0F 29 BC 24 00 01 00 00     -  movaps [rsp+00000100],xmm7
"FSD-Win64-Shipping.exe"+7F40AB: 44 0F 29 84 24 F0 00 00 00  -  movaps [rsp+000000F0],xmm8
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7F40B4: 89 87 5C 04 00 00           -  mov [rdi+0000045C],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7F40BA: E8 81 4F FF FF              -  call FSD-Win64-Shipping.exe+7E9040
"FSD-Win64-Shipping.exe"+7F40BF: 48 8B 07                    -  mov rax,[rdi]
"FSD-Win64-Shipping.exe"+7F40C2: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+7F40C5: FF 90 C0 05 00 00           -  call qword ptr [rax+000005C0]
"FSD-Win64-Shipping.exe"+7F40CB: 48 8B 87 90 03 00 00        -  mov rax,[rdi+00000390]
"FSD-Win64-Shipping.exe"+7F40D2: 48 8B 98 58 01 00 00        -  mov rbx,[rax+00000158]
"FSD-Win64-Shipping.exe"+7F40D9: 48 85 DB                    -  test rbx,rbx
"FSD-Win64-Shipping.exe"+7F40DC: 74 59                       -  je FSD-Win64-Shipping.exe+7F4137
"FSD-Win64-Shipping.exe"+7F40DE: 0F 10 8B 90 01 00 00        -  movups xmm1,[rbx+00000190]
"FSD-Win64-Shipping.exe"+7F40E5: 0F 28 C1                    -  movaps xmm0,xmm1
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1296</ID>
                  <Description>"Unlimited O2 (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-10-11
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(OxygenLevels,FSD-Win64-Shipping.exe,F3 0F 11 B3 1C 01 00 00 0F B6) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+74B533)

label(code)
label(return)

newmem:

code:
  mov [rbx+0000011C],(float)100
  jmp return

OxygenLevels:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(OxygenLevels)

[DISABLE]

OxygenLevels:
  db F3 0F 11 B3 1C 01 00 00

unregistersymbol(OxygenLevels)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+74B533

"FSD-Win64-Shipping.exe"+74B504: F3 0F 59 B3 20 01 00 00  -  mulss xmm6,[rbx+00000120]
"FSD-Win64-Shipping.exe"+74B50C: F3 0F 58 F2              -  addss xmm6,xmm2
"FSD-Win64-Shipping.exe"+74B510: F3 0F 5D 35 E8 39 FE 01  -  minss xmm6,[FSD-Win64-Shipping.exe+272EF00]
"FSD-Win64-Shipping.exe"+74B518: EB 16                    -  jmp FSD-Win64-Shipping.exe+74B530
"FSD-Win64-Shipping.exe"+74B51A: 0F 28 C6                 -  movaps xmm0,xmm6
"FSD-Win64-Shipping.exe"+74B51D: 0F 28 F2                 -  movaps xmm6,xmm2
"FSD-Win64-Shipping.exe"+74B520: F3 0F 59 83 30 01 00 00  -  mulss xmm0,[rbx+00000130]
"FSD-Win64-Shipping.exe"+74B528: F3 0F 5C F0              -  subss xmm6,xmm0
"FSD-Win64-Shipping.exe"+74B52C: F3 0F 5F F1              -  maxss xmm6,xmm1
"FSD-Win64-Shipping.exe"+74B530: 0F 2F F1                 -  comiss xmm6,xmm1
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+74B533: F3 0F 11 B3 1C 01 00 00  -  movss [rbx+0000011C],xmm6
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+74B53B: 0F B6 83 48 01 00 00     -  movzx eax,byte ptr [rbx+00000148]
"FSD-Win64-Shipping.exe"+74B542: 77 59                    -  ja FSD-Win64-Shipping.exe+74B59D
"FSD-Win64-Shipping.exe"+74B544: 84 C0                    -  test al,al
"FSD-Win64-Shipping.exe"+74B546: 0F 85 A4 00 00 00        -  jne FSD-Win64-Shipping.exe+74B5F0
"FSD-Win64-Shipping.exe"+74B54C: 48 8B B3 E8 00 00 00     -  mov rsi,[rbx+000000E8]
"FSD-Win64-Shipping.exe"+74B553: C6 83 48 01 00 00 01     -  mov byte ptr [rbx+00000148],01
"FSD-Win64-Shipping.exe"+74B55A: 48 85 F6                 -  test rsi,rsi
"FSD-Win64-Shipping.exe"+74B55D: 74 26                    -  je FSD-Win64-Shipping.exe+74B585
"FSD-Win64-Shipping.exe"+74B55F: E8 3C 15 24 00           -  call FSD-Win64-Shipping.exe+98CAA0
"FSD-Win64-Shipping.exe"+74B564: 48 8B 56 10              -  mov rdx,[rsi+10]
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>103</ID>
              <Description>"Mining (Activate Item, Set Value, Then Deposit At Least 1 Unit Into Molly) (Host Required)"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>994</ID>
                  <Description>"Collect Eggs / Aquarq / Boolo Caps / Fossils / Apoca Bloom (Set Value Desired)"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-08-12
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(CollectingMineralsAmount,FSD-Win64-Shipping.exe,41 89 90 90 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+733811)

label(code)
label(return)

label(eggsCollected)
registerSymbol(eggsCollected)

newmem:

code:
  push rax
  mov eax,[eggsCollected]
  mov [r8+00000190],eax
  pop rax
  jmp return

  align 10 CC // align the memory to be assebled.
  eggsCollected:
    dd (int)5

CollectingMineralsAmount:
  jmp newmem
  nop
  nop
return:
registersymbol(CollectingMineralsAmount)

[DISABLE]

CollectingMineralsAmount:
  db 41 89 90 90 01 00 00

unregistersymbol(CollectingMineralsAmount)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+733811

"FSD-Win64-Shipping.exe"+7337E6: 8B 89 90 01 00 00        -  mov ecx,[rcx+00000190]
"FSD-Win64-Shipping.exe"+7337EC: F3 0F 10 05 F8 12 06 02  -  movss xmm0,[FSD-Win64-Shipping.exe+2794AEC]
"FSD-Win64-Shipping.exe"+7337F4: 4C 89 44 24 48           -  mov [rsp+48],r8
"FSD-Win64-Shipping.exe"+7337F9: F3 0F 5C C2              -  subss xmm0,xmm2
"FSD-Win64-Shipping.exe"+7337FD: F3 0F 2D C0              -  cvtss2si eax,xmm0
"FSD-Win64-Shipping.exe"+733801: D1 F8                    -  sar eax,1
"FSD-Win64-Shipping.exe"+733803: 2B C8                    -  sub ecx,eax
"FSD-Win64-Shipping.exe"+733805: 3B CA                    -  cmp ecx,edx
"FSD-Win64-Shipping.exe"+733807: 0F 4E D1                 -  cmovle edx,ecx
"FSD-Win64-Shipping.exe"+73380A: 49 8D 88 F8 00 00 00     -  lea rcx,[r8+000000F8]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+733811: 41 89 90 90 01 00 00     -  mov [r8+00000190],edx
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+733818: 48 8D 54 24 48           -  lea rdx,[rsp+48]
"FSD-Win64-Shipping.exe"+73381D: E8 DE 5A BA FF           -  call FSD-Win64-Shipping.exe+2D9300
"FSD-Win64-Shipping.exe"+733822: 48 83 C4 28              -  add rsp,28
"FSD-Win64-Shipping.exe"+733826: C3                       -  ret
"FSD-Win64-Shipping.exe"+733827: CC                       -  int 3
"FSD-Win64-Shipping.exe"+733828: CC                       -  int 3
"FSD-Win64-Shipping.exe"+733829: CC                       -  int 3
"FSD-Win64-Shipping.exe"+73382A: CC                       -  int 3
"FSD-Win64-Shipping.exe"+73382B: CC                       -  int 3
"FSD-Win64-Shipping.exe"+73382C: CC                       -  int 3
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>995</ID>
                      <Description>"Input Value"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>eggsCollected</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1229</ID>
                  <Description>"Collect Hollomite / Dystrum"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-09-27
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(HollomiteDystrumAmount,FSD-Win64-Shipping.exe,F3 0F 11 91 94 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+733863)

label(code)
label(return)

newmem:

code:
  mov [rcx+00000194],(float)200
  jmp return

HollomiteDystrumAmount:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(HollomiteDystrumAmount)

[DISABLE]

HollomiteDystrumAmount:
  db F3 0F 11 91 94 01 00 00

unregistersymbol(HollomiteDystrumAmount)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+733863

"FSD-Win64-Shipping.exe"+733834: 0F 57 C0                 -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+733837: 0F 2F D0                 -  comiss xmm2,xmm0
"FSD-Win64-Shipping.exe"+73383A: 76 3B                    -  jna FSD-Win64-Shipping.exe+733877
"FSD-Win64-Shipping.exe"+73383C: 48 8B 81 88 01 00 00     -  mov rax,[rcx+00000188]
"FSD-Win64-Shipping.exe"+733843: 48 39 42 58              -  cmp [rdx+58],rax
"FSD-Win64-Shipping.exe"+733847: 75 2E                    -  jne FSD-Win64-Shipping.exe+733877
"FSD-Win64-Shipping.exe"+733849: F3 0F 58 91 94 01 00 00  -  addss xmm2,[rcx+00000194]
"FSD-Win64-Shipping.exe"+733851: 48 89 4C 24 48           -  mov [rsp+48],rcx
"FSD-Win64-Shipping.exe"+733856: 48 8D 54 24 48           -  lea rdx,[rsp+48]
"FSD-Win64-Shipping.exe"+73385B: F3 0F 5D 91 90 01 00 00  -  minss xmm2,[rcx+00000190]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+733863: F3 0F 11 91 94 01 00 00  -  movss [rcx+00000194],xmm2
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+73386B: 48 81 C1 F8 00 00 00     -  add rcx,000000F8
"FSD-Win64-Shipping.exe"+733872: E8 89 5A BA FF           -  call FSD-Win64-Shipping.exe+2D9300
"FSD-Win64-Shipping.exe"+733877: 48 83 C4 28              -  add rsp,28
"FSD-Win64-Shipping.exe"+73387B: C3                       -  ret 
"FSD-Win64-Shipping.exe"+73387C: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+73387D: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+73387E: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+73387F: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+733880: 48 89 5C 24 10           -  mov [rsp+10],rbx
"FSD-Win64-Shipping.exe"+733885: 56                       -  push rsi
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1234</ID>
                  <Description>"Unlimited Mineral Drop In Mule (Doesn't work with "Set Minerals On Player")"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-09-29
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MineralsGoingToMolly,FSD-Win64-Shipping.exe,F3 0F 11 51 60) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+743FEC)

label(code)
label(return)

newmem:

code:
  add [rcx+60],0
  jmp return

MineralsGoingToMolly:
  jmp newmem
return:
registersymbol(MineralsGoingToMolly)

[DISABLE]

MineralsGoingToMolly:
  db F3 0F 11 51 60

unregistersymbol(MineralsGoingToMolly)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+743FEC

"FSD-Win64-Shipping.exe"+743FC9: 0F 2F F3                 -  comiss xmm6,xmm3
"FSD-Win64-Shipping.exe"+743FCC: 76 3D                    -  jna FSD-Win64-Shipping.exe+74400B
"FSD-Win64-Shipping.exe"+743FCE: 0F 28 C2                 -  movaps xmm0,xmm2
"FSD-Win64-Shipping.exe"+743FD1: F3 0F 5D C6              -  minss xmm0,xmm6
"FSD-Win64-Shipping.exe"+743FD5: F3 0F 5F C3              -  maxss xmm0,xmm3
"FSD-Win64-Shipping.exe"+743FD9: 0F 2F C3                 -  comiss xmm0,xmm3
"FSD-Win64-Shipping.exe"+743FDC: 76 22                    -  jna FSD-Win64-Shipping.exe+744000
"FSD-Win64-Shipping.exe"+743FDE: F3 0F 5C D0              -  subss xmm2,xmm0
"FSD-Win64-Shipping.exe"+743FE2: 48 89 4C 24 20           -  mov [rsp+20],rcx
"FSD-Win64-Shipping.exe"+743FE7: 48 8D 54 24 20           -  lea rdx,[rsp+20]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+743FEC: F3 0F 11 51 60           -  movss [rcx+60],xmm2
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+743FF1: 48 83 C1 28              -  add rcx,28
"FSD-Win64-Shipping.exe"+743FF5: F3 0F 11 54 24 28        -  movss [rsp+28],xmm2
"FSD-Win64-Shipping.exe"+743FFB: E8 00 53 B9 FF           -  call FSD-Win64-Shipping.exe+2D9300
"FSD-Win64-Shipping.exe"+744000: 0F 28 CE                 -  movaps xmm1,xmm6
"FSD-Win64-Shipping.exe"+744003: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+744006: E8 E5 84 FC FF           -  call FSD-Win64-Shipping.exe+70C4F0
"FSD-Win64-Shipping.exe"+74400B: 0F 28 C6                 -  movaps xmm0,xmm6
"FSD-Win64-Shipping.exe"+74400E: 0F 28 74 24 30           -  movaps xmm6,[rsp+30]
"FSD-Win64-Shipping.exe"+744013: 48 83 C4 40              -  add rsp,40
"FSD-Win64-Shipping.exe"+744017: 5B                       -  pop rbx
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1623</ID>
                  <Description>"Set Minerals On Player/Molly During Mineral Pickups/Drops (Works With BEER Minerals!)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1631</ID>
                      <Description>"Don't Use This When Dropping Hollomite, Morkite, or Dystrum Into Molly (It Won't Count Towards Victory)"</Description>
                      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                      <LastState Value="" RealAddress="00000000"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1628</ID>
                          <Description>"Actual Amount To Be Taken Home (Won't Show In Molly During Mission)"</Description>
                          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                          <LastState/>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-09-29
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ResourcesInMollyOne,FSD-Win64-Shipping.exe,F3 0F 11 41 68 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+70C54B)

label(code)
label(return)

label(currentResourceCollectedOne)
registerSymbol(currentResourceCollectedOne)

newmem:

code:
  push rax
  mov eax,[currentResourceCollectedOne]
  mov [rcx+68],eax
  pop rax
  jmp return

  align 10 CC // align the memory to be assebled.
  currentResourceCollectedOne:
    dd (float)50000

ResourcesInMollyOne:
  jmp newmem
return:
registersymbol(ResourcesInMollyOne)

[DISABLE]

ResourcesInMollyOne:
  db F3 0F 11 41 68

unregistersymbol(ResourcesInMollyOne)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+70C54B

"FSD-Win64-Shipping.exe"+70C521: 0F 2F F2              -  comiss xmm6,xmm2
"FSD-Win64-Shipping.exe"+70C524: 76 51                 -  jna FSD-Win64-Shipping.exe+70C577
"FSD-Win64-Shipping.exe"+70C526: 0F 28 CE              -  movaps xmm1,xmm6
"FSD-Win64-Shipping.exe"+70C529: 48 89 5C 24 20        -  mov [rsp+20],rbx
"FSD-Win64-Shipping.exe"+70C52E: F3 0F 58 49 60        -  addss xmm1,[rcx+60]
"FSD-Win64-Shipping.exe"+70C533: 0F 28 C6              -  movaps xmm0,xmm6
"FSD-Win64-Shipping.exe"+70C536: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+70C53B: F3 0F 58 41 68        -  addss xmm0,[rcx+68]
"FSD-Win64-Shipping.exe"+70C540: F3 0F 11 49 60        -  movss [rcx+60],xmm1
"FSD-Win64-Shipping.exe"+70C545: F3 0F 11 4C 24 28     -  movss [rsp+28],xmm1
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+70C54B: F3 0F 11 41 68        -  movss [rcx+68],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+70C550: 48 83 C1 28           -  add rcx,28
"FSD-Win64-Shipping.exe"+70C554: E8 A7 CD BC FF        -  call FSD-Win64-Shipping.exe+2D9300
"FSD-Win64-Shipping.exe"+70C559: 48 8D 4B 38           -  lea rcx,[rbx+38]
"FSD-Win64-Shipping.exe"+70C55D: F3 0F 11 74 24 28     -  movss [rsp+28],xmm6
"FSD-Win64-Shipping.exe"+70C563: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+70C568: 48 89 5C 24 20        -  mov [rsp+20],rbx
"FSD-Win64-Shipping.exe"+70C56D: E8 8E CD BC FF        -  call FSD-Win64-Shipping.exe+2D9300
"FSD-Win64-Shipping.exe"+70C572: F3 0F 10 4B 64        -  movss xmm1,[rbx+64]
"FSD-Win64-Shipping.exe"+70C577: 0F 2F 4B 60           -  comiss xmm1,[rbx+60]
"FSD-Win64-Shipping.exe"+70C57B: 77 16                 -  ja FSD-Win64-Shipping.exe+70C593
}
</AssemblerScript>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>1622</ID>
                              <Description>"Input Value"</Description>
                              <VariableType>Float</VariableType>
                              <Address>currentResourceCollectedOne</Address>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1621</ID>
                          <Description>"Actual Amount To Be Used In Mission (Won't Be Taken Home After Mission)"</Description>
                          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                          <LastState/>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2019-12-19
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ModMinerals,FSD-Win64-Shipping.exe,F3 0F 11 49 60 F3 0F 11 4C) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+74B6F0)

label(code)
label(return)

label(currentResourceCollectedTwo)
registerSymbol(currentResourceCollectedTwo)

newmem:

code:
  push rax
  mov eax,[currentResourceCollectedTwo]
  mov [rcx+60],eax
  pop rax
  jmp return

  align 10 CC // align the memory to be assebled.
  currentResourceCollectedTwo:
    dd (float)200

ModMinerals:
  jmp newmem
return:
registersymbol(ModMinerals)

[DISABLE]

ModMinerals:
  db F3 0F 11 49 60

unregistersymbol(currentResourceCollectedTwo)
unregistersymbol(ModMinerals)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+74B6F0

"FSD-Win64-Shipping.exe"+74B6CA: 0F 28 F0           -  movaps xmm6,xmm0
"FSD-Win64-Shipping.exe"+74B6CD: F3 0F 5F F2        -  maxss xmm6,xmm2
"FSD-Win64-Shipping.exe"+74B6D1: 0F 2F F2           -  comiss xmm6,xmm2
"FSD-Win64-Shipping.exe"+74B6D4: 76 51              -  jna FSD-Win64-Shipping.exe+74B727
"FSD-Win64-Shipping.exe"+74B6D6: 0F 28 CE           -  movaps xmm1,xmm6
"FSD-Win64-Shipping.exe"+74B6D9: 48 89 5C 24 20     -  mov [rsp+20],rbx
"FSD-Win64-Shipping.exe"+74B6DE: F3 0F 58 49 60     -  addss xmm1,[rcx+60]
"FSD-Win64-Shipping.exe"+74B6E3: 0F 28 C6           -  movaps xmm0,xmm6
"FSD-Win64-Shipping.exe"+74B6E6: 48 8D 54 24 20     -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+74B6EB: F3 0F 58 41 68     -  addss xmm0,[rcx+68]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+74B6F0: F3 0F 11 49 60     -  movss [rcx+60],xmm1
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+74B6F5: F3 0F 11 4C 24 28  -  movss [rsp+28],xmm1
"FSD-Win64-Shipping.exe"+74B6FB: E9 00 49 77 FF     -  jmp 7FF705030000
"FSD-Win64-Shipping.exe"+74B700: 48 83 C1 28        -  add rcx,28
"FSD-Win64-Shipping.exe"+74B704: E8 37 1A B9 FF     -  call FSD-Win64-Shipping.exe+2DD140
"FSD-Win64-Shipping.exe"+74B709: 48 8D 4B 38        -  lea rcx,[rbx+38]
"FSD-Win64-Shipping.exe"+74B70D: F3 0F 11 74 24 28  -  movss [rsp+28],xmm6
"FSD-Win64-Shipping.exe"+74B713: 48 8D 54 24 20     -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+74B718: 48 89 5C 24 20     -  mov [rsp+20],rbx
"FSD-Win64-Shipping.exe"+74B71D: E8 1E 1A B9 FF     -  call FSD-Win64-Shipping.exe+2DD140
"FSD-Win64-Shipping.exe"+74B722: F3 0F 10 4B 64     -  movss xmm1,[rbx+64]
}
</AssemblerScript>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>1629</ID>
                              <Description>"Input Value"</Description>
                              <VariableType>Float</VariableType>
                              <Address>currentResourceCollectedOne</Address>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24231</ID>
                  <Description>"Set Blank Matrix Cores - Keep Enabled Until After [1/3] Deep Dive Mission Complete"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-01
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(InfBlankCores,FSD-Win64-Shipping.exe,F3 0F 11 71 10 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+693FE8)

label(code)
label(return)

label(BlankCoreCount)
registersymbol(BlankCoreCount)

newmem:

code:
  push eax
  mov eax,[BlankCoreCount]
  mov [rcx+10],eax
  pop eax
  jmp return

BlankCoreCount:
  dq (float)9999.0

InfBlankCores:
  jmp newmem
return:
registersymbol(InfBlankCores)

[DISABLE]

InfBlankCores:
  db F3 0F 11 71 10

unregistersymbol(BlankCoreCount)
unregistersymbol(InfBlankCores)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+693FE8

"FSD-Win64-Shipping.exe"+693FB6: 48 8D 8B 30 08 00 00  -  lea rcx,[rbx+00000830]
"FSD-Win64-Shipping.exe"+693FBD: E8 6E 5A FF FF        -  call FSD-Win64-Shipping.exe+689A30
"FSD-Win64-Shipping.exe"+693FC2: 48 63 44 24 68        -  movsxd  rax,dword ptr [rsp+68]
"FSD-Win64-Shipping.exe"+693FC7: 48 6B C8 1C           -  imul rcx,rax,1C
"FSD-Win64-Shipping.exe"+693FCB: 48 03 8B 30 08 00 00  -  add rcx,[rbx+00000830]
"FSD-Win64-Shipping.exe"+693FD2: F3 0F 58 71 10        -  addss xmm6,[rcx+10]
"FSD-Win64-Shipping.exe"+693FD7: 0F 57 C0              -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+693FDA: 48 89 74 24 20        -  mov [rsp+20],rsi
"FSD-Win64-Shipping.exe"+693FDF: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+693FE4: F3 0F 5F F0           -  maxss xmm6,xmm0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+693FE8: F3 0F 11 71 10        -  movss [rcx+10],xmm6
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+693FED: 48 8D 8B F0 00 00 00  -  lea rcx,[rbx+000000F0]
"FSD-Win64-Shipping.exe"+693FF4: F3 0F 11 74 24 28     -  movss [rsp+28],xmm6
"FSD-Win64-Shipping.exe"+693FFA: E8 21 C3 C4 FF        -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+693FFF: 48 8B 7C 24 40        -  mov rdi,[rsp+40]
"FSD-Win64-Shipping.exe"+694004: 48 8B 6C 24 60        -  mov rbp,[rsp+60]
"FSD-Win64-Shipping.exe"+694009: 0F 28 74 24 30        -  movaps xmm6,[rsp+30]
"FSD-Win64-Shipping.exe"+69400E: 48 83 C4 48           -  add rsp,48
"FSD-Win64-Shipping.exe"+694012: 5E                    -  pop rsi
"FSD-Win64-Shipping.exe"+694013: 5B                    -  pop rbx
"FSD-Win64-Shipping.exe"+694014: C3                    -  ret 
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24232</ID>
                      <Description>"Blank Matrix Core Count"</Description>
                      <VariableType>Float</VariableType>
                      <Address>BlankCoreCount</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1285</ID>
              <Description>"Mission Specific (Host Required)"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1690</ID>
                  <Description>"Lock Mission Timer To 5 Second Remaining (Disable Before Mission Complete!)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2020-01-31
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Timer,FSD-Win64-Shipping.exe,F3 0F 11 96 50 07 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6C2858)

label(code)
label(myvar)
label(return)

newmem:

code:
  movss xmm2,[myvar]
  movss [rsi+00000750],xmm2
  jmp return

myvar:
  dd (float)6.0

Timer:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(Timer)

[DISABLE]

Timer:
  db F3 0F 11 96 50 07 00 00

unregistersymbol(Timer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6B669E

"FSD-Win64-Shipping.exe"+6B6675: E8 36 A6 F9 FF                 -  call FSD-Win64-Shipping.exe+650CB0
"FSD-Win64-Shipping.exe"+6B667A: F3 0F 10 93 28 07 00 00        -  movss xmm2,[rbx+00000728]
"FSD-Win64-Shipping.exe"+6B6682: 0F 57 F6                       -  xorps xmm6,xmm6
"FSD-Win64-Shipping.exe"+6B6685: 0F 2F D6                       -  comiss xmm2,xmm6
"FSD-Win64-Shipping.exe"+6B6688: 4C 8B F0                       -  mov r14,rax
"FSD-Win64-Shipping.exe"+6B668B: 72 77                          -  jb FSD-Win64-Shipping.exe+6B6704
"FSD-Win64-Shipping.exe"+6B668D: 8B 83 E8 06 00 00              -  mov eax,[rbx+000006E8]
"FSD-Win64-Shipping.exe"+6B6693: F3 0F 5C D7                    -  subss xmm2,xmm7
"FSD-Win64-Shipping.exe"+6B6697: F3 0F 5F D6                    -  maxss xmm2,xmm6
"FSD-Win64-Shipping.exe"+6B669B: 0F 28 CA                       -  movaps xmm1,xmm2
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6B669E: F3 0F 11 93 28 07 00 00        -  movss [rbx+00000728],xmm2
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6B66A6: F3 0F 58 CA                    -  addss xmm1,xmm2
"FSD-Win64-Shipping.exe"+6B66AA: F3 0F 5C 0D 82 1E F8 01        -  subss xmm1,[FSD-Win64-Shipping.exe+2638534]
"FSD-Win64-Shipping.exe"+6B66B2: F3 0F 2D C9                    -  cvtss2si ecx,xmm1
"FSD-Win64-Shipping.exe"+6B66B6: D1 F9                          -  sar ecx,1
"FSD-Win64-Shipping.exe"+6B66B8: 89 8B E8 06 00 00              -  mov [rbx+000006E8],ecx
"FSD-Win64-Shipping.exe"+6B66BE: 3B C8                          -  cmp ecx,eax
"FSD-Win64-Shipping.exe"+6B66C0: 74 1B                          -  je FSD-Win64-Shipping.exe+6B66DD
"FSD-Win64-Shipping.exe"+6B66C2: 89 4D 6F                       -  mov [rbp+6F],ecx
"FSD-Win64-Shipping.exe"+6B66C5: 48 8D 55 6F                    -  lea rdx,[rbp+6F]
"FSD-Win64-Shipping.exe"+6B66C9: 48 8D 8B F0 04 00 00           -  lea rcx,[rbx+000004F0]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>275</ID>
                  <Description>"Start Swarm (Mining Mission Only) (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-23
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(wavecontrol,FSD-Win64-Shipping.exe,F3 0F 5C C7 F3 0F 11 83 54 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+67F3E8)

label(code)
label(return)

newmem:

code: //original :   subss xmm0,xmm7
  xorps xmm0,xmm0
  movss [rbx+00000154],xmm0
  jmp return

wavecontrol:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(wavecontrol)

[DISABLE]

wavecontrol:
  db F3 0F 5C C7 F3 0F 11 83 54 01 00 00

unregistersymbol(wavecontrol)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+67F3E8

"FSD-Win64-Shipping.exe"+67F3B0: 4C 8B 7C 24 60           -  mov r15,[rsp+60]
"FSD-Win64-Shipping.exe"+67F3B5: E9 C1 01 00 00           -  jmp FSD-Win64-Shipping.exe+67F57B
"FSD-Win64-Shipping.exe"+67F3BA: 48 83 BB 48 01 00 00 00  -  cmp qword ptr [rbx+00000148],00
"FSD-Win64-Shipping.exe"+67F3C2: 0F 84 B3 01 00 00        -  je FSD-Win64-Shipping.exe+67F57B
"FSD-Win64-Shipping.exe"+67F3C8: 80 BB 50 01 00 00 00     -  cmp byte ptr [rbx+00000150],00
"FSD-Win64-Shipping.exe"+67F3CF: 0F 84 A6 01 00 00        -  je FSD-Win64-Shipping.exe+67F57B
"FSD-Win64-Shipping.exe"+67F3D5: 0F B6 83 30 01 00 00     -  movzx eax,byte ptr [rbx+00000130]
"FSD-Win64-Shipping.exe"+67F3DC: 84 C0                    -  test al,al
"FSD-Win64-Shipping.exe"+67F3DE: 74 14                    -  je FSD-Win64-Shipping.exe+67F3F4
"FSD-Win64-Shipping.exe"+67F3E0: F3 0F 10 83 54 01 00 00  -  movss xmm0,[rbx+00000154]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+67F3E8: F3 0F 5C C7              -  subss xmm0,xmm7
"FSD-Win64-Shipping.exe"+67F3EC: F3 0F 11 83 54 01 00 00  -  movss [rbx+00000154],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+67F3F4: 80 BB 31 01 00 00 00     -  cmp byte ptr [rbx+00000131],00
"FSD-Win64-Shipping.exe"+67F3FB: 74 14                    -  je FSD-Win64-Shipping.exe+67F411
"FSD-Win64-Shipping.exe"+67F3FD: F3 0F 10 83 58 01 00 00  -  movss xmm0,[rbx+00000158]
"FSD-Win64-Shipping.exe"+67F405: F3 0F 5C C7              -  subss xmm0,xmm7
"FSD-Win64-Shipping.exe"+67F409: F3 0F 11 83 58 01 00 00  -  movss [rbx+00000158],xmm0
"FSD-Win64-Shipping.exe"+67F411: 83 BB 00 01 00 00 00     -  cmp dword ptr [rbx+00000100],00
"FSD-Win64-Shipping.exe"+67F418: 0F 57 F6                 -  xorps xmm6,xmm6
"FSD-Win64-Shipping.exe"+67F41B: 0F 8E 12 01 00 00        -  jng FSD-Win64-Shipping.exe+67F533
"FSD-Win64-Shipping.exe"+67F421: 0F 2F B3 54 01 00 00     -  comiss xmm6,[rbx+00000154]
"FSD-Win64-Shipping.exe"+67F428: 0F 82 05 01 00 00        -  jb FSD-Win64-Shipping.exe+67F533
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>276</ID>
                  <Description>"Insta-Glyphid Spawns (Non-Point-Extraction) (Host Required)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-24
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(randspawn,FSD-Win64-Shipping.exe,F3 0F 5C C7 F3 0F 11 83 58 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+67F405)

label(code)
label(return)

newmem:

code:// original : subss xmm0,xmm7
  xorps xmm0,xmm0
  movss [rbx+00000158],xmm0
  jmp return

randspawn:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(randspawn)

[DISABLE]

randspawn:
  db F3 0F 5C C7 F3 0F 11 83 58 01 00 00

unregistersymbol(randspawn)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+67F405

"FSD-Win64-Shipping.exe"+67F3CF: 0F 84 A6 01 00 00        -  je FSD-Win64-Shipping.exe+67F57B
"FSD-Win64-Shipping.exe"+67F3D5: 0F B6 83 30 01 00 00     -  movzx eax,byte ptr [rbx+00000130]
"FSD-Win64-Shipping.exe"+67F3DC: 84 C0                    -  test al,al
"FSD-Win64-Shipping.exe"+67F3DE: 74 14                    -  je FSD-Win64-Shipping.exe+67F3F4
"FSD-Win64-Shipping.exe"+67F3E0: F3 0F 10 83 54 01 00 00  -  movss xmm0,[rbx+00000154]
"FSD-Win64-Shipping.exe"+67F3E8: F3 0F 5C C7              -  subss xmm0,xmm7
"FSD-Win64-Shipping.exe"+67F3EC: F3 0F 11 83 54 01 00 00  -  movss [rbx+00000154],xmm0
"FSD-Win64-Shipping.exe"+67F3F4: 80 BB 31 01 00 00 00     -  cmp byte ptr [rbx+00000131],00
"FSD-Win64-Shipping.exe"+67F3FB: 74 14                    -  je FSD-Win64-Shipping.exe+67F411
"FSD-Win64-Shipping.exe"+67F3FD: F3 0F 10 83 58 01 00 00  -  movss xmm0,[rbx+00000158]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+67F405: F3 0F 5C C7              -  subss xmm0,xmm7
"FSD-Win64-Shipping.exe"+67F409: F3 0F 11 83 58 01 00 00  -  movss [rbx+00000158],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+67F411: 83 BB 00 01 00 00 00     -  cmp dword ptr [rbx+00000100],00
"FSD-Win64-Shipping.exe"+67F418: 0F 57 F6                 -  xorps xmm6,xmm6
"FSD-Win64-Shipping.exe"+67F41B: 0F 8E 12 01 00 00        -  jng FSD-Win64-Shipping.exe+67F533
"FSD-Win64-Shipping.exe"+67F421: 0F 2F B3 54 01 00 00     -  comiss xmm6,[rbx+00000154]
"FSD-Win64-Shipping.exe"+67F428: 0F 82 05 01 00 00        -  jb FSD-Win64-Shipping.exe+67F533
"FSD-Win64-Shipping.exe"+67F42E: 84 C0                    -  test al,al
"FSD-Win64-Shipping.exe"+67F430: 0F 84 FD 00 00 00        -  je FSD-Win64-Shipping.exe+67F533
"FSD-Win64-Shipping.exe"+67F436: 4C 8D 83 F8 00 00 00     -  lea r8,[rbx+000000F8]
"FSD-Win64-Shipping.exe"+67F43D: 48 8B CB                 -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+67F440: 48 8D 94 24 80 00 00 00  -  lea rdx,[rsp+00000080]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>24211</ID>
                  <Description>"Never Spawn Swarms (Turning Off At The End Of Mission Will Spawn All Swarms At Once)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-05-04
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NeverSpawnEnemies,FSD-Win64-Shipping.exe,44 38 A7 30 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6814E5)

label(code)
label(return)

newmem:

code:
  //cmp [rdi+00000130],r12l
  jmp return

NeverSpawnEnemies:
  jmp newmem
  nop
  nop
return:
registersymbol(NeverSpawnEnemies)

[DISABLE]

NeverSpawnEnemies:
  db 44 38 A7 30 01 00 00

unregistersymbol(NeverSpawnEnemies)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6814E5

"FSD-Win64-Shipping.exe"+6814BE: 48 8D 0C 49              -  lea rcx,[rcx+rcx*2]
"FSD-Win64-Shipping.exe"+6814C2: F3 0F 10 44 C8 08        -  movss xmm0,[rax+rcx*8+08]
"FSD-Win64-Shipping.exe"+6814C8: F3 0F 5C C7              -  subss xmm0,xmm7
"FSD-Win64-Shipping.exe"+6814CC: F3 0F 11 44 C8 08        -  movss [rax+rcx*8+08],xmm0
"FSD-Win64-Shipping.exe"+6814D2: 48 8D 4D 68              -  lea rcx,[rbp+68]
"FSD-Win64-Shipping.exe"+6814D6: 8B 45 6C                 -  mov eax,[rbp+6C]
"FSD-Win64-Shipping.exe"+6814D9: F7 D0                    -  not eax
"FSD-Win64-Shipping.exe"+6814DB: 21 45 78                 -  and [rbp+78],eax
"FSD-Win64-Shipping.exe"+6814DE: E8 9D C0 BE FF           -  call FSD-Win64-Shipping.exe+26D580
"FSD-Win64-Shipping.exe"+6814E3: EB AB                    -  jmp FSD-Win64-Shipping.exe+681490
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6814E5: 44 38 A7 30 01 00 00     -  cmp [rdi+00000130],r12l
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6814EC: 0F 84 53 05 00 00        -  je FSD-Win64-Shipping.exe+681A45
"FSD-Win64-Shipping.exe"+6814F2: 44 8B AF 00 02 00 00     -  mov r13d,[rdi+00000200]
"FSD-Win64-Shipping.exe"+6814F9: 32 C9                    -  xor cl,cl
"FSD-Win64-Shipping.exe"+6814FB: 41 83 ED 01              -  sub r13d,01
"FSD-Win64-Shipping.exe"+6814FF: 88 8D 10 01 00 00        -  mov [rbp+00000110],cl
"FSD-Win64-Shipping.exe"+681505: 0F 88 3A 05 00 00        -  js FSD-Win64-Shipping.exe+681A45
"FSD-Win64-Shipping.exe"+68150B: 4D 63 F5                 -  movsxd  r14,r13d
"FSD-Win64-Shipping.exe"+68150E: 48 8D B7 F8 01 00 00     -  lea rsi,[rdi+000001F8]
"FSD-Win64-Shipping.exe"+681515: 0F 29 B4 24 D0 01 00 00  -  movaps [rsp+000001D0],xmm6
"FSD-Win64-Shipping.exe"+68151D: 0F 57 F6                 -  xorps xmm6,xmm6
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>335</ID>
                  <Description>"Calling Supply Pod Adds Nitra"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-03-30
  Author : Crissa

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(freesupply,FSD-Win64-Shipping.exe,F3 0F 5C C6 48 89 4C 24 20) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+761D51)

label(code)
label(return)

newmem:

code: //orginal : subss xmm0,xmm6 / mov [rsp+20],rcx
  addss xmm0,xmm6
  mov [rsp+20],rcx
  jmp return

freesupply:
  jmp newmem
  nop
  nop
  nop
  nop
return:
registersymbol(freesupply)

[DISABLE]

freesupply:
  db F3 0F 5C C6 48 89 4C 24 20

unregistersymbol(freesupply)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+761D51

"FSD-Win64-Shipping.exe"+761D2F: CC                          -  int 3 
"FSD-Win64-Shipping.exe"+761D30: 48 83 EC 48                 -  sub rsp,48
"FSD-Win64-Shipping.exe"+761D34: F3 0F 10 41 60              -  movss xmm0,[rcx+60]
"FSD-Win64-Shipping.exe"+761D39: 0F 29 74 24 30              -  movaps [rsp+30],xmm6
"FSD-Win64-Shipping.exe"+761D3E: 0F 28 F0                    -  movaps xmm6,xmm0
"FSD-Win64-Shipping.exe"+761D41: F3 0F 5D F1                 -  minss xmm6,xmm1
"FSD-Win64-Shipping.exe"+761D45: 0F 57 C9                    -  xorps xmm1,xmm1
"FSD-Win64-Shipping.exe"+761D48: F3 0F 5F F1                 -  maxss xmm6,xmm1
"FSD-Win64-Shipping.exe"+761D4C: 0F 2F F1                    -  comiss xmm6,xmm1
"FSD-Win64-Shipping.exe"+761D4F: 76 22                       -  jna FSD-Win64-Shipping.exe+761D73
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+761D51: F3 0F 5C C6                 -  subss xmm0,xmm6
"FSD-Win64-Shipping.exe"+761D55: 48 89 4C 24 20              -  mov [rsp+20],rcx
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+761D5A: 48 8D 54 24 20              -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+761D5F: F3 0F 11 41 60              -  movss [rcx+60],xmm0
"FSD-Win64-Shipping.exe"+761D64: 48 83 C1 28                 -  add rcx,28
"FSD-Win64-Shipping.exe"+761D68: F3 0F 11 44 24 28           -  movss [rsp+28],xmm0
"FSD-Win64-Shipping.exe"+761D6E: E8 5D DD B7 FF              -  call FSD-Win64-Shipping.exe+2DFAD0
"FSD-Win64-Shipping.exe"+761D73: 0F 28 C6                    -  movaps xmm0,xmm6
"FSD-Win64-Shipping.exe"+761D76: 0F 28 74 24 30              -  movaps xmm6,[rsp+30]
"FSD-Win64-Shipping.exe"+761D7B: 48 83 C4 48                 -  add rsp,48
"FSD-Win64-Shipping.exe"+761D7F: C3                          -  ret 
"FSD-Win64-Shipping.exe"+761D80: 48 89 5C 24 10              -  mov [rsp+10],rbx
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>2141</ID>
                  <Description>"Always Spawn Cargo Crate (Enable Before Mission Load) (Host Required) (by ya boi OmicronVega)"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2136</ID>
                      <Description>"LEAVE ENABLED UNTIL MISSION LOADS"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-27
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(SpawnCrate,FSD-Win64-Shipping.exe,72 21 48 8B 06) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+89B2FD)

label(code)
label(return)

newmem:

code:
  //jb FSD-Win64-Shipping.exe+89B320
  mov rax,[rsi]
  jmp return

SpawnCrate:
  jmp newmem
return:
registersymbol(SpawnCrate)

[DISABLE]

SpawnCrate:
  db 72 21 48 8B 06

unregistersymbol(SpawnCrate)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+89B2FD

"FSD-Win64-Shipping.exe"+89B2D1: 89 44 24 70                    -  mov [rsp+70],eax
"FSD-Win64-Shipping.exe"+89B2D5: F3 0F 10 74 24 70              -  movss xmm6,[rsp+70]
"FSD-Win64-Shipping.exe"+89B2DB: F3 0F 2C C6                    -  cvttss2si eax,xmm6
"FSD-Win64-Shipping.exe"+89B2DF: 66 0F 6E C0                    -  movd xmm0,eax
"FSD-Win64-Shipping.exe"+89B2E3: 48 8B 06                       -  mov rax,[rsi]
"FSD-Win64-Shipping.exe"+89B2E6: 0F 5B C0                       -  cvtdq2ps xmm0,xmm0
"FSD-Win64-Shipping.exe"+89B2E9: F3 0F 10 88 58 05 00 00        -  movss xmm1,[rax+00000558]
"FSD-Win64-Shipping.exe"+89B2F1: F3 0F 5C F0                    -  subss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2F5: E8 56 30 ED FF                 -  call FSD-Win64-Shipping.exe+76E350
"FSD-Win64-Shipping.exe"+89B2FA: 0F 2F F0                       -  comiss xmm6,xmm0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+89B2FD: 72 21                          -  jb FSD-Win64-Shipping.exe+89B320
"FSD-Win64-Shipping.exe"+89B2FF: 48 8B 06                       -  mov rax,[rsi]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+89B302: 48 3B 98 C8 03 00 00           -  cmp rbx,[rax+000003C8]
"FSD-Win64-Shipping.exe"+89B309: 74 15                          -  je FSD-Win64-Shipping.exe+89B320
"FSD-Win64-Shipping.exe"+89B30B: 85 FF                          -  test edi,edi
"FSD-Win64-Shipping.exe"+89B30D: 75 07                          -  jne FSD-Win64-Shipping.exe+89B316
"FSD-Win64-Shipping.exe"+89B30F: 45 84 ED                       -  test r13l,r13l
"FSD-Win64-Shipping.exe"+89B312: 75 0C                          -  jne FSD-Win64-Shipping.exe+89B320
"FSD-Win64-Shipping.exe"+89B314: EB 15                          -  jmp FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B316: 83 FF 01                       -  cmp edi,01
"FSD-Win64-Shipping.exe"+89B319: 75 10                          -  jne FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B31B: 45 84 E4                       -  test r12l,r12l
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2137</ID>
                      <Description>"LEAVE ENABLED UNTIL MISSION LOADS"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-27
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ChestOne,FSD-Win64-Shipping.exe,74 15 85 FF 75 07) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+89B309)

label(code)
label(return)

newmem:

code:
  //je FSD-Win64-Shipping.exe+89B320
  test edi,edi
  //jne FSD-Win64-Shipping.exe+89B316
  jmp return

ChestOne:
  jmp newmem
  nop
return:
registersymbol(ChestOne)

[DISABLE]

ChestOne:
  db 74 15 85 FF 75 07

unregistersymbol(ChestOne)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+89B309

"FSD-Win64-Shipping.exe"+89B2DF: 66 0F 6E C0                    -  movd xmm0,eax
"FSD-Win64-Shipping.exe"+89B2E3: 48 8B 06                       -  mov rax,[rsi]
"FSD-Win64-Shipping.exe"+89B2E6: 0F 5B C0                       -  cvtdq2ps xmm0,xmm0
"FSD-Win64-Shipping.exe"+89B2E9: F3 0F 10 88 58 05 00 00        -  movss xmm1,[rax+00000558]
"FSD-Win64-Shipping.exe"+89B2F1: F3 0F 5C F0                    -  subss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2F5: E8 56 30 ED FF                 -  call FSD-Win64-Shipping.exe+76E350
"FSD-Win64-Shipping.exe"+89B2FA: 0F 2F F0                       -  comiss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2FD: 72 21                          -  jb FSD-Win64-Shipping.exe+89B320
"FSD-Win64-Shipping.exe"+89B2FF: 48 8B 06                       -  mov rax,[rsi]
"FSD-Win64-Shipping.exe"+89B302: 48 3B 98 C8 03 00 00           -  cmp rbx,[rax+000003C8]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+89B309: 74 15                          -  je FSD-Win64-Shipping.exe+89B320
"FSD-Win64-Shipping.exe"+89B30B: 85 FF                          -  test edi,edi
"FSD-Win64-Shipping.exe"+89B30D: 75 07                          -  jne FSD-Win64-Shipping.exe+89B316
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+89B30F: 45 84 ED                       -  test r13l,r13l
"FSD-Win64-Shipping.exe"+89B312: 75 0C                          -  jne FSD-Win64-Shipping.exe+89B320
"FSD-Win64-Shipping.exe"+89B314: EB 15                          -  jmp FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B316: 83 FF 01                       -  cmp edi,01
"FSD-Win64-Shipping.exe"+89B319: 75 10                          -  jne FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B31B: 45 84 E4                       -  test r12l,r12l
"FSD-Win64-Shipping.exe"+89B31E: 74 0B                          -  je FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B320: 48 8B 16                       -  mov rdx,[rsi]
"FSD-Win64-Shipping.exe"+89B323: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+89B326: E8 35 33 EA FF                 -  call FSD-Win64-Shipping.exe+73E660
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2138</ID>
                      <Description>"LEAVE ENABLED UNTIL MISSION LOADS"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-27
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ChestTwo,FSD-Win64-Shipping.exe,75 0C EB 15 83 FF 01) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+89B312)

label(code)
label(return)

newmem:

code:
  //jne FSD-Win64-Shipping.exe+89B320
  //jmp FSD-Win64-Shipping.exe+89B32B
  cmp edi,01
  jmp return

ChestTwo:
  jmp newmem
  nop
  nop
return:
registersymbol(ChestTwo)

[DISABLE]

ChestTwo:
  db 75 0C EB 15 83 FF 01

unregistersymbol(ChestTwo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+89B312

"FSD-Win64-Shipping.exe"+89B2E6: 0F 5B C0                       -  cvtdq2ps xmm0,xmm0
"FSD-Win64-Shipping.exe"+89B2E9: F3 0F 10 88 58 05 00 00        -  movss xmm1,[rax+00000558]
"FSD-Win64-Shipping.exe"+89B2F1: F3 0F 5C F0                    -  subss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2F5: E8 56 30 ED FF                 -  call FSD-Win64-Shipping.exe+76E350
"FSD-Win64-Shipping.exe"+89B2FA: 0F 2F F0                       -  comiss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2FD: E9 FE 4C 5E FF                 -  jmp 7FF7AD5E0000
"FSD-Win64-Shipping.exe"+89B302: 48 3B 98 C8 03 00 00           -  cmp rbx,[rax+000003C8]
"FSD-Win64-Shipping.exe"+89B309: E9 F2 4C 72 FF                 -  jmp 7FF7AD720000
"FSD-Win64-Shipping.exe"+89B30E: 90                             -  nop 
"FSD-Win64-Shipping.exe"+89B30F: 45 84 ED                       -  test r13l,r13l
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+89B312: 75 0C                          -  jne FSD-Win64-Shipping.exe+89B320
"FSD-Win64-Shipping.exe"+89B314: EB 15                          -  jmp FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B316: 83 FF 01                       -  cmp edi,01
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+89B319: 75 10                          -  jne FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B31B: 45 84 E4                       -  test r12l,r12l
"FSD-Win64-Shipping.exe"+89B31E: 74 0B                          -  je FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B320: 48 8B 16                       -  mov rdx,[rsi]
"FSD-Win64-Shipping.exe"+89B323: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+89B326: E8 35 33 EA FF                 -  call FSD-Win64-Shipping.exe+73E660
"FSD-Win64-Shipping.exe"+89B32B: 48 8B 54 24 78                 -  mov rdx,[rsp+78]
"FSD-Win64-Shipping.exe"+89B330: FF C7                          -  inc edi
"FSD-Win64-Shipping.exe"+89B332: 49 83 C6 08                    -  add r14,08
"FSD-Win64-Shipping.exe"+89B336: 48 FF C5                       -  inc rbp
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2139</ID>
                      <Description>"LEAVE ENABLED UNTIL MISSION LOADS"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-27
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ChestThree,FSD-Win64-Shipping.exe,75 10 45 84 E4 74) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+89B319)

label(code)
label(return)

newmem:

code:
  //jne FSD-Win64-Shipping.exe+89B32B
  test r12l,r12l
  jmp return

ChestThree:
  jmp newmem
return:
registersymbol(ChestThree)

[DISABLE]

ChestThree:
  db 75 10 45 84 E4

unregistersymbol(ChestThree)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+89B319

"FSD-Win64-Shipping.exe"+89B2F1: F3 0F 5C F0                    -  subss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2F5: E8 56 30 ED FF                 -  call FSD-Win64-Shipping.exe+76E350
"FSD-Win64-Shipping.exe"+89B2FA: 0F 2F F0                       -  comiss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2FD: E9 FE 4C 5E FF                 -  jmp 7FF7AD5E0000
"FSD-Win64-Shipping.exe"+89B302: 48 3B 98 C8 03 00 00           -  cmp rbx,[rax+000003C8]
"FSD-Win64-Shipping.exe"+89B309: E9 F2 4C 72 FF                 -  jmp 7FF7AD720000
"FSD-Win64-Shipping.exe"+89B30E: 90                             -  nop 
"FSD-Win64-Shipping.exe"+89B30F: 45 84 ED                       -  test r13l,r13l
"FSD-Win64-Shipping.exe"+89B312: E9 E9 4C 5D FF                 -  jmp 7FF7AD5D0000
"FSD-Win64-Shipping.exe"+89B317: 66 90                          -  nop 
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+89B319: 75 10                          -  jne FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B31B: 45 84 E4                       -  test r12l,r12l
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+89B31E: 74 0B                          -  je FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B320: 48 8B 16                       -  mov rdx,[rsi]
"FSD-Win64-Shipping.exe"+89B323: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+89B326: E8 35 33 EA FF                 -  call FSD-Win64-Shipping.exe+73E660
"FSD-Win64-Shipping.exe"+89B32B: 48 8B 54 24 78                 -  mov rdx,[rsp+78]
"FSD-Win64-Shipping.exe"+89B330: FF C7                          -  inc edi
"FSD-Win64-Shipping.exe"+89B332: 49 83 C6 08                    -  add r14,08
"FSD-Win64-Shipping.exe"+89B336: 48 FF C5                       -  inc rbp
"FSD-Win64-Shipping.exe"+89B339: 49 3B EF                       -  cmp rbp,r15
"FSD-Win64-Shipping.exe"+89B33C: 0F 85 5E FF FF FF              -  jne FSD-Win64-Shipping.exe+89B2A0
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2140</ID>
                      <Description>"LEAVE ENABLED UNTIL MISSION LOADS"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-04-27
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ChestFour,FSD-Win64-Shipping.exe,74 0B 48 8B 16) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+89B31E)

label(code)
label(return)

newmem:

code:
  //je FSD-Win64-Shipping.exe+89B32B
  mov rdx,[rsi]
  jmp return

ChestFour:
  jmp newmem
return:
registersymbol(ChestFour)

[DISABLE]

ChestFour:
  db 74 0B 48 8B 16

unregistersymbol(ChestFour)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+89B31E

"FSD-Win64-Shipping.exe"+89B2F5: E8 56 30 ED FF                 -  call FSD-Win64-Shipping.exe+76E350
"FSD-Win64-Shipping.exe"+89B2FA: 0F 2F F0                       -  comiss xmm6,xmm0
"FSD-Win64-Shipping.exe"+89B2FD: E9 FE 4C 5E FF                 -  jmp 7FF7AD5E0000
"FSD-Win64-Shipping.exe"+89B302: 48 3B 98 C8 03 00 00           -  cmp rbx,[rax+000003C8]
"FSD-Win64-Shipping.exe"+89B309: E9 F2 4C 72 FF                 -  jmp 7FF7AD720000
"FSD-Win64-Shipping.exe"+89B30E: 90                             -  nop 
"FSD-Win64-Shipping.exe"+89B30F: 45 84 ED                       -  test r13l,r13l
"FSD-Win64-Shipping.exe"+89B312: E9 E9 4C 5D FF                 -  jmp 7FF7AD5D0000
"FSD-Win64-Shipping.exe"+89B317: 66 90                          -  nop 
"FSD-Win64-Shipping.exe"+89B319: E9 E2 4C 5C FF                 -  jmp 7FF7AD5C0000
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+89B31E: 74 0B                          -  je FSD-Win64-Shipping.exe+89B32B
"FSD-Win64-Shipping.exe"+89B320: 48 8B 16                       -  mov rdx,[rsi]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+89B323: 48 8B CB                       -  mov rcx,rbx
"FSD-Win64-Shipping.exe"+89B326: E8 35 33 EA FF                 -  call FSD-Win64-Shipping.exe+73E660
"FSD-Win64-Shipping.exe"+89B32B: 48 8B 54 24 78                 -  mov rdx,[rsp+78]
"FSD-Win64-Shipping.exe"+89B330: FF C7                          -  inc edi
"FSD-Win64-Shipping.exe"+89B332: 49 83 C6 08                    -  add r14,08
"FSD-Win64-Shipping.exe"+89B336: 48 FF C5                       -  inc rbp
"FSD-Win64-Shipping.exe"+89B339: 49 3B EF                       -  cmp rbp,r15
"FSD-Win64-Shipping.exe"+89B33C: 0F 85 5E FF FF FF              -  jne FSD-Win64-Shipping.exe+89B2A0
"FSD-Win64-Shipping.exe"+89B342: 0F 28 74 24 20                 -  movaps xmm6,[rsp+20]
"FSD-Win64-Shipping.exe"+89B347: 4C 8B 74 24 38                 -  mov r14,[rsp+38]
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1417</ID>
              <Description>"No Open. No Use. Thank."</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>FF0080</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1403</ID>
                  <Description>"Enble to Edit Player Positions (Old N Slow Verison)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aobscan(PlayerXPosition,?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 61 11 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 ?? 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? 00 00 01 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 04 00 00 00 ?? ?? ?? ?? F6 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 ?? EA 21 16 40 7C 00 01 00 00 01 00 00 00 00 00 00 00 00 00 FF FF FF FF ?? ?? 00 00 00 00 80 3F 00 00 00 00 00 00 00 00)
aobscan(PlayerYPosition,?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 61 11 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 ?? 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? 00 00 01 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 04 00 00 00 ?? ?? ?? ?? F6 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 ?? EA 21 16 40 7C 00 01 00 00 01 00 00 00 00 00 00 00 00 00 FF FF FF FF ?? ?? 00 00 00 00 80 3F 00 00 00 00 00 00 00 00)
aobscan(PlayerZPosition,?? ?? ?? ?? 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 61 11 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 ?? 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? 00 00 01 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 04 00 00 00 ?? ?? ?? ?? F6 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 ?? EA 21 16 40 7C 00 01 00 00 01 00 00 00 00 00 00 00 00 00 FF FF FF FF ?? ?? 00 00 00 00 80 3F 00 00 00 00 00 00 00 00)

label(XPos)
label(YPos)
label(ZPos)
registersymbol(XPos)
registersymbol(YPos)
registersymbol(ZPos)

PlayerXPosition:
XPos:
PlayerYPosition:
YPos:
PlayerZPosition:
ZPos:

[DISABLE]
unregistersymbol(XPos)
unregistersymbol(YPos)
unregistersymbol(ZPos)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1385</ID>
                      <Description>"Ammo Count"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>AmmoCount</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1712</ID>
                  <Description>"Get Player Position (No Set)"</Description>
                  <Options moHideChildren="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-01-12
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(PlayerXPosition,FSD-Win64-Shipping.exe,0F 10 8E A0 01 00 00 48 8D 44) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+18DB932)

label(code)
label(return)

label(XPos)
registersymbol(XPos)
label(YPos)
registersymbol(YPos)
label(ZPos)
registersymbol(ZPos)

newmem:

code:
  push rax
  mov rax,[rsi+000001A0]
  mov [XPos],rax
  mov rax,[rsi+000001A8]
  mov [YPos],rax
  mov rax,[rsi+000001A4]
  mov [ZPos],rax
  pop rax

  movups xmm1,[rsi+000001A0]
  jmp return

XPos:
  dq 0

YPos:
  dq 0

ZPos:
  dq 0

PlayerXPosition:
  jmp newmem
  nop
  nop
return:
registersymbol(PlayerXPosition)

[DISABLE]

PlayerXPosition:
  db 0F 10 8E A0 01 00 00

unregistersymbol(XPos)
unregistersymbol(YPos)
unregistersymbol(ZPos)
unregistersymbol(PlayerXPosition)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+18DB932

"FSD-Win64-Shipping.exe"+18DB8FB: 0F 10 4B 40                 -  movups xmm1,[rbx+40]
"FSD-Win64-Shipping.exe"+18DB8FF: 0F 5C 8E B0 01 00 00        -  subps xmm1,[rsi+000001B0]
"FSD-Win64-Shipping.exe"+18DB906: F3 0F 11 84 24 C0 00 00 00  -  movss [rsp+000000C0],xmm0
"FSD-Win64-Shipping.exe"+18DB90F: F3 0F 10 84 24 C0 00 00 00  -  movss xmm0,[rsp+000000C0]
"FSD-Win64-Shipping.exe"+18DB918: 0F C6 C0 00                 -  shufps xmm0,xmm0,00
"FSD-Win64-Shipping.exe"+18DB91C: 0F 54 0D 1D D0 E4 01        -  andps xmm1,[FSD-Win64-Shipping.exe+3728940]
"FSD-Win64-Shipping.exe"+18DB923: 0F C2 C1 01                 -  cmpps xmm0,xmm101
"FSD-Win64-Shipping.exe"+18DB927: 0F 50 C0                    -  movmskps eax,xmm0
"FSD-Win64-Shipping.exe"+18DB92A: 85 C0                       -  test eax,eax
"FSD-Win64-Shipping.exe"+18DB92C: 0F 85 E3 00 00 00           -  jne FSD-Win64-Shipping.exe+18DBA15
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+18DB932: 0F 10 8E A0 01 00 00        -  movups xmm1,[rsi+000001A0]
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+18DB939: 48 8D 44 24 60              -  lea rax,[rsp+60]
"FSD-Win64-Shipping.exe"+18DB93E: 0F 10 86 90 01 00 00        -  movups xmm0,[rsi+00000190]
"FSD-Win64-Shipping.exe"+18DB945: 4C 8D 43 78                 -  lea r8,[rbx+78]
"FSD-Win64-Shipping.exe"+18DB949: 0F 29 44 24 60              -  movaps [rsp+60],xmm0
"FSD-Win64-Shipping.exe"+18DB94E: 48 8D 54 24 48              -  lea rdx,[rsp+48]
"FSD-Win64-Shipping.exe"+18DB953: 0F 28 C1                    -  movaps xmm0,xmm1
"FSD-Win64-Shipping.exe"+18DB956: 48 89 44 24 28              -  mov [rsp+28],rax
"FSD-Win64-Shipping.exe"+18DB95B: 0F C6 C1 55                 -  shufps xmm0,xmm1,55
"FSD-Win64-Shipping.exe"+18DB95F: 48 8D 44 24 30              -  lea rax,[rsp+30]
"FSD-Win64-Shipping.exe"+18DB964: F3 0F 11 4C 24 30           -  movss [rsp+30],xmm1
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1411</ID>
                      <Description>"X Position"</Description>
                      <VariableType>Float</VariableType>
                      <Address>XPos</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1415</ID>
                      <Description>"Y Position"</Description>
                      <VariableType>Float</VariableType>
                      <Address>YPos</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1416</ID>
                      <Description>"Z Position"</Description>
                      <VariableType>Float</VariableType>
                      <Address>ZPos</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1384</ID>
                  <Description>"How To Find A Pointer (AmmoCount)"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version:
  Date   : 2019-09-26
  Author : Vergbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MagazineAmmo,FSD-Win64-Shipping.exe,89 86 B0 06 00 00 89) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+77CCE3)

label(code)
label(return)

label(AmmoCount)
registersymbol(AmmoCount)

newmem:

code:                           // [rsi+000006B0] is the current gun's ammo count
  push rax                      // ready rax for use
  mov rax,[rsi+000006B0]        // move pointer rdi+5D0 into rax
  mov [AmmoCount],rax           // move rax into AmmoCount
  pop rax                       // unready rax for use
  add [rsi+000006B0],(int)0     // (Original Code)
  jmp return                    // AmmoCount is now [rsi+000006B0]

AmmoCount:
  dq 0

MagazineAmmo:
  jmp newmem
  nop
return:
registersymbol(MagazineAmmo)

[DISABLE]

MagazineAmmo:
  db 89 86 B0 06 00 00

unregistersymbol(AmmoCount)
unregistersymbol(MagazineAmmo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+77CCE3

"FSD-Win64-Shipping.exe"+77CCB3: 48 8B 15 96 64 EA 02     -  mov rdx,[FSD-Win64-Shipping.exe+3623150]
"FSD-Win64-Shipping.exe"+77CCBA: 41 B0 01                 -  mov r8l,01
"FSD-Win64-Shipping.exe"+77CCBD: 48 8B C8                 -  mov rcx,rax
"FSD-Win64-Shipping.exe"+77CCC0: E8 4B 0F 0F 01           -  call FSD-Win64-Shipping.exe+186DC10
"FSD-Win64-Shipping.exe"+77CCC5: 8B 86 B0 06 00 00        -  mov eax,[rsi+000006B0]
"FSD-Win64-Shipping.exe"+77CCCB: 48 8D 8E 90 04 00 00     -  lea rcx,[rsi+00000490]
"FSD-Win64-Shipping.exe"+77CCD2: 2B 86 98 06 00 00        -  sub eax,[rsi+00000698]
"FSD-Win64-Shipping.exe"+77CCD8: 48 8D 54 24 70           -  lea rdx,[rsp+70]
"FSD-Win64-Shipping.exe"+77CCDD: 85 C0                    -  test eax,eax
"FSD-Win64-Shipping.exe"+77CCDF: 41 0F 4E C6              -  cmovle eax,r14d
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+77CCE3: 89 86 B0 06 00 00        -  mov [rsi+000006B0],eax
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+77CCE9: 89 44 24 70              -  mov [rsp+70],eax
"FSD-Win64-Shipping.exe"+77CCED: E8 CE C8 B5 FF           -  call FSD-Win64-Shipping.exe+2D95C0
"FSD-Win64-Shipping.exe"+77CCF2: 8B 86 AC 06 00 00        -  mov eax,[rsi+000006AC]
"FSD-Win64-Shipping.exe"+77CCF8: 48 8D 54 24 70           -  lea rdx,[rsp+70]
"FSD-Win64-Shipping.exe"+77CCFD: 48 8B 8E C8 04 00 00     -  mov rcx,[rsi+000004C8]
"FSD-Win64-Shipping.exe"+77CD04: 03 86 B0 06 00 00        -  add eax,[rsi+000006B0]
"FSD-Win64-Shipping.exe"+77CD0A: 48 81 C1 30 01 00 00     -  add rcx,00000130
"FSD-Win64-Shipping.exe"+77CD11: 89 44 24 70              -  mov [rsp+70],eax
"FSD-Win64-Shipping.exe"+77CD15: E8 A6 C8 B5 FF           -  call FSD-Win64-Shipping.exe+2D95C0
"FSD-Win64-Shipping.exe"+77CD1A: 48 8B 8E C8 04 00 00     -  mov rcx,[rsi+000004C8]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1711</ID>
                      <Description>"Player X Position"</Description>
                      <VariableType>Float</VariableType>
                      <Address>XPos</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1714</ID>
                      <Description>"Player Y Position"</Description>
                      <VariableType>Float</VariableType>
                      <Address>YPos</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1713</ID>
                      <Description>"Player Z Position"</Description>
                      <VariableType>Float</VariableType>
                      <Address>ZPos</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1839</ID>
                  <Description>"mulss example"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-01-31
  Author : Verbergler

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(GrappleDistance,FSD-Win64-Shipping.exe,F3 0F 11 83 74 04 00 00 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+6C7B50)

label(code)
label(return)

label(GrappleDist)
registersymbol(GrappleDist)
// 7FF78B307AA0 - FSD-Win64-Shipping.UGrapplingHookUpgrade::AddToItem()
newmem:

code:
  mulss xmm0,[GrappleDist]
  movss [rbx+00000474],xmm0
  jmp return

GrappleDist:
  dd (float)100.0

GrappleDistance:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(GrappleDistance)

[DISABLE]

GrappleDistance:
  db F3 0F 11 83 74 04 00 00

unregistersymbol(GrappleDist)
unregistersymbol(GrappleDistance)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+6C7B50

"FSD-Win64-Shipping.exe"+6C7B1C: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6C7B1D: F3 0F 10 87 4C 01 00 00  -  movss xmm0,[rdi+0000014C]
"FSD-Win64-Shipping.exe"+6C7B25: F3 0F 58 83 A8 04 00 00  -  addss xmm0,[rbx+000004A8]
"FSD-Win64-Shipping.exe"+6C7B2D: F3 0F 11 83 A8 04 00 00  -  movss [rbx+000004A8],xmm0
"FSD-Win64-Shipping.exe"+6C7B35: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6C7B3A: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6C7B3E: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6C7B3F: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6C7B40: F3 0F 10 87 4C 01 00 00  -  movss xmm0,[rdi+0000014C]
"FSD-Win64-Shipping.exe"+6C7B48: F3 0F 58 83 74 04 00 00  -  addss xmm0,[rbx+00000474]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+6C7B50: F3 0F 11 83 74 04 00 00  -  movss [rbx+00000474],xmm0
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+6C7B58: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"FSD-Win64-Shipping.exe"+6C7B5D: 48 83 C4 20              -  add rsp,20
"FSD-Win64-Shipping.exe"+6C7B61: 5F                       -  pop rdi
"FSD-Win64-Shipping.exe"+6C7B62: C3                       -  ret 
"FSD-Win64-Shipping.exe"+6C7B63: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6C7B64: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6C7B65: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6C7B66: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6C7B67: CC                       -  int 3 
"FSD-Win64-Shipping.exe"+6C7B68: CC                       -  int 3 
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1863</ID>
                  <Description>"Minerals"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1951</ID>
                      <Description>"Magnite"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>48</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1952</ID>
                      <Description>"Bismor"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>10</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1953</ID>
                      <Description>"Umanite"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>64</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1954</ID>
                      <Description>"Croppa"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>80</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1955</ID>
                      <Description>"Enor Pearl"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>2C</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1956</ID>
                      <Description>"Jadiz"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>9C</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1864</ID>
                  <Description>"Beer Minerals"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1958</ID>
                      <Description>"Barley Bulb"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>10C</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1960</ID>
                      <Description>"Yeast Cone"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>144</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1959</ID>
                      <Description>"Malt Star"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>128</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1957</ID>
                      <Description>"Starch Nut"</Description>
                      <VariableType>Float</VariableType>
                      <Address>"FSD-Win64-Shipping.exe"+0325C5D0</Address>
                      <Offsets>
                        <Offset>F0</Offset>
                        <Offset>6D0</Offset>
                        <Offset>940</Offset>
                        <Offset>20</Offset>
                        <Offset>998</Offset>
                        <Offset>160</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24257</ID>
                  <Description>"Research (Akira Fudo)"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24252</ID>
                      <Description>"XP from Mission?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-05
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(XP,VCRUNTIME140.dll,89 08 C3 0F 1F 00) // should be unique
alloc(newmem,$1000,"VCRUNTIME140.dll"+13BA)

label(code)
label(return)

newmem:

code:
  mov [rax],ecx
  ret 
  nop dword ptr [rax]
  jmp return

XP:
  jmp newmem
  nop
return:
registersymbol(XP)

[DISABLE]

XP:
  db 89 08 C3 0F 1F 00

unregistersymbol(XP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "VCRUNTIME140.dll"+13BA

"VCRUNTIME140.dll"+139D: C3                             -  ret 
"VCRUNTIME140.dll"+139E: 66 90                          -  nop 2
"VCRUNTIME140.dll"+13A0: 4C 8B 02                       -  mov r8,[rdx]
"VCRUNTIME140.dll"+13A3: 0F B7 4A 08                    -  movzx ecx,word ptr [rdx+08]
"VCRUNTIME140.dll"+13A7: 44 0F B6 4A 0A                 -  movzx r9d,byte ptr [rdx+0A]
"VCRUNTIME140.dll"+13AC: 4C 89 00                       -  mov [rax],r8
"VCRUNTIME140.dll"+13AF: 66 89 48 08                    -  mov [rax+08],cx
"VCRUNTIME140.dll"+13B3: 44 88 48 0A                    -  mov [rax+0A],r9l
"VCRUNTIME140.dll"+13B7: C3                             -  ret 
"VCRUNTIME140.dll"+13B8: 8B 0A                          -  mov ecx,[rdx]
// ---------- INJECTING HERE ----------
"VCRUNTIME140.dll"+13BA: 89 08                          -  mov [rax],ecx
"VCRUNTIME140.dll"+13BC: C3                             -  ret 
"VCRUNTIME140.dll"+13BD: 0F 1F 00                       -  nop dword ptr [rax]
// ---------- DONE INJECTING  ----------
"VCRUNTIME140.dll"+13C0: 8B 0A                          -  mov ecx,[rdx]
"VCRUNTIME140.dll"+13C2: 44 0F B6 42 04                 -  movzx r8d,byte ptr [rdx+04]
"VCRUNTIME140.dll"+13C7: 89 08                          -  mov [rax],ecx
"VCRUNTIME140.dll"+13C9: 44 88 40 04                    -  mov [rax+04],r8l
"VCRUNTIME140.dll"+13CD: C3                             -  ret 
"VCRUNTIME140.dll"+13CE: 66 90                          -  nop 2
"VCRUNTIME140.dll"+13D0: 8B 0A                          -  mov ecx,[rdx]
"VCRUNTIME140.dll"+13D2: 44 0F B7 42 04                 -  movzx r8d,word ptr [rdx+04]
"VCRUNTIME140.dll"+13D7: 89 08                          -  mov [rax],ecx
"VCRUNTIME140.dll"+13D9: 66 44 89 40 04                 -  mov [rax+04],r8w
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24254</ID>
                      <Description>"Gold from Mission?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-05
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Gold,VCRUNTIME140.dll,89 08 C3 0F 1F 00) // should be unique
alloc(newmem,$1000,"VCRUNTIME140.dll"+13BA)

label(code)
label(return)

newmem:

code:
  mov [rax],ecx
  ret 
  nop dword ptr [rax]
  jmp return

Gold:
  jmp newmem
  nop
return:
registersymbol(Gold)

[DISABLE]

Gold:
  db 89 08 C3 0F 1F 00

unregistersymbol(Gold)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "VCRUNTIME140.dll"+13BA

"VCRUNTIME140.dll"+139D: C3                             -  ret 
"VCRUNTIME140.dll"+139E: 66 90                          -  nop 2
"VCRUNTIME140.dll"+13A0: 4C 8B 02                       -  mov r8,[rdx]
"VCRUNTIME140.dll"+13A3: 0F B7 4A 08                    -  movzx ecx,word ptr [rdx+08]
"VCRUNTIME140.dll"+13A7: 44 0F B6 4A 0A                 -  movzx r9d,byte ptr [rdx+0A]
"VCRUNTIME140.dll"+13AC: 4C 89 00                       -  mov [rax],r8
"VCRUNTIME140.dll"+13AF: 66 89 48 08                    -  mov [rax+08],cx
"VCRUNTIME140.dll"+13B3: 44 88 48 0A                    -  mov [rax+0A],r9l
"VCRUNTIME140.dll"+13B7: C3                             -  ret 
"VCRUNTIME140.dll"+13B8: 8B 0A                          -  mov ecx,[rdx]
// ---------- INJECTING HERE ----------
"VCRUNTIME140.dll"+13BA: 89 08                          -  mov [rax],ecx
"VCRUNTIME140.dll"+13BC: C3                             -  ret 
"VCRUNTIME140.dll"+13BD: 0F 1F 00                       -  nop dword ptr [rax]
// ---------- DONE INJECTING  ----------
"VCRUNTIME140.dll"+13C0: 8B 0A                          -  mov ecx,[rdx]
"VCRUNTIME140.dll"+13C2: 44 0F B6 42 04                 -  movzx r8d,byte ptr [rdx+04]
"VCRUNTIME140.dll"+13C7: 89 08                          -  mov [rax],ecx
"VCRUNTIME140.dll"+13C9: 44 88 40 04                    -  mov [rax+04],r8l
"VCRUNTIME140.dll"+13CD: C3                             -  ret 
"VCRUNTIME140.dll"+13CE: 66 90                          -  nop 2
"VCRUNTIME140.dll"+13D0: 8B 0A                          -  mov ecx,[rdx]
"VCRUNTIME140.dll"+13D2: 44 0F B7 42 04                 -  movzx r8d,word ptr [rdx+04]
"VCRUNTIME140.dll"+13D7: 89 08                          -  mov [rax],ecx
"VCRUNTIME140.dll"+13D9: 66 44 89 40 04                 -  mov [rax+04],r8w
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24256</ID>
                      <Description>"Credits?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-05
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscan(Credits,04 00 00 00 D1 45 17 39 00) // should be unique
alloc(newmem,$1000,1CE80846178)

label(code)
label(return)

newmem:

code:
  rol [rbp+17],1
  cmp [rax],eax
  jmp return

Credits+04:
  jmp newmem
return:
registersymbol(Credits)

[DISABLE]

Credits+04:
  db D1 45 17 39 00

unregistersymbol(Credits)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1CE80846178

1CE80846157: 00 80 17 D8 05 CE     -  add [rax-31FA27E9],al
1CE8084615D: 01 00                 -  add [rax],eax
1CE8084615F: 00 0D 00 00 00 18     -  add [1CE98846165],cl
1CE80846165: 00 00                 -  add [rax],al
1CE80846167: 00 80 4A B7 F4 CD     -  add [rax-320B48B6],al
1CE8084616D: 01 00                 -  add [rax],eax
1CE8084616F: 00 02                 -  add [rdx],al
1CE80846171: 00 00                 -  add [rax],al
1CE80846173: 00 04 00              -  add [rax+rax],al
1CE80846176: 00 00                 -  add [rax],al
// ---------- INJECTING HERE ----------
1CE80846178: D1 45 17              -  rol [rbp+17],1
1CE8084617B: 39 00                 -  cmp [rax],eax
// ---------- DONE INJECTING  ----------
1CE8084617D: 00 00                 -  add [rax],al
1CE8084617F: 00 00                 -  add [rax],al
1CE80846181: 00 00                 -  add [rax],al
1CE80846183: 00 00                 -  add [rax],al
1CE80846185: 00 00                 -  add [rax],al
1CE80846187: 00 00                 -  add [rax],al
1CE80846189: 00 00                 -  add [rax],al
1CE8084618B: 00 00                 -  add [rax],al
1CE8084618D: 00 00                 -  add [rax],al
1CE8084618F: 00 00                 -  add [rax],al
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24255</ID>
                      <Description>"Change Player Name?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-05
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscan(Name,00 F6 7F 00 00 41 00 6B 00 69 00 72 00 61 00) // should be unique
alloc(newmem,$1000,1CD81CE7100)

label(code)
label(return)

newmem:

code:
  add [r11+00],bpl
  imul eax,[rax],00610072
  jmp return

Name+05:
  jmp newmem
  nop 5
return:
registersymbol(Name)

[DISABLE]

Name+05:
  db 41 00 6B 00 69 00 72 00 61 00

unregistersymbol(Name)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1CD81CE7100

1CD81CE70EE: 00 00                       -  add [rax],al
1CD81CE70F0: 00 DD                       -  add ch,bl
1CD81CE70F2: C7                          -  db -39
1CD81CE70F3: F7                          -  db -09
1CD81CE70F4: CD 01                       -  int 01
1CD81CE70F6: 00 00                       -  add [rax],al
1CD81CE70F8: 73 00                       -  jae 1CD81CE70FA
1CD81CE70FA: 00 00                       -  add [rax],al
1CD81CE70FC: F6 7F 00                    -  idiv byte ptr [rdi+00]
1CD81CE70FF: 00 41                       - db 00 41  // SHORTENED TO HIT INJECTION FROM:  add [rcx+00],al
// ---------- INJECTING HERE ----------
1CD81CE7101: 00 6B 00                    -  add [rbx+00],ch
1CD81CE7104: 69 00 72 00 61 00           -  imul eax,[rax],00610072
// ---------- DONE INJECTING  ----------
1CD81CE710A: 20 00                       -  and [rax],al
1CD81CE710C: 46 00 75 00                 -  add [rbp+00],r14l
1CD81CE7110: 64 00 6F 00                 -  add fs:[rdi+00],ch
1CD81CE7114: 00 00                       -  add [rax],al
1CD81CE7116: 00 00                       -  add [rax],al
1CD81CE7118: 10 00                       -  adc [rax],al
1CD81CE711A: 00 00                       -  add [rax],al
1CD81CE711C: DB                          -   
1CD81CE711D: FF 0D 00 E0 20 3A           -  dec [1CDBBEF5123]
1CD81CE7123: 81 CD 01 00 00 00           -  or ebp,00000001
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24247</ID>
                      <Description>"Weekly Blank Core Hunt"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-01
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(WeeklyBlankCore,FSD-Win64-Shipping.exe,F3 0F 11 71 10 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+693FE8)

label(code)
label(return)

newmem:

code:
  movss [rcx+10],xmm6
  jmp return

WeeklyBlankCore:
  jmp newmem
return:
registersymbol(WeeklyBlankCore)

[DISABLE]

WeeklyBlankCore:
  db F3 0F 11 71 10

unregistersymbol(WeeklyBlankCore)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+693FE8

"FSD-Win64-Shipping.exe"+693FB6: 48 8D 8B 30 08 00 00  -  lea rcx,[rbx+00000830]
"FSD-Win64-Shipping.exe"+693FBD: E8 6E 5A FF FF        -  call FSD-Win64-Shipping.exe+689A30
"FSD-Win64-Shipping.exe"+693FC2: 48 63 44 24 68        -  movsxd  rax,dword ptr [rsp+68]
"FSD-Win64-Shipping.exe"+693FC7: 48 6B C8 1C           -  imul rcx,rax,1C
"FSD-Win64-Shipping.exe"+693FCB: 48 03 8B 30 08 00 00  -  add rcx,[rbx+00000830]
"FSD-Win64-Shipping.exe"+693FD2: F3 0F 58 71 10        -  addss xmm6,[rcx+10]
"FSD-Win64-Shipping.exe"+693FD7: 0F 57 C0              -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+693FDA: 48 89 74 24 20        -  mov [rsp+20],rsi
"FSD-Win64-Shipping.exe"+693FDF: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+693FE4: F3 0F 5F F0           -  maxss xmm6,xmm0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+693FE8: F3 0F 11 71 10        -  movss [rcx+10],xmm6
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+693FED: 48 8D 8B F0 00 00 00  -  lea rcx,[rbx+000000F0]
"FSD-Win64-Shipping.exe"+693FF4: F3 0F 11 74 24 28     -  movss [rsp+28],xmm6
"FSD-Win64-Shipping.exe"+693FFA: E8 21 C3 C4 FF        -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+693FFF: 48 8B 7C 24 40        -  mov rdi,[rsp+40]
"FSD-Win64-Shipping.exe"+694004: 48 8B 6C 24 60        -  mov rbp,[rsp+60]
"FSD-Win64-Shipping.exe"+694009: 0F 28 74 24 30        -  movaps xmm6,[rsp+30]
"FSD-Win64-Shipping.exe"+69400E: 48 83 C4 48           -  add rsp,48
"FSD-Win64-Shipping.exe"+694012: 5E                    -  pop rsi
"FSD-Win64-Shipping.exe"+694013: 5B                    -  pop rbx
"FSD-Win64-Shipping.exe"+694014: C3                    -  ret 
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24264</ID>
                      <Description>"Mixer Cooldown?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-06
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscan(INJECT,50 8B A3 87 F6 7F 00 00 41 00 00 00 10 5E) // should be unique
alloc(newmem,$1000,291250F9150)

label(code)
label(return)

newmem:

code:
  push rax
  mov esp,[rbx+007FF687]
  jmp return

INJECT:
  jmp newmem
  nop 2
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 50 8B A3 87 F6 7F 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 291250F9150

291250F913C: 00 00              -  add [rax],al
291250F913E: 00 00              -  add [rax],al
291250F9140: 00 00              -  add [rax],al
291250F9142: 00 00              -  add [rax],al
291250F9144: 00 00              -  add [rax],al
291250F9146: 00 00              -  add [rax],al
291250F9148: 00 00              -  add [rax],al
291250F914A: 00 00              -  add [rax],al
291250F914C: 00 00              -  add [rax],al
291250F914E: 00 00              -  add [rax],al
// ---------- INJECTING HERE ----------
291250F9150: 50                 -  push rax
291250F9151: 8B A3 87 F6 7F 00  -  mov esp,[rbx+007FF687]
// ---------- DONE INJECTING  ----------
291250F9157: 00 41 00           -  add [rcx+00],al
291250F915A: 00 00              -  add [rax],al
291250F915C: 10 5E 00           -  adc [rsi+00],bl
291250F915F: 00 00              -  add [rax],al
291250F9161: CA 13 0A           -  ret 0A13
291250F9164: 91                 -  xchg eax,ecx
291250F9165: 02 00              -  add al,[rax]
291250F9167: 00 7B 97           -  add [rbx-69],bh
291250F916A: 01 00              -  add [rax],eax
291250F916C: 00 00              -  add [rax],al
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24267</ID>
                      <Description>"Nitra added from Mixer?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-06
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Mixer,FSD-Win64-Shipping.exe,F3 0F 11 49 60 F3 0F 11 4C) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+754EB0)

label(code)
label(return)

newmem:

code:
  movss [rcx+60],xmm1
  jmp return

Mixer:
  jmp newmem
return:
registersymbol(Mixer)

[DISABLE]

Mixer:
  db F3 0F 11 49 60

unregistersymbol(Mixer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+754EB0

"FSD-Win64-Shipping.exe"+754E8A: 0F 28 F0              -  movaps xmm6,xmm0
"FSD-Win64-Shipping.exe"+754E8D: F3 0F 5F F2           -  maxss xmm6,xmm2
"FSD-Win64-Shipping.exe"+754E91: 0F 2F F2              -  comiss xmm6,xmm2
"FSD-Win64-Shipping.exe"+754E94: 76 51                 -  jna FSD-Win64-Shipping.exe+754EE7
"FSD-Win64-Shipping.exe"+754E96: 0F 28 CE              -  movaps xmm1,xmm6
"FSD-Win64-Shipping.exe"+754E99: 48 89 5C 24 20        -  mov [rsp+20],rbx
"FSD-Win64-Shipping.exe"+754E9E: F3 0F 58 49 60        -  addss xmm1,[rcx+60]
"FSD-Win64-Shipping.exe"+754EA3: 0F 28 C6              -  movaps xmm0,xmm6
"FSD-Win64-Shipping.exe"+754EA6: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+754EAB: F3 0F 58 41 68        -  addss xmm0,[rcx+68]
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+754EB0: F3 0F 11 49 60        -  movss [rcx+60],xmm1
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+754EB5: F3 0F 11 4C 24 28     -  movss [rsp+28],xmm1
"FSD-Win64-Shipping.exe"+754EBB: F3 0F 11 41 68        -  movss [rcx+68],xmm0
"FSD-Win64-Shipping.exe"+754EC0: 48 83 C1 28           -  add rcx,28
"FSD-Win64-Shipping.exe"+754EC4: E8 57 B4 B8 FF        -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+754EC9: 48 8D 4B 38           -  lea rcx,[rbx+38]
"FSD-Win64-Shipping.exe"+754ECD: F3 0F 11 74 24 28     -  movss [rsp+28],xmm6
"FSD-Win64-Shipping.exe"+754ED3: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+754ED8: 48 89 5C 24 20        -  mov [rsp+20],rbx
"FSD-Win64-Shipping.exe"+754EDD: E8 3E B4 B8 FF        -  call FSD-Win64-Shipping.exe+2E0320
"FSD-Win64-Shipping.exe"+754EE2: F3 0F 10 4B 64        -  movss xmm1,[rbx+64]
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24269</ID>
                      <Description>"Ammo from Mixer?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-06
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Mixer,FSD-Win64-Shipping.exe,89 8B AC 06 00 00 EB) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+79D48C)

label(code)
label(return)

newmem:

code:
  mov [rbx+000006AC],ecx
  jmp return

Mixer:
  jmp newmem
  nop
return:
registersymbol(Mixer)

[DISABLE]

Mixer:
  db 89 8B AC 06 00 00

unregistersymbol(Mixer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+79D48C

"FSD-Win64-Shipping.exe"+79D46D: 0F 5B C9                 -  cvtdq2ps xmm1,xmm1
"FSD-Win64-Shipping.exe"+79D470: 41 03 D0                 -  add edx,r8d
"FSD-Win64-Shipping.exe"+79D473: F3 0F 59 CA              -  mulss xmm1,xmm2
"FSD-Win64-Shipping.exe"+79D477: F3 0F 58 C9              -  addss xmm1,xmm1
"FSD-Win64-Shipping.exe"+79D47B: F3 0F 5C C1              -  subss xmm0,xmm1
"FSD-Win64-Shipping.exe"+79D47F: F3 0F 2D C0              -  cvtss2si eax,xmm0
"FSD-Win64-Shipping.exe"+79D483: D1 F8                    -  sar eax,1
"FSD-Win64-Shipping.exe"+79D485: 2B C8                    -  sub ecx,eax
"FSD-Win64-Shipping.exe"+79D487: 3B D1                    -  cmp edx,ecx
"FSD-Win64-Shipping.exe"+79D489: 0F 4E CA                 -  cmovle ecx,edx
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+79D48C: 89 8B AC 06 00 00        -  mov [rbx+000006AC],ecx
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+79D492: EB 41                    -  jmp FSD-Win64-Shipping.exe+79D4D5
"FSD-Win64-Shipping.exe"+79D494: 0F 57 C0                 -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+79D497: F3 0F 58 D2              -  addss xmm2,xmm2
"FSD-Win64-Shipping.exe"+79D49B: F3 41 0F 2A C0           -  cvtsi2ss xmm0,r8d
"FSD-Win64-Shipping.exe"+79D4A0: 0F 57 C9                 -  xorps xmm1,xmm1
"FSD-Win64-Shipping.exe"+79D4A3: F3 0F 59 D0              -  mulss xmm2,xmm0
"FSD-Win64-Shipping.exe"+79D4A7: F3 0F 10 05 4D 20 F5 01  -  movss xmm0,[FSD-Win64-Shipping.exe+26EF4FC]
"FSD-Win64-Shipping.exe"+79D4AF: F3 41 0F 2A C9           -  cvtsi2ss xmm1,r9d
"FSD-Win64-Shipping.exe"+79D4B4: F3 0F 58 D1              -  addss xmm2,xmm1
"FSD-Win64-Shipping.exe"+79D4B8: F3 0F 58 D1              -  addss xmm2,xmm1
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24270</ID>
                      <Description>"Health from Mixer?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-06
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Mixer,FSD-Win64-Shipping.exe,F3 0F 11 8B B8 01 00 00) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+730369)

label(code)
label(return)

newmem:

code:
  movss [rbx+000001B8],xmm1
  jmp return

Mixer:
  jmp newmem
  nop 3
return:
registersymbol(Mixer)

[DISABLE]

Mixer:
  db F3 0F 11 8B B8 01 00 00

unregistersymbol(Mixer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+730369

"FSD-Win64-Shipping.exe"+730346: FF 50 28                    -  call qword ptr [rax+28]
"FSD-Win64-Shipping.exe"+730349: F3 0F 10 8B B8 01 00 00     -  movss xmm1,[rbx+000001B8]
"FSD-Win64-Shipping.exe"+730351: F3 0F 5C CE                 -  subss xmm1,xmm6
"FSD-Win64-Shipping.exe"+730355: 0F 2F CF                    -  comiss xmm1,xmm7
"FSD-Win64-Shipping.exe"+730358: 73 05                       -  jae FSD-Win64-Shipping.exe+73035F
"FSD-Win64-Shipping.exe"+73035A: 0F 57 C9                    -  xorps xmm1,xmm1
"FSD-Win64-Shipping.exe"+73035D: EB 04                       -  jmp FSD-Win64-Shipping.exe+730363
"FSD-Win64-Shipping.exe"+73035F: F3 0F 5D C8                 -  minss xmm1,xmm0
"FSD-Win64-Shipping.exe"+730363: 48 8B 03                    -  mov rax,[rbx]
"FSD-Win64-Shipping.exe"+730366: 48 8B CB                    -  mov rcx,rbx
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+730369: F3 0F 11 8B B8 01 00 00     -  movss [rbx+000001B8],xmm1
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+730371: 41 0F 28 C8                 -  movaps xmm1,xmm8
"FSD-Win64-Shipping.exe"+730375: FF 90 80 04 00 00           -  call qword ptr [rax+00000480]
"FSD-Win64-Shipping.exe"+73037B: 80 BB 28 02 00 00 00        -  cmp byte ptr [rbx+00000228],00
"FSD-Win64-Shipping.exe"+730382: 74 15                       -  je FSD-Win64-Shipping.exe+730399
"FSD-Win64-Shipping.exe"+730384: 48 8B 07                    -  mov rax,[rdi]
"FSD-Win64-Shipping.exe"+730387: 48 8B CF                    -  mov rcx,rdi
"FSD-Win64-Shipping.exe"+73038A: FF 50 10                    -  call qword ptr [rax+10]
"FSD-Win64-Shipping.exe"+73038D: 48 8B C8                    -  mov rcx,rax
"FSD-Win64-Shipping.exe"+730390: 48 8B 10                    -  mov rdx,[rax]
"FSD-Win64-Shipping.exe"+730393: FF 92 C0 05 00 00           -  call qword ptr [rdx+000005C0]
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24272</ID>
                      <Description>"BlankCore from Cheat?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-07
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(BlankCore,FSD-Win64-Shipping.exe,F3 0F 11 71 10 48) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+696AD8)

label(code)
label(return)

newmem:

code:
  movss [rcx+10],xmm6
  jmp return

BlankCore:
  jmp newmem
return:
registersymbol(BlankCore)

[DISABLE]

BlankCore:
  db F3 0F 11 71 10

unregistersymbol(BlankCore)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+696AD8

"FSD-Win64-Shipping.exe"+696AA6: 48 8D 8B 30 08 00 00  -  lea rcx,[rbx+00000830]
"FSD-Win64-Shipping.exe"+696AAD: E8 1E 5A FF FF        -  call FSD-Win64-Shipping.exe+68C4D0
"FSD-Win64-Shipping.exe"+696AB2: 48 63 44 24 68        -  movsxd  rax,dword ptr [rsp+68]
"FSD-Win64-Shipping.exe"+696AB7: 48 6B C8 1C           -  imul rcx,rax,1C
"FSD-Win64-Shipping.exe"+696ABB: 48 03 8B 30 08 00 00  -  add rcx,[rbx+00000830]
"FSD-Win64-Shipping.exe"+696AC2: F3 0F 58 71 10        -  addss xmm6,[rcx+10]
"FSD-Win64-Shipping.exe"+696AC7: 0F 57 C0              -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+696ACA: 48 89 74 24 20        -  mov [rsp+20],rsi
"FSD-Win64-Shipping.exe"+696ACF: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"FSD-Win64-Shipping.exe"+696AD4: F3 0F 5F F0           -  maxss xmm6,xmm0
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+696AD8: F3 0F 11 71 10        -  movss [rcx+10],xmm6
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+696ADD: 48 8D 8B F0 00 00 00  -  lea rcx,[rbx+000000F0]
"FSD-Win64-Shipping.exe"+696AE4: F3 0F 11 74 24 28     -  movss [rsp+28],xmm6
"FSD-Win64-Shipping.exe"+696AEA: E8 71 A0 C4 FF        -  call FSD-Win64-Shipping.exe+2E0B60
"FSD-Win64-Shipping.exe"+696AEF: 48 8B 7C 24 40        -  mov rdi,[rsp+40]
"FSD-Win64-Shipping.exe"+696AF4: 48 8B 6C 24 60        -  mov rbp,[rsp+60]
"FSD-Win64-Shipping.exe"+696AF9: 0F 28 74 24 30        -  movaps xmm6,[rsp+30]
"FSD-Win64-Shipping.exe"+696AFE: 48 83 C4 48           -  add rsp,48
"FSD-Win64-Shipping.exe"+696B02: 5E                    -  pop rsi
"FSD-Win64-Shipping.exe"+696B03: 5B                    -  pop rbx
"FSD-Win64-Shipping.exe"+696B04: C3                    -  ret 
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24286</ID>
                      <Description>"Ammo from Resupply Pod?"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : FSD-Win64-Shipping.exe
  Version: 
  Date   : 2020-06-11
  Author : joach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,FSD-Win64-Shipping.exe,89 8B AC 06 00 00 EB) // should be unique
alloc(newmem,$1000,"FSD-Win64-Shipping.exe"+7A0F8C)

label(code)
label(return)

newmem:

code:
  mov [rbx+000006AC],ecx
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 89 8B AC 06 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "FSD-Win64-Shipping.exe"+7A0F8C

"FSD-Win64-Shipping.exe"+7A0F6D: 0F 5B C9                 -  cvtdq2ps xmm1,xmm1
"FSD-Win64-Shipping.exe"+7A0F70: 41 03 D0                 -  add edx,r8d
"FSD-Win64-Shipping.exe"+7A0F73: F3 0F 59 CA              -  mulss xmm1,xmm2
"FSD-Win64-Shipping.exe"+7A0F77: F3 0F 58 C9              -  addss xmm1,xmm1
"FSD-Win64-Shipping.exe"+7A0F7B: F3 0F 5C C1              -  subss xmm0,xmm1
"FSD-Win64-Shipping.exe"+7A0F7F: F3 0F 2D C0              -  cvtss2si eax,xmm0
"FSD-Win64-Shipping.exe"+7A0F83: D1 F8                    -  sar eax,1
"FSD-Win64-Shipping.exe"+7A0F85: 2B C8                    -  sub ecx,eax
"FSD-Win64-Shipping.exe"+7A0F87: 3B D1                    -  cmp edx,ecx
"FSD-Win64-Shipping.exe"+7A0F89: 0F 4E CA                 -  cmovle ecx,edx
// ---------- INJECTING HERE ----------
"FSD-Win64-Shipping.exe"+7A0F8C: 89 8B AC 06 00 00        -  mov [rbx+000006AC],ecx
// ---------- DONE INJECTING  ----------
"FSD-Win64-Shipping.exe"+7A0F92: EB 41                    -  jmp FSD-Win64-Shipping.exe+7A0FD5
"FSD-Win64-Shipping.exe"+7A0F94: 0F 57 C0                 -  xorps xmm0,xmm0
"FSD-Win64-Shipping.exe"+7A0F97: F3 0F 58 D2              -  addss xmm2,xmm2
"FSD-Win64-Shipping.exe"+7A0F9B: F3 41 0F 2A C0           -  cvtsi2ss xmm0,r8d
"FSD-Win64-Shipping.exe"+7A0FA0: 0F 57 C9                 -  xorps xmm1,xmm1
"FSD-Win64-Shipping.exe"+7A0FA3: F3 0F 59 D0              -  mulss xmm2,xmm0
"FSD-Win64-Shipping.exe"+7A0FA7: F3 0F 10 05 4D 76 F5 01  -  movss xmm0,[FSD-Win64-Shipping.exe+26F85FC]
"FSD-Win64-Shipping.exe"+7A0FAF: F3 41 0F 2A C9           -  cvtsi2ss xmm1,r9d
"FSD-Win64-Shipping.exe"+7A0FB4: F3 0F 58 D1              -  addss xmm2,xmm1
"FSD-Win64-Shipping.exe"+7A0FB8: F3 0F 58 D1              -  addss xmm2,xmm1
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry Color="20000000">
      <Description>Code :movss [rcx+60],xmm1</Description>
      <AddressString>FSD-Win64-Shipping.exe+3F8CFD</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>41</Byte>
        <Byte>68</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>49</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of dec [rbx+00000218]</Description>
      <AddressString>FSD-Win64-Shipping.exe+548C4B</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>45</Byte>
        <Byte>E5</Byte>
        <Byte>2D</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>18</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rbx+40],rax</Description>
      <AddressString>FSD-Win64-Shipping.exe+C63A58</AddressString>
      <Before>
        <Byte>3D</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>47</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>43</Byte>
        <Byte>40</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>47</Byte>
        <Byte>48</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rcx+18],rax</Description>
      <AddressString>FSD-Win64-Shipping.exe+964186</AddressString>
      <Before>
        <Byte>10</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>18</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rcx+18],rax</Description>
      <AddressString>FSD-Win64-Shipping.exe+96418E</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>18</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rcx+18],eax</Description>
      <AddressString>FSD-Win64-Shipping.exe+964195</AddressString>
      <Before>
        <Byte>41</Byte>
        <Byte>18</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>18</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rcx+18],rax</Description>
      <AddressString>FSD-Win64-Shipping.exe+96419C</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>41</Byte>
        <Byte>38</Byte>
        <Byte>00</Byte>
        <Byte>80</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rax],ecx</Description>
      <AddressString>VCRUNTIME140.dll+135A</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>0A</Byte>
        <Byte>C3</Byte>
        <Byte>8B</Byte>
        <Byte>0A</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>0F</Byte>
        <Byte>1F</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of ret </Description>
      <AddressString>VCRUNTIME140.dll+135C</AddressString>
      <Before>
        <Byte>C3</Byte>
        <Byte>8B</Byte>
        <Byte>0A</Byte>
        <Byte>89</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>C3</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>1F</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>0A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Code :mov [rsp+20],r9l</Description>
      <AddressString>FSD-Win64-Shipping.exe+7C6690</AddressString>
      <Before>
        <Byte>C4</Byte>
        <Byte>20</Byte>
        <Byte>5B</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>88</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>55</Byte>
        <Byte>53</Byte>
        <Byte>57</Byte>
        <Byte>41</Byte>
        <Byte>55</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Code :movsd xmm0,[rbx+000001F0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+79FEDB</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>F0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.UCharacterRecoilComponent::AddRecoil</Description>
      <AddressString>FSD-Win64-Shipping.exe+77DE49</AddressString>
      <Before>
        <Byte>89</Byte>
        <Byte>30</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>62</Byte>
        <Byte>49</Byte>
        <Byte>E1</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm1,[rax+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5EECBC</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>26</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>88</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>C1</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UFallingStateComponent::OnEnterState+92</Description>
      <AddressString>FSD-Win64-Shipping.exe+5EECBA</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>26</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>88</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.APlayerCharacter::GetUseHoldToRun</Description>
      <AddressString>FSD-Win64-Shipping.exe+5EEC79</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>74</Byte>
        <Byte>0D</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>C2</Byte>
        <Byte>BA</Byte>
        <Byte>FB</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>84</Byte>
        <Byte>C0</Byte>
        <Byte>75</Byte>
        <Byte>04</Byte>
        <Byte>B0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm1,[rax+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5EF71E</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>23</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>88</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>C1</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm0,[rax+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+1879141</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>F7</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>80</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>0F</Byte>
        <Byte>29</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm1,[rax+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+188D5C3</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CF</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>88</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>07</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm1,[rax+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+188FA1A</AddressString>
      <Before>
        <Byte>55</Byte>
        <Byte>68</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CE</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>88</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+11C1</Description>
      <AddressString>FSD-Win64-Shipping.exe+188FA46</AddressString>
      <Before>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>E5</Byte>
        <Byte>0B</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>85</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+70F</Description>
      <AddressString>FSD-Win64-Shipping.exe+188FA82</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>58</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>F7</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>4C</Byte>
        <Byte>8D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+112E</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F9FF</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>99</Byte>
        <Byte>0B</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>86</Byte>
        <Byte>F8</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+11E1</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F9F2</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>59</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>85</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+121F</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F9CD</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>BC</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.UMovementComponent::SafeMoveUpdatedComponent</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F9BA</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>58</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>41</Byte>
        <Byte>34</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+4C2</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F912</AddressString>
      <Before>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>A8</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>1E</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>96</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jb FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+4C2</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F91C</AddressString>
      <Before>
        <Byte>96</Byte>
        <Byte>14</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>72</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>24</Byte>
        <Byte>FD</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jmp FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+435</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F887</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>58</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>1C</Byte>
      </Actual>
      <After>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+419</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F863</AddressString>
      <Before>
        <Byte>4E</Byte>
        <Byte>08</Byte>
        <Byte>45</Byte>
        <Byte>84</Byte>
        <Byte>ED</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>24</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>4C</Byte>
        <Byte>8D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jb FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+3C0</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F825</AddressString>
      <Before>
        <Byte>91</Byte>
        <Byte>48</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>72</Byte>
        <Byte>09</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>01</Byte>
        <Byte>FF</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+39A</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F7FF</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>5D</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>09</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>F1</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jna FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+3C0</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F7EE</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>76</Byte>
        <Byte>40</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>86</Byte>
        <Byte>40</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+34E</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F7A9</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>45</Byte>
        <Byte>84</Byte>
        <Byte>ED</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>13</Byte>
      </Actual>
      <After>
        <Byte>F2</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>06</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm7,[FSD-Win64-Shipping.exe+264B034]</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F720</AddressString>
      <Before>
        <Byte>BE</Byte>
        <Byte>7C</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>3D</Byte>
        <Byte>0C</Byte>
        <Byte>B9</Byte>
        <Byte>DB</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>BE</Byte>
        <Byte>84</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rsi+00000114],00000000</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F6F2</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>C7</Byte>
        <Byte>86</Byte>
        <Byte>14</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>FF</Byte>
        <Byte>90</Byte>
        <Byte>68</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+2D3</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F690</AddressString>
      <Before>
        <Byte>28</Byte>
        <Byte>D8</Byte>
        <Byte>45</Byte>
        <Byte>84</Byte>
        <Byte>ED</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>AD</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>0D</Byte>
        <Byte>2A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.UCharacterMovementComponent::PhysFalling+34E</Description>
      <AddressString>FSD-Win64-Shipping.exe+188F677</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>41</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UFallingStateComponent::OnUpdateState+135</Description>
      <AddressString>FSD-Win64-Shipping.exe+5F1F48</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>2B</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>88</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of shufps xmm0,xmm1,55</Description>
      <AddressString>FSD-Win64-Shipping.exe+5F1F5F</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>60</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>C6</Byte>
        <Byte>C1</Byte>
        <Byte>55</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>C6</Byte>
        <Byte>C9</Byte>
        <Byte>AA</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of shufps xmm1,xmm1,-56</Description>
      <AddressString>FSD-Win64-Shipping.exe+5F1F63</AddressString>
      <Before>
        <Byte>60</Byte>
        <Byte>0F</Byte>
        <Byte>C6</Byte>
        <Byte>C1</Byte>
        <Byte>55</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>C6</Byte>
        <Byte>C9</Byte>
        <Byte>AA</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jmp FSD-Win64-Shipping.UFallingStateComponent::OnUpdateState+152</Description>
      <AddressString>FSD-Win64-Shipping.exe+5F1F73</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>64</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>1D</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>05</Byte>
        <Byte>55</Byte>
        <Byte>8E</Byte>
        <Byte>F2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov eax,[FSD-Win64-Shipping.FVector::ZeroVector+8]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5F1F75</AddressString>
      <Before>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>64</Byte>
        <Byte>EB</Byte>
        <Byte>1D</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>05</Byte>
        <Byte>55</Byte>
        <Byte>8E</Byte>
        <Byte>F2</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>05</Byte>
        <Byte>45</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rsp+68],xmm1</Description>
      <AddressString>FSD-Win64-Shipping.exe+5F1F67</AddressString>
      <Before>
        <Byte>55</Byte>
        <Byte>0F</Byte>
        <Byte>C6</Byte>
        <Byte>C9</Byte>
        <Byte>AA</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rsp+64],xmm0</Description>
      <AddressString>FSD-Win64-Shipping.exe+5F1F6D</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>68</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>1D</Byte>
        <Byte>8B</Byte>
        <Byte>05</Byte>
        <Byte>55</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.USceneComponent::EndScopedMovementUpdate+245</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB92C</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>50</Byte>
        <Byte>C0</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>E3</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>8E</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm1,[rsi+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB932</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>E3</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>8E</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>60</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rsp+000000C0],xmm0</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB906</AddressString>
      <Before>
        <Byte>8E</Byte>
        <Byte>B0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>84</Byte>
        <Byte>24</Byte>
        <Byte>C0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>84</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of sub ecx,01</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB8CF</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>C3</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>E9</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>3D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jmp FSD-Win64-Shipping.USceneComponent::EndScopedMovementUpdate+BC</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB87D</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>C3</Byte>
        <Byte>E6</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>0D</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>A8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.USceneComponent::EndScopedMovementUpdate+AF</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB869</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>F8</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>4B</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of sub rsp,000000B0</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB7D2</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>40</Byte>
        <Byte>56</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>81</Byte>
        <Byte>EC</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>B9</Byte>
        <Byte>50</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm0,[rsi+00000190]</Description>
      <AddressString>FSD-Win64-Shipping.exe+18DB93E</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>60</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>86</Byte>
        <Byte>90</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>8D</Byte>
        <Byte>43</Byte>
        <Byte>78</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm7,[rsi+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+18C94AA</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>90</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>BE</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>84</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of subps xmm7,[rsi+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+18C9579</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>67</Byte>
        <Byte>61</Byte>
        <Byte>DA</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>BE</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>25</Byte>
        <Byte>49</Byte>
        <Byte>F0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups [rdi+000001A0],xmm12</Description>
      <AddressString>FSD-Win64-Shipping.exe+18F5862</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>45</Byte>
        <Byte>8B</Byte>
        <Byte>C6</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>A7</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>B2</Byte>
        <Byte>01</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm7,[rdi+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+18BEAD9</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>27</Byte>
        <Byte>73</Byte>
        <Byte>A4</Byte>
        <Byte>FE</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>BF</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>DB</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm1,[rdi+000001A0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+18F57A4</AddressString>
      <Before>
        <Byte>F5</Byte>
        <Byte>45</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>FE</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>8F</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>1D</Byte>
        <Byte>8E</Byte>
        <Byte>31</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movups xmm0,[r8+10]</Description>
      <AddressString>FSD-Win64-Shipping.exe+A96BCE</AddressString>
      <Before>
        <Byte>10</Byte>
        <Byte>0F</Byte>
        <Byte>C6</Byte>
        <Byte>D0</Byte>
        <Byte>88</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>40</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov rax,[FSD-Win64-Shipping.exe+3750EC0]</Description>
      <AddressString>FSD-Win64-Shipping.exe+1DE83F4</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>28</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>05</Byte>
        <Byte>C5</Byte>
        <Byte>8A</Byte>
        <Byte>96</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>75</Byte>
        <Byte>1A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm0,[FSD-Win64-Shipping.exe+268A548]</Description>
      <AddressString>FSD-Win64-Shipping.exe+59464A</AddressString>
      <Before>
        <Byte>57</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>05</Byte>
        <Byte>F6</Byte>
        <Byte>5E</Byte>
        <Byte>0F</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>DA</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne FSD-Win64-Shipping.Z_Construct_UFunction_ACharacter_OnJumped+2A</Description>
      <AddressString>FSD-Win64-Shipping.exe+1DD3DAE</AddressString>
      <Before>
        <Byte>97</Byte>
        <Byte>01</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>1A</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>15</Byte>
        <Byte>09</Byte>
        <Byte>F5</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of setne r8l</Description>
      <AddressString>FSD-Win64-Shipping.exe+8D09FA</AddressString>
      <Before>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>95</Byte>
        <Byte>C0</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>03</Byte>
        <Byte>C0</Byte>
        <Byte>4C</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add r8,rax</Description>
      <AddressString>FSD-Win64-Shipping.exe+8D09FE</AddressString>
      <Before>
        <Byte>C0</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>95</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>4C</Byte>
        <Byte>03</Byte>
        <Byte>C0</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>89</Byte>
        <Byte>42</Byte>
        <Byte>20</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov rax,[rcx]</Description>
      <AddressString>FSD-Win64-Shipping.exe+8D0A05</AddressString>
      <Before>
        <Byte>C0</Byte>
        <Byte>4C</Byte>
        <Byte>89</Byte>
        <Byte>42</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>FF</Byte>
        <Byte>A0</Byte>
        <Byte>A8</Byte>
        <Byte>07</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UZiplineGunUpgrade::AddToItem+AB</Description>
      <AddressString>FSD-Win64-Shipping.exe+6C9C8E</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>5B</Byte>
      </Actual>
      <After>
        <Byte>3C</Byte>
        <Byte>01</Byte>
        <Byte>74</Byte>
        <Byte>34</Byte>
        <Byte>2C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.UZiplineGunUpgrade::GetUpgradedValue+140</Description>
      <AddressString>FSD-Win64-Shipping.exe+6E479B</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>23</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>6E</Byte>
        <Byte>40</Byte>
        <Byte>2F</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jae FSD-Win64-Shipping.UCharacterRecoilComponent::AddRecoil+8E</Description>
      <AddressString>FSD-Win64-Shipping.exe+59466C</AddressString>
      <Before>
        <Byte>42</Byte>
        <Byte>1C</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F9</Byte>
      </Before>
      <Actual>
        <Byte>73</Byte>
        <Byte>70</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>42</Byte>
        <Byte>24</Byte>
        <Byte>73</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jae FSD-Win64-Shipping.UCharacterRecoilComponent::AddRecoil+8E</Description>
      <AddressString>FSD-Win64-Shipping.exe+594672</AddressString>
      <Before>
        <Byte>70</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>42</Byte>
        <Byte>24</Byte>
      </Before>
      <Actual>
        <Byte>73</Byte>
        <Byte>6A</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.FRecoilSettings::GenerateRecoilImpulse</Description>
      <AddressString>FSD-Win64-Shipping.exe+59467C</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>20</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>5F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm12,[FSD-Win64-Shipping._realbf800000]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5862</AddressString>
      <Before>
        <Byte>2C</Byte>
        <Byte>05</Byte>
        <Byte>02</Byte>
        <Byte>EB</Byte>
        <Byte>09</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>25</Byte>
        <Byte>E9</Byte>
        <Byte>2C</Byte>
        <Byte>05</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>77</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jmp FSD-Win64-Shipping.FRecoilSettings::GenerateRecoilImpulse+8B</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5860</AddressString>
      <Before>
        <Byte>25</Byte>
        <Byte>D8</Byte>
        <Byte>2C</Byte>
        <Byte>05</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>09</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>25</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.FRecoilSettings::GenerateRecoilImpulse+82</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5830</AddressString>
      <Before>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>60</Byte>
        <Byte>88</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>FF</Byte>
        <Byte>15</Byte>
        <Byte>70</Byte>
        <Byte>A1</Byte>
        <Byte>02</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm11,[FSD-Win64-Shipping.exe+263B6BC]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5822</AddressString>
      <Before>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>58</Byte>
        <Byte>98</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>1D</Byte>
        <Byte>91</Byte>
        <Byte>5E</Byte>
        <Byte>05</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>60</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm6,[rdi+04]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E586B</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>77</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>3F</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm6,[rdi+14]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E589C</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>0C</Byte>
        <Byte>A1</Byte>
        <Byte>02</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>77</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>C9</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm7,[rdi+10]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E58A4</AddressString>
      <Before>
        <Byte>77</Byte>
        <Byte>14</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>7F</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>2A</Byte>
        <Byte>C8</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm12,[FSD-Win64-Shipping.exe+2638538]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5857</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>3B</Byte>
        <Byte>C6</Byte>
        <Byte>75</Byte>
        <Byte>0B</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>25</Byte>
        <Byte>D8</Byte>
        <Byte>2C</Byte>
        <Byte>05</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>09</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call qword ptr [FSD-Win64-Shipping._imp_rand]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5896</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>D7</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>15</Byte>
        <Byte>0C</Byte>
        <Byte>A1</Byte>
        <Byte>02</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>77</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call qword ptr [FSD-Win64-Shipping._imp_rand]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E58BA</AddressString>
      <Before>
        <Byte>C9</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>2C</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>15</Byte>
        <Byte>E8</Byte>
        <Byte>A0</Byte>
        <Byte>02</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>C0</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call qword ptr [FSD-Win64-Shipping._imp_rand]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E58DC</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>C7</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>15</Byte>
        <Byte>C6</Byte>
        <Byte>A0</Byte>
        <Byte>02</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>77</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp byte ptr [rcx+18],00</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E57F7</AddressString>
      <Before>
        <Byte>EC</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>79</Byte>
        <Byte>18</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>EA</Byte>
        <Byte>0F</Byte>
        <Byte>29</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov rax,rsp</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E57E0</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>C4</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>58</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call qword ptr [FSD-Win64-Shipping._imp_rand]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5832</AddressString>
      <Before>
        <Byte>29</Byte>
        <Byte>60</Byte>
        <Byte>88</Byte>
        <Byte>74</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>15</Byte>
        <Byte>70</Byte>
        <Byte>A1</Byte>
        <Byte>02</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>6E</Byte>
        <Byte>C8</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm7,[rdi]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5870</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>3F</Byte>
      </Actual>
      <After>
        <Byte>FF</Byte>
        <Byte>15</Byte>
        <Byte>2E</Byte>
        <Byte>A1</Byte>
        <Byte>02</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call qword ptr [FSD-Win64-Shipping._imp_rand]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5874</AddressString>
      <Before>
        <Byte>04</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>3F</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>15</Byte>
        <Byte>2E</Byte>
        <Byte>A1</Byte>
        <Byte>02</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>D2</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rbp+04],xmm9</Description>
      <AddressString>FSD-Win64-Shipping.exe+5E5949</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4D</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>49</Byte>
        <Byte>8B</Byte>
        <Byte>5B</Byte>
        <Byte>10</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm7,[FSD-Win64-Shipping.exe+2638538]</Description>
      <AddressString>FSD-Win64-Shipping.exe+7B2E41</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>F0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>3D</Byte>
        <Byte>EF</Byte>
        <Byte>56</Byte>
        <Byte>E8</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>D2</Byte>
        <Byte>74</Byte>
        <Byte>42</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.AFSDPlayerController::PlayForceFeedback</Description>
      <AddressString>FSD-Win64-Shipping.exe+7B302A</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>45</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>A1</Byte>
        <Byte>57</Byte>
        <Byte>EF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>96</Byte>
        <Byte>68</Byte>
        <Byte>06</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rsp+20],xmm6</Description>
      <AddressString>FSD-Win64-Shipping.exe+7B2E6E</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>28</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CE</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>74</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>17</Byte>
        <Byte>19</Byte>
        <Byte>20</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov rdx,[FSD-Win64-Shipping.exe+34F88E8]</Description>
      <AddressString>FSD-Win64-Shipping.exe+7B3285</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>0F</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>15</Byte>
        <Byte>5C</Byte>
        <Byte>56</Byte>
        <Byte>D4</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>B0</Byte>
        <Byte>01</Byte>
        <Byte>E8</Byte>
        <Byte>2C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.AAmmoDrivenWeapon::Server_PlayBurstFire</Description>
      <AddressString>FSD-Win64-Shipping.exe+7B33ED</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CE</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>4E</Byte>
        <Byte>E0</Byte>
        <Byte>0F</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>38</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.exe+AEA7C0</Description>
      <AddressString>FSD-Win64-Shipping.exe+7B36F9</AddressString>
      <Before>
        <Byte>0D</Byte>
        <Byte>0F</Byte>
        <Byte>52</Byte>
        <Byte>D4</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>C2</Byte>
        <Byte>70</Byte>
        <Byte>33</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>0D</Byte>
        <Byte>0B</Byte>
        <Byte>52</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of lea rdx,[FSD-Win64-Shipping.exe+274D378]</Description>
      <AddressString>FSD-Win64-Shipping.exe+7B36EB</AddressString>
      <Before>
        <Byte>B8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>15</Byte>
        <Byte>86</Byte>
        <Byte>9C</Byte>
        <Byte>F9</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>0D</Byte>
        <Byte>0F</Byte>
        <Byte>52</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.AGatlingGun::Tick+95</Description>
      <AddressString>FSD-Win64-Shipping.exe+7AD58B</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>DB</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>58</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>4E</Byte>
        <Byte>A6</Byte>
        <Byte>19</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.ABeltDrivenWeapon::Tick</Description>
      <AddressString>FSD-Win64-Shipping.exe+7AD57C</AddressString>
      <Before>
        <Byte>28</Byte>
        <Byte>F1</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>EF</Byte>
        <Byte>C6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>9E</Byte>
        <Byte>B0</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rsi+00000754],xmm1</Description>
      <AddressString>FSD-Win64-Shipping.exe+7AD693</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>CE</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>8E</Byte>
        <Byte>54</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>B6</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov rsi,rcx</Description>
      <AddressString>FSD-Win64-Shipping.exe+7AD579</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>20</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>F1</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>EF</Byte>
        <Byte>C6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov rcx,[rdi+00000388]</Description>
      <AddressString>FSD-Win64-Shipping.exe+79D991</AddressString>
      <Before>
        <Byte>8F</Byte>
        <Byte>36</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>8F</Byte>
        <Byte>88</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>0F</Byte>
        <Byte>84</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rsp+20],xmm0</Description>
      <AddressString>FSD-Win64-Shipping.exe+79DB3F</AddressString>
      <Before>
        <Byte>28</Byte>
        <Byte>01</Byte>
        <Byte>45</Byte>
        <Byte>33</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D3</Byte>
        <Byte>E8</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm8,[FSD-Win64-Shipping.exe+2638538]</Description>
      <AddressString>FSD-Win64-Shipping.exe+7A9CB6</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>B8</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>05</Byte>
        <Byte>79</Byte>
        <Byte>E8</Byte>
        <Byte>E8</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>32</Byte>
        <Byte>DB</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>F6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.ABeltDrivenWeapon::Tick+C0</Description>
      <AddressString>FSD-Win64-Shipping.exe+7A9CE2</AddressString>
      <Before>
        <Byte>3C</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>4C</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>8F</Byte>
        <Byte>88</Byte>
        <Byte>03</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je FSD-Win64-Shipping.ABeltDrivenWeapon::Tick+6B</Description>
      <AddressString>FSD-Win64-Shipping.exe+7A9CD5</AddressString>
      <Before>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>3C</Byte>
        <Byte>03</Byte>
        <Byte>75</Byte>
        <Byte>1D</Byte>
        <Byte>80</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [rdi+000006B8],xmm0</Description>
      <AddressString>FSD-Win64-Shipping.exe+7A9F6C</AddressString>
      <Before>
        <Byte>5C</Byte>
        <Byte>C7</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C6</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>87</Byte>
        <Byte>B8</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>77</Byte>
        <Byte>2B</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>07</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call FSD-Win64-Shipping.UPerkAsset::CanUseCharge</Description>
      <AddressString>FSD-Win64-Shipping.exe+5DFE2B</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>D0</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>F0</Byte>
        <Byte>B3</Byte>
        <Byte>16</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov rbx,[rsp+30]</Description>
      <AddressString>FSD-Win64-Shipping.exe+5DFE30</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>F0</Byte>
        <Byte>B3</Byte>
        <Byte>16</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>84</Byte>
        <Byte>C0</Byte>
        <Byte>0F</Byte>
        <Byte>95</Byte>
        <Byte>C0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov [rsp+20],rax</Description>
      <AddressString>FSD-Win64-Shipping.exe+712D3A</AddressString>
      <Before>
        <Byte>91</Byte>
        <Byte>E8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>2C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>gravbase</Name>
      <Address>7FF63CAB0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
